{"version":3,"file":"alizarin.umd.cjs","sources":["../../../node_modules/uuid/dist/esm-browser/regex.js","../../../node_modules/uuid/dist/esm-browser/validate.js","../../../node_modules/uuid/dist/esm-browser/parse.js","../../../node_modules/uuid/dist/esm-browser/stringify.js","../../../node_modules/uuid/dist/esm-browser/rng.js","../../../node_modules/uuid/dist/esm-browser/v35.js","../../../node_modules/uuid/dist/esm-browser/native.js","../../../node_modules/uuid/dist/esm-browser/v4.js","../../../node_modules/uuid/dist/esm-browser/sha1.js","../../../node_modules/uuid/dist/esm-browser/v5.js","../js/utils.ts","../js/static-types.ts","../js/client.ts","../js/rdm.ts","../js/staticStore.ts","../js/cards.ts","../js/nodeConfig.ts","../js/viewModels.ts","../js/pseudos.ts","../js/graphManager.ts","../js/renderers.ts","../js/main.ts","../__vite-browser-external"],"sourcesContent":["export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;\n","import REGEX from './regex.js';\nfunction validate(uuid) {\n    return typeof uuid === 'string' && REGEX.test(uuid);\n}\nexport default validate;\n","import validate from './validate.js';\nfunction parse(uuid) {\n    if (!validate(uuid)) {\n        throw TypeError('Invalid UUID');\n    }\n    let v;\n    return Uint8Array.of((v = parseInt(uuid.slice(0, 8), 16)) >>> 24, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff, (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, v & 0xff, ((v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000) & 0xff, (v / 0x100000000) & 0xff, (v >>> 24) & 0xff, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff);\n}\nexport default parse;\n","import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n","import parse from './parse.js';\nimport { unsafeStringify } from './stringify.js';\nexport function stringToBytes(str) {\n    str = unescape(encodeURIComponent(str));\n    const bytes = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; ++i) {\n        bytes[i] = str.charCodeAt(i);\n    }\n    return bytes;\n}\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function v35(version, hash, value, namespace, buf, offset) {\n    const valueBytes = typeof value === 'string' ? stringToBytes(value) : value;\n    const namespaceBytes = typeof namespace === 'string' ? parse(namespace) : namespace;\n    if (typeof namespace === 'string') {\n        namespace = parse(namespace);\n    }\n    if (namespace?.length !== 16) {\n        throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    }\n    let bytes = new Uint8Array(16 + valueBytes.length);\n    bytes.set(namespaceBytes);\n    bytes.set(valueBytes, namespaceBytes.length);\n    bytes = hash(bytes);\n    bytes[6] = (bytes[6] & 0x0f) | version;\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = bytes[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(bytes);\n}\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n","function f(s, x, y, z) {\n    switch (s) {\n        case 0:\n            return (x & y) ^ (~x & z);\n        case 1:\n            return x ^ y ^ z;\n        case 2:\n            return (x & y) ^ (x & z) ^ (y & z);\n        case 3:\n            return x ^ y ^ z;\n    }\n}\nfunction ROTL(x, n) {\n    return (x << n) | (x >>> (32 - n));\n}\nfunction sha1(bytes) {\n    const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n    const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n    const newBytes = new Uint8Array(bytes.length + 1);\n    newBytes.set(bytes);\n    newBytes[bytes.length] = 0x80;\n    bytes = newBytes;\n    const l = bytes.length / 4 + 2;\n    const N = Math.ceil(l / 16);\n    const M = new Array(N);\n    for (let i = 0; i < N; ++i) {\n        const arr = new Uint32Array(16);\n        for (let j = 0; j < 16; ++j) {\n            arr[j] =\n                (bytes[i * 64 + j * 4] << 24) |\n                    (bytes[i * 64 + j * 4 + 1] << 16) |\n                    (bytes[i * 64 + j * 4 + 2] << 8) |\n                    bytes[i * 64 + j * 4 + 3];\n        }\n        M[i] = arr;\n    }\n    M[N - 1][14] = ((bytes.length - 1) * 8) / Math.pow(2, 32);\n    M[N - 1][14] = Math.floor(M[N - 1][14]);\n    M[N - 1][15] = ((bytes.length - 1) * 8) & 0xffffffff;\n    for (let i = 0; i < N; ++i) {\n        const W = new Uint32Array(80);\n        for (let t = 0; t < 16; ++t) {\n            W[t] = M[i][t];\n        }\n        for (let t = 16; t < 80; ++t) {\n            W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n        }\n        let a = H[0];\n        let b = H[1];\n        let c = H[2];\n        let d = H[3];\n        let e = H[4];\n        for (let t = 0; t < 80; ++t) {\n            const s = Math.floor(t / 20);\n            const T = (ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t]) >>> 0;\n            e = d;\n            d = c;\n            c = ROTL(b, 30) >>> 0;\n            b = a;\n            a = T;\n        }\n        H[0] = (H[0] + a) >>> 0;\n        H[1] = (H[1] + b) >>> 0;\n        H[2] = (H[2] + c) >>> 0;\n        H[3] = (H[3] + d) >>> 0;\n        H[4] = (H[4] + e) >>> 0;\n    }\n    return Uint8Array.of(H[0] >> 24, H[0] >> 16, H[0] >> 8, H[0], H[1] >> 24, H[1] >> 16, H[1] >> 8, H[1], H[2] >> 24, H[2] >> 16, H[2] >> 8, H[2], H[3] >> 24, H[3] >> 16, H[3] >> 8, H[3], H[4] >> 24, H[4] >> 16, H[4] >> 8, H[4]);\n}\nexport default sha1;\n","import sha1 from './sha1.js';\nimport v35, { DNS, URL } from './v35.js';\nexport { DNS, URL } from './v35.js';\nfunction v5(value, namespace, buf, offset) {\n    return v35(0x50, sha1, value, namespace, buf, offset);\n}\nv5.DNS = DNS;\nv5.URL = URL;\nexport default v5;\n","import { v5 as uuidv5 } from 'uuid';\nimport { IStringKeyedObject } from \"./interfaces\";\n\n// TODO: make this customizable.\nconst DEFAULT_LANGUAGE = \"en\";\nconst SLUG_LENGTH = 20;\nconst UUID_NAMESPACE = '1a79f1c8-9505-4bea-a18e-28a053f725ca'; // Generated for this purpose.\nconst UUID_NAMESPACE_COMPRESSION = uuidv5('compression', '1a79f1c8-9505-4bea-a18e-28a053f725ca');\n\nlet currentLanguage: string | undefined;\n\nfunction slugify(original: any): string {\n    return `${original}`.replaceAll(/[^A-Za-z0-9_]/g, \"\").slice(0, SLUG_LENGTH);\n}\n\nfunction getCurrentLanguage(): string {\n  return currentLanguage || ((typeof navigator != 'undefined' && navigator.language) || DEFAULT_LANGUAGE).slice(0, 2);\n}\n\nfunction setCurrentLanguage(lang: string) {\n  currentLanguage = lang;\n}\n\nclass AttrPromise<T> extends Promise<T> implements IStringKeyedObject {\n  [key: string | symbol]: any;\n  [Symbol.toPrimitive]: undefined;\n  constructor(\n    executor: (\n      resolve: (value: T | PromiseLike<T>) => void,\n      reject: (reason: any) => void,\n    ) => void,\n  ) {\n    super(executor);\n    const proxy = new Proxy(this, {\n      set: (object: AttrPromise<T>, keyObj, value) => {\n        object.then((val: any) => {\n          val[keyObj] = value;\n          return val;\n        });\n        return true;\n      },\n      get: (object: AttrPromise<T>, keyObj: string | symbol) => {\n        if (keyObj in object) {\n          const value: any = object[keyObj];\n          if (typeof value === \"function\") {\n            return value.bind(object);\n          }\n          return value;\n        }\n        const key = keyObj.toString();\n        if (key in object) {\n          const value: any = object[key];\n          if (typeof value === \"function\") {\n            return value.bind(object);\n          }\n          return value;\n        }\n        if (object instanceof Promise) {\n          return object.then((val: any) => {\n            return val ? val[keyObj] : val;\n          });\n        }\n        return object[keyObj];\n      },\n    });\n    return proxy;\n  }\n}\n\nconst KEY_COMPRESSION_LENGTH = 1000;\nfunction generateUuidv5(group: [type: string, id?: string], key: string | string[]) {\n  if (Array.isArray(key)) {\n    let shortKey = '';\n    let keyTracker = '';\n    key.forEach(k => {\n      if (keyTracker.length + k.length + 1 > KEY_COMPRESSION_LENGTH) {\n        shortKey = uuidv5(shortKey + '>' + keyTracker, UUID_NAMESPACE_COMPRESSION);\n        keyTracker = k;\n      } else {\n        keyTracker += ';' + k;\n      }\n    });\n  }\n  return uuidv5(`${group[0]}:${group[1]}:${key}`, UUID_NAMESPACE);\n}\n\nexport { slugify, AttrPromise, getCurrentLanguage, generateUuidv5, setCurrentLanguage };\n","import { v4 as uuidv4 } from 'uuid';\nimport { generateUuidv5 } from './utils';\nconst UUID_NAMESPACE = '1a79f1c8-9505-4bea-a18e-28a053f725ca'; // Generated for this purpose.\nimport { getCurrentLanguage, slugify } from './utils';\n\nclass StaticGraphMeta {\n  [key: string]: any\n  author: string | undefined\n  cards: number | undefined\n  cards_x_nodes_x_widgets: number | undefined\n  color: string | undefined\n  description: {[lang: string]: string} | undefined\n  edges: number | undefined\n  graphid: string\n  iconclass: string | undefined\n  is_editable: boolean | undefined\n  isresource: boolean | undefined\n  jsonldcontext: {[key: string]: any} | undefined\n  name: {[lang: string]: string} | undefined\n  nodegroups: number | undefined\n  nodes: number | undefined\n  ontology_id: string | undefined\n  publication: {[key: string]: string | null} | undefined\n  relatable_resource_model_ids: string[] = []\n  resource_2_resource_constraints: any[] = []\n  root: StaticNode | undefined\n  slug: string | undefined\n  subtitle: {[lang: string]: string} | undefined\n  version: string | undefined\n\n  constructor(jsondata: StaticGraphMeta) {\n    this.graphid = jsondata.graphid;\n    Object.assign(this, jsondata)\n  }\n}\n\nclass StaticTranslatableString extends String {\n  translations: Map<string, string>;\n  lang: string;\n\n  constructor(\n    s: string | StaticTranslatableString,\n    lang: undefined | string = undefined,\n  ) {\n    let translations: Map<string, string>;\n    let finalLang: string;\n    if (s instanceof StaticTranslatableString) {\n      translations = new Map(s.translations);\n      if (lang === undefined) {\n        finalLang = s.lang;\n      } else {\n        finalLang = lang;\n      }\n    } else if (typeof s === \"object\") {\n      translations = new Map(Object.entries(s));\n      if (lang === undefined || !translations.has(lang)) {\n        const defaultLanguage = getCurrentLanguage();\n        if (!translations || translations.has(defaultLanguage)) {\n          finalLang = defaultLanguage;\n        } else {\n          finalLang = Object.keys(s)[0];\n        }\n      } else {\n        finalLang = lang;\n      }\n    } else {\n      translations = new Map();\n      finalLang = lang || getCurrentLanguage();\n      translations.set(finalLang, s);\n    }\n    s = translations.get(finalLang) || \"\";\n    super(s);\n    this.translations = translations;\n    this.lang = finalLang;\n  }\n\n  copy?() {\n    return new StaticTranslatableString(this, this.lang);\n  }\n\n  toString(): string {\n    const current = this.lang || getCurrentLanguage();\n    let asString;\n    if (this.translations.size) {\n      asString = this.translations.get(current) || this.translations.values().next().value\n    }\n    return `${asString}`;\n  }\n\n  toJSON(): {[key: string]: string} {\n    return Object.fromEntries(this.translations);\n  }\n}\n\nclass StaticNodegroup {\n  cardinality: \"1\" | \"n\" | null;\n  legacygroupid: null;\n  nodegroupid: string;\n  parentnodegroup_id: string | null;\n\n  constructor(jsonData: StaticNodegroup) {\n    this.legacygroupid = jsonData.legacygroupid;\n    this.nodegroupid = jsonData.nodegroupid;\n    this.parentnodegroup_id = jsonData.parentnodegroup_id;\n    this.cardinality = jsonData.cardinality;\n  }\n\n  copy?(): StaticNodegroup {\n    return new StaticNodegroup(this);\n  }\n}\n\nclass StaticNode {\n  alias: string | null;\n  config: { [key: string]: any };\n  datatype: string;\n  description: string | null;\n  exportable: boolean;\n  fieldname: null | string;\n  graph_id: string;\n  hascustomalias: boolean;\n  is_collector: boolean;\n  isrequired: boolean;\n  issearchable: boolean;\n  istopnode: boolean;\n  name: string;\n  nodegroup_id: string | null;\n  nodeid: string;\n  ontologyclass: string | null = null;\n  parentproperty: string | null = null;\n  sortorder: number;\n  sourcebranchpublication_id: null | string = null;\n\n  constructor(jsonData: StaticNode) {\n    this.alias = jsonData.alias;\n    this.config = jsonData.config;\n    this.datatype = jsonData.datatype;\n    this.description = jsonData.description;\n    this.exportable = jsonData.exportable;\n    this.fieldname = jsonData.fieldname;\n    this.graph_id = jsonData.graph_id;\n    this.hascustomalias = jsonData.hascustomalias;\n    this.is_collector = jsonData.is_collector;\n    this.isrequired = jsonData.isrequired;\n    this.issearchable = jsonData.issearchable;\n    this.istopnode = jsonData.istopnode;\n    this.name = jsonData.name;\n    this.nodegroup_id = jsonData.nodegroup_id;\n    this.nodeid = jsonData.nodeid;\n    this.parentproperty = jsonData.parentproperty;\n    this.sortorder = jsonData.sortorder;\n    this.ontologyclass = jsonData.ontologyclass;\n    this.sourcebranchpublication_id = jsonData.sourcebranchpublication_id;\n  }\n\n  copy?(): StaticNode {\n    // TODO: config should be deep copied\n    return new StaticNode(this);\n  }\n\n  // true -- same object\n  // 2 -- identical\n  // 1 -- identical not counting falsey nodeid, nodegroupid and/or graphid\n  // -1 -- identical up to nodeid\n  // -2 -- identical up to nodeid, nodegroupid\n  // -3 -- identical up to nodeid, nodegroupid and graphid\n  // false -- different\n  // for <2, falsey nodeid, nodegroupid and graphid count as matches\n  // and copy/compare are ignored.\n  static compare(nodeA: StaticNode | {[key: string]: any}, nodeB: StaticNode | {[key: string]: any}): number | boolean {\n    if (nodeA === nodeB) {\n      return true;\n    }\n    const keys = [...Object.keys(nodeA), ...Object.keys(nodeB)].filter(key => ![\n      'compare',\n      'copy',\n      'nodeid',\n      'graph_id',\n      'nodegroup_id'\n    ].includes(key));\n    // doubles keys...\n    function compareEntries(entriesA: [string, any][], entriesB: [string, any][]) {\n      const entryPairs: {[key: string]: any} = {};\n      for (const [key, value] of [...entriesA, ...entriesB]) {\n        entryPairs[key] = entryPairs[key] || [];\n        entryPairs[key].push(value);\n      }\n      for (const [_, [valA, valB]] of Object.entries(entryPairs)) {\n        if (valA && valB && typeof valA === 'object' && typeof valB === 'object') {\n          if (!compareEntries(Object.entries(valA), Object.entries(valB))) {\n            return false;\n          }\n        }\n        if (Array.isArray(valA) && Array.isArray(valB)) {\n          if (!compareEntries(Object.entries(valA), Object.entries(valB))) {\n            return false;\n          }\n        }\n        if (valA !== valB) {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (!compareEntries(\n      // @ts-expect-error Expecting values to be symbols\n      keys.map((k: string): [string, any][] => [k, nodeA[k]]),\n      // @ts-expect-error Expecting values to be symbols\n      keys.map((k: string): [string, any][] => [k, nodeB[k]])\n    )) {\n      return false;\n    }\n\n    // We know these are the same up to the IDs\n    if (nodeA.graph_id && nodeB.graph_id && nodeA.graph_id !== nodeB.graph_id) {\n      return -3;\n    }\n    if (nodeA.nodegroup_id && nodeB.nodegroup_id && nodeA.nodegroup_id !== nodeB.nodegroup_id) {\n      return -2;\n    }\n    if (nodeA.nodeid && nodeB.nodeid && nodeA.nodeid !== nodeB.nodeid) {\n      return -1;\n    }\n    if (\n      (nodeA.graph_id && nodeB.graph_id || nodeA.graph_id === nodeB.graph_id) &&\n      (nodeA.nodegroup_id && nodeB.nodegroup_id || nodeA.nodegroup_id === nodeB.nodegroup_id) &&\n      (nodeA.nodeid && nodeB.nodeid || nodeA.nodeid === nodeB.nodeid)\n    ) {\n      return 2;\n    }\n    return 1;\n  }\n}\n\nclass StaticConstraint {\n  card_id: string;\n  constraintid: string;\n  nodes: Array<string>;\n  uniquetoallinstances: boolean;\n\n  constructor(jsonData: StaticConstraint) {\n    this.card_id = jsonData.card_id;\n    this.constraintid = jsonData.constraintid;\n    this.nodes = jsonData.nodes;\n    this.uniquetoallinstances = jsonData.uniquetoallinstances;\n  }\n}\n\nclass StaticCard {\n  active: boolean;\n  cardid: string;\n  component_id: string;\n  config?: object;\n  constraints: Array<StaticConstraint>;\n  cssclass: null | string;\n  description: string | null;\n  graph_id: string;\n  helpenabled: boolean;\n  helptext: StaticTranslatableString;\n  helptitle: StaticTranslatableString;\n  instructions: StaticTranslatableString;\n  is_editable: boolean;\n  name: StaticTranslatableString;\n  nodegroup_id: string;\n  sortorder: number | null;\n  visible: boolean;\n\n  constructor(jsonData: StaticCard) {\n    this.active = jsonData.active;\n    this.cardid = jsonData.cardid;\n    this.component_id = jsonData.component_id;\n    this.config = jsonData.config;\n    this.constraints = jsonData.constraints.map(\n      (constraint) => new StaticConstraint(constraint),\n    );\n    this.cssclass = jsonData.cssclass;\n    this.description = jsonData.description;\n    this.graph_id = jsonData.graph_id;\n    this.helpenabled = jsonData.helpenabled;\n    this.helptext = new StaticTranslatableString(jsonData.helptext);\n    this.helptitle = new StaticTranslatableString(jsonData.helptitle);\n    this.instructions = new StaticTranslatableString(jsonData.instructions);\n    this.is_editable = jsonData.is_editable;\n    this.name = new StaticTranslatableString(jsonData.name);\n    this.nodegroup_id = jsonData.nodegroup_id;\n    this.sortorder = jsonData.sortorder;\n    this.visible = jsonData.visible;\n  }\n}\n\nclass StaticCardsXNodesXWidgets {\n  card_id: string;\n  config: object;\n  id: string;\n  label: StaticTranslatableString;\n  node_id: string;\n  sortorder: number;\n  visible: boolean;\n  widget_id: string;\n\n  constructor(jsonData: StaticCardsXNodesXWidgets) {\n    this.card_id = jsonData.card_id;\n    this.config = jsonData.config;\n    this.id = jsonData.id;\n    this.label = new StaticTranslatableString(jsonData.label);\n    this.node_id = jsonData.node_id;\n    this.sortorder = jsonData.sortorder;\n    this.visible = jsonData.visible;\n    this.widget_id = jsonData.widget_id;\n  }\n}\n\nclass StaticEdge {\n  description: string | null;\n  domainnode_id: string;\n  edgeid: string;\n  graph_id: string;\n  name: null | string;\n  ontologyproperty: null | string = null;\n  rangenode_id: string;\n\n  constructor(jsonData: StaticEdge) {\n    this.description = jsonData.description;\n    this.domainnode_id = jsonData.domainnode_id;\n    this.edgeid = jsonData.edgeid;\n    this.graph_id = jsonData.graph_id;\n    this.name = jsonData.name;\n    this.rangenode_id = jsonData.rangenode_id;\n    this.ontologyproperty = jsonData.ontologyproperty;\n  }\n\n  copy?(): StaticEdge {\n    return new StaticEdge(this);\n  }\n}\n\ninterface IStaticDescriptorConfig {\n  descriptor_types: {\n    nodegroup_id: string,\n    string_template: string\n  }[],\n};\n\nclass StaticFunctionsXGraphs {\n  config: IStaticDescriptorConfig;\n  function_id: string;\n  graph_id: string;\n  id: string;\n\n  constructor(jsonData: StaticFunctionsXGraphs) {\n    this.config = jsonData.config;\n    this.function_id = jsonData.function_id;\n    this.graph_id = jsonData.graph_id;\n    this.id = jsonData.id;\n  }\n\n  copy(): StaticFunctionsXGraphs {\n    return new StaticFunctionsXGraphs(this);\n  }\n}\n\nclass StaticPublication {\n  graph_id: string;\n  notes: null | string;\n  publicationid: string;\n  published_time: string;\n\n  constructor(jsonData: StaticPublication) {\n    this.graph_id = jsonData.graph_id;\n    this.notes = jsonData.notes;\n    this.publicationid = jsonData.publicationid;\n    this.published_time = jsonData.published_time;\n  }\n\n  copy?(): StaticPublication {\n    return new StaticPublication(this);\n  }\n}\n\nclass StaticGraph {\n  author: string;\n  cards: Array<StaticCard> | null = null;\n  cards_x_nodes_x_widgets: Array<StaticCardsXNodesXWidgets> | null = null;\n  color: string | null;\n  config: object;\n  deploymentdate: null | string = null;\n  deploymentfile: null | string = null;\n  description: StaticTranslatableString;\n  edges: Array<StaticEdge>;\n  functions_x_graphs: Array<StaticFunctionsXGraphs> | null = null;\n  graphid: string;\n  iconclass: string;\n  is_editable: boolean | null = null;\n  isresource: boolean;\n  jsonldcontext: string | null = null;\n  name: StaticTranslatableString;\n  nodegroups: Array<StaticNodegroup>;\n  nodes: Array<StaticNode>;\n  ontology_id: string | null = null;\n  publication: StaticPublication | null = null;\n  relatable_resource_model_ids: Array<string>;\n  resource_2_resource_constraints: Array<any> | null = null;\n  root: StaticNode;\n  slug: string | null = null;\n  subtitle: StaticTranslatableString;\n  template_id: string;\n  version: string;\n\n  constructor(jsonData: StaticGraph) {\n    this.author = jsonData.author;\n    this.cards =\n      jsonData.cards && jsonData.cards.map((card) => new StaticCard(card));\n    this.cards_x_nodes_x_widgets =\n      jsonData.cards_x_nodes_x_widgets &&\n      jsonData.cards_x_nodes_x_widgets.map(\n        (card_x_node_x_widget) =>\n          new StaticCardsXNodesXWidgets(card_x_node_x_widget),\n      );\n    this.color = jsonData.color;\n    this.config = jsonData.config;\n    this.deploymentdate = jsonData.deploymentdate;\n    this.deploymentfile = jsonData.deploymentfile;\n    this.description = new StaticTranslatableString(jsonData.description);\n    this.edges = jsonData.edges.map((edge) => new StaticEdge(edge));\n    this.functions_x_graphs =\n      jsonData.functions_x_graphs &&\n      jsonData.functions_x_graphs.map(\n        (functions_x_graphs) => new StaticFunctionsXGraphs(functions_x_graphs),\n      );\n    this.graphid = jsonData.graphid;\n    this.iconclass = jsonData.iconclass;\n    this.is_editable = jsonData.is_editable;\n    this.isresource = jsonData.isresource;\n    this.jsonldcontext = jsonData.jsonldcontext;\n    this.name = new StaticTranslatableString(jsonData.name);\n    this.nodegroups = jsonData.nodegroups.map(\n      (nodegroup) => new StaticNodegroup(nodegroup),\n    );\n    // We should probably confirm that there is one node in nodes and it is\n    // equivalent to root.\n    this.nodes = jsonData.nodes.map((node) => new StaticNode(node));\n    this.ontology_id = jsonData.ontology_id;\n    this.publication =\n      jsonData.publication && new StaticPublication(jsonData.publication);\n    this.relatable_resource_model_ids = jsonData.relatable_resource_model_ids;\n    this.resource_2_resource_constraints =\n      jsonData.resource_2_resource_constraints;\n    this.root = jsonData.root;\n    this.slug = jsonData.slug;\n    this.subtitle = new StaticTranslatableString(jsonData.subtitle);\n    this.template_id = jsonData.template_id;\n    this.version = jsonData.version;\n  }\n\n  // TODO: complete deepcopy\n  copy?(): StaticGraph {\n    const newGraph = new StaticGraph(this);\n    Object.assign(newGraph, {\n      author: this.author,\n      cards: this.cards?.map(card => new StaticCard(card)) || [],\n      cards_x_nodes_x_widgets: this.cards_x_nodes_x_widgets?.map(cnw => new StaticCardsXNodesXWidgets(cnw)) || [],\n      color: this.color,\n      config: Object.assign({}, this.config), // TODO: deepcopy;\n      deploymentdate: this.deploymentdate,\n      deploymentfile: this.deploymentfile,\n      description: this.description.copy && this.description.copy() || this.description,\n      edges: this.edges.map(edge => edge.copy && edge.copy() || edge),\n      functions_x_graphs: this.functions_x_graphs?.map(fxg => fxg.copy()) || [],\n      graphid: this.graphid,\n      iconclass: this.iconclass,\n      is_editable: this.is_editable,\n      isresource: this.isresource,\n      jsonldcontext: this.jsonldcontext,\n      name: this.name.copy && this.name.copy() || this.name,\n      nodegroups: this.nodegroups?.map(ng => ng.copy && ng.copy() || ng),\n      nodes: this.nodes?.map(n => n.copy && n.copy() || n),\n      ontology_id: this.ontology_id,\n      publication: this.publication?.copy && this.publication.copy() || null,\n      relatable_resource_model_ids: [...this.relatable_resource_model_ids || []],\n      resource_2_resource_constraints: [...this.resource_2_resource_constraints || []],\n      root: this.root.copy && this.root.copy() || this.root,\n      slug: this.slug,\n      subtitle: this.subtitle.copy && this.subtitle.copy(),\n      template_id: this.template_id,\n      version: this.version\n    });\n    return newGraph;\n  }\n\n  static create(props: {\n    author?: string,\n    color?: string | null,\n    config?: object,\n    deploymentdate?: null | string,\n    deploymentfile?: null | string,\n    description?: string | StaticTranslatableString,\n    graphid?: string,\n    iconclass?: string,\n    is_editable?: boolean | null,\n    isresource?: boolean,\n    jsonldcontext?: string | null,\n    name?: string | StaticTranslatableString,\n    ontology_id?: string | null,\n    relatable_resource_model_ids?: Array<string>,\n    resource_2_resource_constraints?: Array<any> | null,\n    slug?: string | null,\n    subtitle?: string | StaticTranslatableString,\n    template_id?: string,\n    version?: string\n  }, published: boolean=true): StaticGraph {\n    const graphid = props.graphid || uuidv4();\n    const publication = published ? new StaticPublication({\n      graph_id: graphid,\n      notes: null,\n      publicationid: uuidv4(),\n      published_time: (new Date()).toISOString()\n    }) : null;\n    // TODO: check name is not just string in upstream\n    const name = props.name ? (\n      props.name instanceof StaticTranslatableString ?\n      props.name : new StaticTranslatableString(props.name)\n    ) : new StaticTranslatableString('');\n    const alias = slugify(name);\n    const root = new StaticNode({\n      \"alias\": alias,\n      \"config\": {},\n      \"datatype\": \"semantic\",\n      \"description\": \"\",\n      \"exportable\": false,\n      \"fieldname\": \"\",\n      \"graph_id\": graphid,\n      \"hascustomalias\": false,\n      \"is_collector\": false,\n      \"isrequired\": false,\n      \"issearchable\": true,\n      \"istopnode\": true,\n      \"name\": name.toString(),\n      \"nodegroup_id\": null,\n      \"nodeid\": graphid,\n      \"ontologyclass\": props.ontology_id || null,\n      \"parentproperty\": null,\n      \"sortorder\": 0,\n      \"sourcebranchpublication_id\": null\n    });\n    return new StaticGraph({\n      author: props.author,\n      cards: null,\n      cards_x_nodes_x_widgets: null,\n      color: props.color || null,\n      config: props.config || {},\n      deploymentdate: props.deploymentdate || null,\n      deploymentfile: props.deploymentfile || null,\n      description: props.description ? (\n        props.description instanceof StaticTranslatableString ?\n        props.description : new StaticTranslatableString(props.description)\n      ) : null,\n      edges: [],\n      functions_x_graphs: [],\n      graphid: graphid,\n      iconclass: props.iconclass || '',\n      is_editable: props.is_editable || null,\n      isresource: props.isresource || null,\n      jsonldcontext: props.jsonldcontext || null,\n      name: name,\n      nodegroups: [],\n      nodes: [root.copy()],\n      ontology_id: props.ontology_id || null,\n      publication: publication,\n      relatable_resource_model_ids: props.relatable_resource_model_ids || [],\n      resource_2_resource_constraints: props.resource_2_resource_constraints || null,\n      root: root,\n      slug: props.slug || null,\n      subtitle: props.subtitle ? (\n        props.subtitle instanceof StaticTranslatableString ?\n        props.subtitle : new StaticTranslatableString(props.subtitle)\n      ) : new StaticTranslatableString(''),\n      template_id: props.template_id || '',\n      version: props.version || ''\n    });\n  }\n}\n\n/// Resources\n//\ntype StaticProvisionalEdit = any;\n\nclass StaticValue {\n  id: string;\n  value: string;\n  __concept?: StaticConcept | null;\n  __conceptId?: string | null;\n\n  constructor(jsonData: StaticValue, concept: StaticConcept | string | null = null) {\n    this.id = jsonData.id;\n    this.value = jsonData.value;\n    if (concept instanceof StaticConcept) {\n      this.__concept = concept;\n      this.__conceptId = concept ? concept.id : null;\n    } else {\n      this.__concept = null;\n      this.__conceptId = concept;\n    }\n  }\n\n  toString() {\n    return this.value;\n  }\n\n  static create(referent: string | StaticConcept, valueType: string, value: string, language?: string) {\n    const lang = language || getCurrentLanguage();\n    const referentId = referent instanceof StaticConcept ? referent.id : referent;\n    // NB: this means passing an ID of a concept, and a concept, have different ID-creating behaviour.\n    const concept = referent instanceof StaticConcept ? referent : null;\n    const id = generateUuidv5(\n      ['value'],\n      `${referentId}/${valueType}/${value}/${lang}`\n    );\n    return new StaticValue(\n      {\n        id: id,\n        value: value\n      },\n      concept\n    );\n  }\n}\n\nclass StaticConcept {\n  id: string;\n  prefLabels: { [lang: string]: StaticValue };\n  source: string | null;\n  sortOrder: number | null;\n  children: StaticConcept[] | null;\n\n  constructor(jsonData: StaticConcept) {\n    this.id = jsonData.id;\n    this.prefLabels = jsonData.prefLabels;\n    for (const [lang, value] of Object.entries(this.prefLabels)) {\n      if (!(value instanceof StaticValue)) {\n        this.prefLabels[lang] = new StaticValue(value, this);\n      }\n    }\n    this.source = jsonData.source;\n    this.sortOrder = jsonData.sortOrder;\n    this.children = jsonData.children;\n    if (this.children) {\n      this.children = this.children.map((child) => {\n        return child instanceof StaticConcept\n          ? child\n          : new StaticConcept(child);\n      });\n    }\n  }\n\n  getPrefLabel?(): StaticValue {\n    return (\n      this.prefLabels[getCurrentLanguage()] || Object.values(this.prefLabels)[0]\n    );\n  }\n\n  toString() {\n    if (!this.getPrefLabel) {\n      return this.constructor(this).getPrefLabel().value;\n    }\n    return this.getPrefLabel().value;\n  }\n\n  // NB: copies value, does not make it a child\n  static fromValue(conceptScheme: StaticConcept | null, value: string | StaticValue | { [lang: string]: StaticValue }, children?: (string | StaticValue | StaticConcept)[], config: {baseLanguage?: string, source?: string | null, sortOrder?: number | null} = {}): StaticConcept {\n    // TODO make sure that children are in the same concept scheme so that deterministic IDs are preserved.\n    let lang = config?.baseLanguage || getCurrentLanguage();\n    let tmpValue;\n    let prefLabels: { [lang: string]: StaticValue };\n    if (typeof value === 'string') {\n      tmpValue = value;\n      prefLabels = {[lang]: new StaticValue({id: '', value: tmpValue})};\n    } else if (value instanceof StaticValue) {\n      tmpValue = value.value;\n      prefLabels = {[lang]: value};\n    } else if (lang in value) {\n      tmpValue = value[lang].value;\n      prefLabels = value;\n    } else {\n      const firstValue = Object.entries(value).sort()[0];\n      if (firstValue === undefined) {\n        throw Error(\"Cannot create a concept from values without a non-empty value\");\n      }\n      lang = firstValue[0];\n      tmpValue = firstValue[1].value;\n      prefLabels = value;\n    }\n    const conceptId = generateUuidv5(\n      ['concept'],\n      `${conceptScheme?.id || '(none)'}/${tmpValue}`\n    );\n    const childConcepts = (children || []).map(child => {\n      if (!(child instanceof StaticConcept)) {\n        return StaticConcept.fromValue(conceptScheme, value, [], {baseLanguage: config.baseLanguage});\n      }\n      return child;\n    });\n    return new StaticConcept({\n      id: conceptId,\n      prefLabels,\n      source: config.source || null,\n      sortOrder: config.sortOrder || null,\n      children: childConcepts\n    });\n  }\n}\n\n// A prefLabel, for example, can only exist once per language.\nclass StaticCollection {\n  id: string;\n  prefLabels: { [lang: string]: StaticValue };\n  concepts: { [conceptId: string]: StaticConcept };\n  __allConcepts: { [conceptId: string]: StaticConcept };\n  __values: { [valueId: string]: StaticValue };\n\n  static fromConceptScheme(props: {\n    collectionid?: string,\n    name?: string | { [lang: string]: StaticValue } | StaticValue;\n    conceptScheme: StaticConcept\n  }): StaticCollection {\n    const collectionName = props.name ?? props.conceptScheme.toString();\n    return StaticCollection.create({\n      name: collectionName,\n      concepts: props.conceptScheme.children || []\n    })\n  }\n\n  static create(props: {\n    collectionid?: string,\n    name: string | { [lang: string]: StaticValue } | StaticValue;\n    concepts: StaticConcept[] | { [conceptId: string]: StaticConcept }\n  }): StaticCollection {\n    let concepts = props.concepts;\n    if (Array.isArray(concepts)) {\n      concepts = concepts.reduce(\n        (acc: { [conceptId: string]: StaticConcept }, c: StaticConcept) => {\n          acc[c.id] = c;\n          return acc;\n        },\n      {});\n    }\n    const name: StaticValue | { [lang: string]: StaticValue } = (\n      typeof props.name === 'string' ?\n        StaticValue.create('', 'prefLabel', props.name) :\n        props.name\n      );\n    let collectionid = props.collectionid;\n    if (!collectionid) {\n      if (typeof name === 'string') {\n        collectionid = generateUuidv5(\n          ['collection'],\n          name\n        );\n      } else if (name instanceof StaticValue) {\n        collectionid = generateUuidv5(\n          ['collection'],\n          name.value\n        );\n      } else {\n        throw Error(\"Must have a unique name to create a collection ID\");\n      }\n    }\n    const prefLabels: { [lang: string]: StaticValue } = name instanceof StaticValue ? {\n      [getCurrentLanguage()]: name\n    } : name;\n    return new StaticCollection({\n      id: collectionid,\n      prefLabels: prefLabels,\n      concepts: concepts,\n      __allConcepts: {},\n      __values: {}\n    });\n  }\n\n  constructor(jsonData: StaticCollection) {\n    this.id = jsonData.id;\n    this.prefLabels = jsonData.prefLabels;\n    this.concepts = jsonData.concepts;\n    this.__allConcepts = {};\n    this.__values = {};\n    const addValues = (concept: StaticConcept) => {\n      this.__allConcepts[concept.id] = concept;\n      for (const [, value] of Object.entries(concept.prefLabels)) {\n        this.__values[value.id] = value;\n      }\n      if (concept.children) {\n        for (let child of concept.children) {\n          if (!(child instanceof StaticConcept)) {\n            child = new StaticConcept(child);\n          }\n          addValues(child);\n        }\n      }\n    };\n    for (const [id, concept] of Object.entries(this.concepts)) {\n      if (!(concept instanceof StaticConcept)) {\n        this.concepts[id] = new StaticConcept(concept);\n      }\n      addValues(this.concepts[id]);\n    }\n  }\n\n  getConceptValue?(valueId: string) {\n    return this.__values[valueId];\n  }\n\n  getConceptByValue?(label: string) {\n    return Object.values(this.__values).find(value => value.value == label)?.__concept;\n  }\n\n  toString(): string {\n    return (this.prefLabels[getCurrentLanguage()] || Object.values(this.prefLabels)[0] || '').toString();\n  }\n}\n\nclass StaticTile {\n  data: Map<\n    string,\n    object | Map<string, any> | Array<any> | null | number | boolean | string\n  >;\n  nodegroup_id: string;\n  resourceinstance_id: string;\n  tileid: string | null;\n  parenttile_id: string | null = null;\n  provisionaledits: null | Array<StaticProvisionalEdit> = null;\n  sortorder: number | null = null;\n\n  constructor(jsonData: StaticTile) {\n    this.data = jsonData.data;\n    if (typeof this.data === 'object' && !(this.data instanceof Map)) {\n      this.data = new Map(Object.entries(this.data));\n    }\n    this.nodegroup_id = jsonData.nodegroup_id;\n    this.resourceinstance_id = jsonData.resourceinstance_id;\n    this.tileid = jsonData.tileid;\n    this.parenttile_id = jsonData.parenttile_id;\n    this.provisionaledits = jsonData.provisionaledits;\n    this.sortorder = jsonData.sortorder;\n  }\n\n  ensureId(): string {\n    if (!this.tileid) {\n      this.tileid = crypto.randomUUID();\n    }\n    return this.tileid;\n  }\n}\n\nclass StaticResourceDescriptors {\n  [key: string]: (string | undefined | (() => boolean));\n  name?: string;\n  map_popup?: string;\n  description?: string;\n\n  constructor(jsonData?: StaticResourceDescriptors) {\n    if (jsonData) {\n      this.name = jsonData.name;\n      this.map_popup = jsonData.map_popup;\n      this.description = jsonData.description;\n    }\n  }\n\n  isEmpty(): boolean {\n    return !(this.name || this.map_popup || this.description);\n  }\n}\n\nclass StaticResourceMetadata {\n  descriptors: StaticResourceDescriptors;\n  graph_id: string;\n  name: string;\n  resourceinstanceid: string;\n  publication_id: string | null = null;\n  principaluser_id: number | null = null;\n  legacyid: null | string = null;\n  graph_publication_id: string | null = null;\n\n  constructor(jsonData: StaticResourceMetadata) {\n    this.descriptors = jsonData.descriptors;\n    if (!(this.descriptors instanceof StaticResourceDescriptors)) {\n      if (jsonData.descriptors instanceof Map) {\n        this.descriptors = new StaticResourceDescriptors(Object.fromEntries(jsonData.descriptors.entries()));\n      } else {\n        this.descriptors = new StaticResourceDescriptors(this.descriptors);\n      }\n    }\n    this.graph_id = jsonData.graph_id;\n    this.name = jsonData.name;\n    this.resourceinstanceid = jsonData.resourceinstanceid;\n    this.publication_id = jsonData.publication_id;\n    this.principaluser_id = jsonData.principaluser_id;\n    this.legacyid = jsonData.legacyid;\n    this.graph_publication_id = jsonData.graph_publication_id;\n  }\n}\n\nclass StaticDomainValue {\n  id: string\n  selected: boolean\n  text: {[lang: string]: string}\n\n  constructor(jsonData: StaticDomainValue) {\n    this.id = jsonData.id;\n    this.selected = jsonData.selected;\n    this.text = jsonData.text;\n  }\n\n  toString() {\n    const lang = getCurrentLanguage();\n    let localized = this.text[lang];\n    if (typeof localized !== \"string\") {\n      localized = Object.values(this.text)[0];\n    }\n    if (!localized) {\n      throw Error(`Could not render domain value ${this.id} in language ${lang}`);\n    }\n    return localized;\n  }\n\n  lang(lang: string): string | undefined {\n    return this.text[lang];\n  }\n\n  async forJson() {\n    return {\n      id: this.id,\n      selected: this.selected,\n      text: this.text\n    }\n  }\n}\n\nclass StaticResourceReference {\n  id: string;\n  type: string | undefined;\n  graphId: string;\n  title: string | undefined;\n  root: any | undefined;\n  meta?: {[key: string]: any};\n\n  constructor(jsonData: StaticResourceReference) {\n    this.id = jsonData.id;\n    this.type = jsonData.type;\n    this.graphId = jsonData.graphId;\n    this.root = jsonData.root;\n    this.title = jsonData.title;\n    if (jsonData.meta) {\n      this.meta = jsonData.meta;\n    }\n  }\n}\n\nclass StaticResource {\n  resourceinstance: StaticResourceMetadata;\n  tiles: Array<StaticTile> | null = null;\n  metadata: {[key: string]: string};\n  __cache: {[tileId: string]: {[nodeId: string]: {[key: string]: string}}} | undefined = undefined;\n  __source: string | undefined = undefined;\n  __scopes: string[] | undefined = undefined;\n\n  constructor(jsonData: StaticResource) {\n    this.resourceinstance = new StaticResourceMetadata(\n      jsonData.resourceinstance,\n    );\n    this.tiles =\n      jsonData.tiles && jsonData.tiles.map((tile) => new StaticTile(tile));\n    this.metadata = jsonData.metadata || {};\n    this.__cache = jsonData.__cache;\n    this.__scopes = jsonData.__scopes;\n  }\n}\n\nexport {\n  StaticValue,\n  StaticTile,\n  StaticGraph,\n  StaticResource,\n  StaticResourceMetadata,\n  StaticNode,\n  StaticNodegroup,\n  StaticEdge,\n  StaticCard,\n  StaticCardsXNodesXWidgets,\n  StaticCollection,\n  StaticConcept,\n  StaticDomainValue,\n  StaticResourceReference,\n  StaticGraphMeta,\n  StaticFunctionsXGraphs,\n  StaticResourceDescriptors,\n  StaticTranslatableString,\n  StaticConstraint,\n  type IStaticDescriptorConfig\n};\n","import { StaticGraphMeta, StaticGraph, StaticResource } from \"./static-types\";\nimport { StaticCollection } from \"./rdm\";\n\nclass GraphResult {\n  models: {[graphId: string]: StaticGraphMeta};\n\n  constructor(jsonData: GraphResult) {\n    this.models = Object.fromEntries(\n      Object.entries(jsonData.models).map(([k, v]) => [k, new StaticGraphMeta(v)])\n    );\n  }\n}\n\nabstract class ArchesClient {\n  abstract getGraphs(): Promise<GraphResult>;\n\n  abstract getGraph(graph: StaticGraphMeta): Promise<StaticGraph | null>;\n\n  abstract getGraphByIdOnly(graphId: string): Promise<StaticGraph | null>;\n\n  abstract getResources(\n    graphId: string,\n    limit: number,\n  ): Promise<StaticResource[]>;\n\n  abstract getResource(resourceId: string): Promise<StaticResource>;\n\n  abstract getCollection(collectionId: string): Promise<StaticCollection>;\n}\n\nclass ArchesClientRemote extends ArchesClient {\n  archesUrl: string;\n\n  constructor(archesUrl: string) {\n    super();\n    this.archesUrl = archesUrl;\n  }\n\n  async getGraphs(): Promise<GraphResult> {\n    const response = await fetch(\n      `${this.archesUrl}/api/arches/graphs?format=arches-json&hide_empty_nodes=false&compact=false`,\n    );\n    return await response.json();\n  }\n\n  async getGraph(graph: StaticGraphMeta): Promise<StaticGraph> {\n    return this.getGraphByIdOnly(graph.graphid);\n  }\n\n  async getGraphByIdOnly(graphId: string): Promise<StaticGraph> {\n    const response = await fetch(\n      `${this.archesUrl}/graphs/${graphId}?format=arches-json&gen=`,\n    );\n    return await response.json();\n  }\n\n  async getResource(resourceId: string): Promise<StaticResource> {\n    throw Error(`Not implemented yet: getResource(${resourceId}`);\n  }\n\n  async getCollection(collectionId: string): Promise<StaticCollection> {\n    throw Error(`Not implemented yet: getCollection(${collectionId}`);\n  }\n\n  async getResources(\n    graphId: string,\n    limit: number,\n  ): Promise<StaticResource[]> {\n    const response = await fetch(\n      `${this.archesUrl}/resources?graph_uuid=${graphId}&format=arches-json&hide_empty_nodes=false&compact=false&limit=${limit}`,\n    );\n    return await response.json();\n  }\n}\n\nclass ArchesClientRemoteStatic extends ArchesClient {\n  archesUrl: string;\n  allGraphFile: () => string;\n  graphToGraphFile?: (graph: StaticGraphMeta) => string;\n  graphIdToGraphFile: (graphId: string) => string;\n  graphIdToResourcesFiles: (graphId: string) => string[];\n  resourceIdToFile: (resourceId: string) => string;\n  collectionIdToFile: (collectionId: string) => string;\n\n  constructor(\n    archesUrl: string,\n    {\n      allGraphFile,\n      graphToGraphFile,\n      graphIdToResourcesFiles,\n      resourceIdToFile,\n      collectionIdToFile,\n      graphIdToGraphFile,\n    }: {\n      allGraphFile?: () => string,\n      graphToGraphFile?: (graph: StaticGraphMeta) => string,\n      graphIdToGraphFile?: (graphId: string) => string;\n      graphIdToResourcesFiles?: (graphId: string) => string[];\n      resourceIdToFile?: (resourceId: string) => string;\n      collectionIdToFile?: (collectionId: string) => string;\n    } = {},\n  ) {\n    super();\n    this.archesUrl = archesUrl;\n    this.allGraphFile = allGraphFile || (() => \"resource_models/_all.json\");\n    this.graphToGraphFile = graphToGraphFile;\n    this.graphIdToGraphFile =\n      graphIdToGraphFile ||\n      ((graphId: string) => `resource_models/${graphId}.json`);\n    this.graphIdToResourcesFiles =\n      graphIdToResourcesFiles ||\n      ((graphId: string) => [`business_data/_${graphId}.json`]);\n    this.resourceIdToFile =\n      resourceIdToFile ||\n      ((resourceId: string) => `business_data/${resourceId}.json`);\n    this.collectionIdToFile =\n      collectionIdToFile ||\n      ((collectionId: string) => `collections/${collectionId}.json`);\n  }\n\n  async getGraphs(): Promise<GraphResult> {\n    const response = await fetch(`${this.archesUrl}/${this.allGraphFile()}`);\n    return await response.json();\n  }\n\n  async getGraph(graph: StaticGraphMeta): Promise<StaticGraph | null> {\n    if (!this.graphToGraphFile) {\n      return this.getGraphByIdOnly(graph.graphid);\n    }\n    const response = await fetch(\n      `${this.archesUrl}/${this.graphToGraphFile(graph)}`,\n    );\n    return (await response.json()).graph[0];\n  }\n\n  async getGraphByIdOnly(graphId: string): Promise<StaticGraph | null> {\n    const response = await fetch(\n      `${this.archesUrl}/${this.graphIdToGraphFile(graphId)}`,\n    );\n    return (await response.json()).graph[0];\n  }\n\n  async getResource(resourceId: string): Promise<StaticResource> {\n    const source = `${this.archesUrl}/${this.resourceIdToFile(resourceId)}`;\n    const response = await fetch(source);\n    return response.json().then((response: StaticResource) => {\n      response.__source = source;\n      return response;\n    });\n  }\n\n  async getCollection(collectionId: string): Promise<StaticCollection> {\n    const response = await fetch(\n      `${this.archesUrl}/${this.collectionIdToFile(collectionId)}`,\n    );\n    return await response.json();\n  }\n\n  async getResources(\n    graphId: string,\n    limit: number,\n  ): Promise<StaticResource[]> {\n    const resources = [];\n    for (const file of this.graphIdToResourcesFiles(graphId)) {\n      const source = `${this.archesUrl}/${file}`;\n      const response = await fetch(source);\n      const resourceSet: StaticResource[] = (await response.json()).business_data.resources;\n      for (const resource of resourceSet) {\n        resource.__source = source;\n      }\n      resources.push(...(limit ? resourceSet.slice(0, limit) : resourceSet));\n      if (limit && resources.length > limit) {\n        break;\n      }\n    }\n    return resources;\n  }\n}\n\nclass ArchesClientLocal extends ArchesClient {\n  fs: any;\n  allGraphFile: () => string;\n  graphToGraphFile?: (graph: StaticGraphMeta) => string;\n  graphIdToGraphFile: (graphId: string) => string;\n  graphIdToResourcesFiles: (graphId: string) => string[];\n  resourceIdToFile: (resourceId: string) => string;\n  collectionIdToFile: (collectionId: string) => string;\n\n  constructor({\n      allGraphFile,\n      graphToGraphFile,\n      graphIdToResourcesFiles,\n      resourceIdToFile,\n      collectionIdToFile,\n      graphIdToGraphFile,\n    }: {\n      allGraphFile?: () => string,\n      graphToGraphFile?: (graph: StaticGraphMeta) => string,\n      graphIdToGraphFile?: (graphId: string) => string;\n      graphIdToResourcesFiles?: (graphId: string) => string[];\n      resourceIdToFile?: (resourceId: string) => string;\n      collectionIdToFile?: (collectionId: string) => string;\n    } = {}) {\n    super();\n    this.fs = import(\"fs\");\n    this.allGraphFile = allGraphFile || (() => \"tests/definitions/models/_all.json\");\n    this.graphToGraphFile =\n      graphToGraphFile ||\n      ((graph: StaticGraphMeta) => `tests/definitions/models/${graph.graphid}.json`);\n    this.graphIdToGraphFile =\n      graphIdToGraphFile ||\n      ((graphId: string) => `tests/definitions/models/${graphId}.json`);\n    this.graphIdToResourcesFiles =\n      graphIdToResourcesFiles ||\n      ((graphId: string) => [`tests/definitions/resources/_${graphId}.json`]);\n    this.resourceIdToFile =\n      resourceIdToFile ||\n      ((resourceId: string) => `tests/definitions/resources/${resourceId}.json`);\n    this.collectionIdToFile =\n      collectionIdToFile ||\n      ((collectionId: string) => `tests/definitions/collections/${collectionId}.json`);\n  }\n\n  async getGraphs(): Promise<GraphResult> {\n    const fs = await this.fs;\n    const response = await fs.promises.readFile(this.allGraphFile(), \"utf8\");\n    return new GraphResult(await JSON.parse(response));\n  }\n\n  async getGraph(graph: StaticGraphMeta): Promise<StaticGraph | null> {\n    const fs = await this.fs;\n    const graphFile = this.graphToGraphFile ? this.graphToGraphFile(graph) : this.graphIdToGraphFile(graph.graphid);\n    if (!graphFile) {\n      return null;\n    }\n    const response = await fs.promises.readFile(\n      graphFile,\n      \"utf8\",\n    );\n    return await JSON.parse(response).graph[0];\n  }\n\n  async getGraphByIdOnly(graphId: string): Promise<StaticGraph | null> {\n    const fs = await this.fs;\n    const graphFile = this.graphIdToGraphFile(graphId);\n    if (!graphFile) {\n      return null;\n    }\n    const response = await fs.promises.readFile(\n      graphFile,\n      \"utf8\",\n    );\n    return await JSON.parse(response).graph[0];\n  }\n\n  async getResource(resourceId: string): Promise<StaticResource> {\n    const fs = await this.fs;\n    const source = this.resourceIdToFile(resourceId);\n    const response = await fs.promises.readFile(\n      source,\n      \"utf8\",\n    );\n    return JSON.parse(response).then((resource: StaticResource) => {\n      resource.__source = source;\n      return resource;\n    });\n  }\n\n  async getCollection(collectionId: string): Promise<StaticCollection> {\n    const fs = await this.fs;\n    const response = await fs.promises.readFile(\n      this.collectionIdToFile(collectionId),\n      \"utf8\",\n    );\n    return await JSON.parse(response);\n  }\n\n  async getResources(\n    graphId: string,\n    limit: number | null,\n  ): Promise<StaticResource[]> {\n    const fs = await this.fs;\n    const resources = [];\n    for (const file of this.graphIdToResourcesFiles(graphId)) {\n      const response = JSON.parse(await fs.promises.readFile(file, \"utf8\"));\n      const source = file;\n      // const read = fs.createReadStream(file, { encoding: \"utf8\" });\n      // let buffer = '';\n      // let bufferLength = 0;\n      // const response: IStringKeyedObject = await (new Promise(resolve => {\n      //   read.pipe(bfj.unpipe((error: string, data: string) => {\n      //     if (error) {\n      //       throw Error(error);\n      //     }\n      //     return data;\n      //   })).on('data', (data: string) => {\n      //     const bl = Math.floor(buffer.length / 1000);\n      //     bufferLength = bl;\n      //     buffer += data;\n      //   }).on('end', () => {\n      //     resolve(JSON.parse(buffer));\n      //   });\n      // }));\n\n      const resourceSet: StaticResource[] = response.business_data.resources.filter(\n        (resource: StaticResource) => graphId === resource.resourceinstance.graph_id\n      );\n      for (const resource of resourceSet) {\n        resource.__source = source;\n      }\n      resources.push(...(limit ? resourceSet.slice(0, limit) : resourceSet));\n      if (limit && resources.length > limit) {\n        break;\n      }\n    }\n    return resources;\n  }\n}\n\nconst archesClient = new ArchesClientRemote(\"http://localhost:8000\");\n\nexport {\n  archesClient,\n  ArchesClient,\n  ArchesClientRemoteStatic,\n  ArchesClientRemote,\n  ArchesClientLocal,\n  GraphResult,\n};\n","import { StaticCollection } from \"./static-types\";\nimport { ArchesClient, archesClient } from \"./client\";\n\nclass ReferenceDataManager {\n  archesClient: ArchesClient;\n  collections: Map<string, Promise<StaticCollection>>;\n\n  constructor(archesClient: ArchesClient) {\n    this.archesClient = archesClient;\n    this.collections = new Map<string, Promise<StaticCollection>>();\n  }\n\n  retrieveCollection(id: string): Promise<StaticCollection> {\n    let collection = this.collections.get(id);\n    if (collection !== undefined) {\n      return collection;\n    }\n    collection = this.archesClient\n      .getCollection(id)\n      .then((jsonData) => new StaticCollection(jsonData));\n    this.collections.set(id, collection);\n    return collection;\n  }\n}\n\nconst RDM = new ReferenceDataManager(archesClient);\n\nexport { StaticCollection, ReferenceDataManager, RDM };\n","import { archesClient, ArchesClient } from \"./client.ts\";\nimport {\n  StaticResource,\n  StaticResourceMetadata,\n} from \"./static-types\";\n\n// TODO: this does not currently cache, to avoid\n//  memory leaks.\nclass StaticStore {\n  archesClient: ArchesClient;\n  cache: Map<string, StaticResource | StaticResourceMetadata>;\n  cacheMetadataOnly: boolean;\n\n  constructor(archesClient: ArchesClient, cacheMetadataOnly: boolean = true) {\n    this.archesClient = archesClient;\n    this.cache = new Map();\n    this.cacheMetadataOnly = cacheMetadataOnly;\n  }\n\n  async getMeta(id: string, onlyIfCached: boolean = true): Promise<StaticResourceMetadata | null> {\n    if (this.cache.has(id)) {\n      const resource = this.cache.get(id);\n      if (resource instanceof StaticResource) {\n        return resource.resourceinstance;\n      }\n      return resource || null;\n    }\n\n    if (!onlyIfCached) {\n      const resource = await this.loadOne(id);\n      return resource.resourceinstance;\n    }\n    return null;\n  }\n\n  async* loadAll(\n    graphId: string,\n    limit: number | undefined = undefined,\n  ): AsyncIterable<StaticResource> {\n    const resourcesJSON: StaticResource[] =\n      await this.archesClient.getResources(graphId, limit || 0);\n    for (const resourceJSON of resourcesJSON.values()) {\n      const resource = new StaticResource(resourceJSON);\n      if (resource.resourceinstance.graph_id !== graphId) {\n        continue;\n      }\n      this.cache.set(\n        resource.resourceinstance.resourceinstanceid,\n        this.cacheMetadataOnly ? resource.resourceinstance : resource\n      );\n      yield resource;\n    }\n  }\n\n  async loadOne(id: string): Promise<StaticResource> {\n    if (this.cache.has(id)) {\n      const resource = this.cache.get(id);\n      if (resource instanceof StaticResource) {\n        return resource;\n      }\n    }\n\n    const resourceJSON: StaticResource =\n      await this.archesClient.getResource(id);\n    const resource = new StaticResource(resourceJSON);\n    if (this.cacheMetadataOnly) {\n      this.cache.set(id, this.cacheMetadataOnly ? resource.resourceinstance : resource);\n    }\n    return resource;\n  }\n}\n\nconst staticStore = new StaticStore(archesClient);\n\nexport { staticStore };\n","// The Widgets here are AGPLv3 from Arches DB setup.\n//\nimport {\n  StaticNode\n} from \"./static-types\";\n\nclass CardComponent {\n  id: string;\n  name: string;\n\n  constructor(id: string, name: string) {\n    this.id = id;\n    this.name = name;\n  }\n};\n\nclass Widget {\n  id: string;\n  name: string;\n  datatype: string;\n  defaultConfig: string; // as JSON - always need a fresh copy\n\n  constructor(id: string, name: string, datatype: string, defaultConfig: string) {\n    this.id = id;\n    this.name = name;\n    this.datatype = datatype;\n    this.defaultConfig = defaultConfig;\n  }\n\n  getDefaultConfig(): {[key: string]: any} {\n    return JSON.parse(this.defaultConfig);\n  }\n};\nconst DEFAULT_CARD_COMPONENT = new CardComponent(\n  'f05e4d3a-53c1-11e8-b0ea-784f435179ea',\n  'Default Card'\n);\nconst _WIDGET_VALUES: [string, string, string, string][] = [\n    ['10000000-0000-0000-0000-000000000001', 'text-widget', 'string', '{ \"placeholder\": \"Enter text\", \"width\": \"100%\", \"maxLength\": null}'],\n    ['10000000-0000-0000-0000-000000000002', 'concept-select-widget', 'concept', '{ \"placeholder\": \"Select an option\", \"options\": [] }'],\n    ['10000000-0000-0000-0000-000000000012', 'concept-multiselect-widget', 'concept-list', '{ \"placeholder\": \"Select an option\", \"options\": [] }'],\n    ['10000000-0000-0000-0000-000000000015', 'domain-select-widget', 'domain-value', '{ \"placeholder\": \"Select an option\" }'],\n    ['10000000-0000-0000-0000-000000000016', 'domain-multiselect-widget', 'domain-value-list', '{ \"placeholder\": \"Select an option\" }'],\n    ['10000000-0000-0000-0000-000000000003', 'switch-widget', 'boolean', '{ \"subtitle\": \"Click to switch\"}'],\n    ['10000000-0000-0000-0000-000000000004', 'datepicker-widget', 'date', `{\n      \"placeholder\": \"Enter date\",\n      \"viewMode\": \"days\",\n      \"dateFormat\": \"YYYY-MM-DD\",\n      \"minDate\": false,\n      \"maxDate\": false\n    }`],\n    ['10000000-0000-0000-0000-000000000005', 'rich-text-widget', 'string', '{}'],\n    ['10000000-0000-0000-0000-000000000006', 'radio-boolean-widget', 'boolean', '{\"trueLabel\": \"Yes\", \"falseLabel\": \"No\"}'],\n    ['10000000-0000-0000-0000-000000000007', 'map-widget', 'geojson-feature-collection', `{\n      \"basemap\": \"streets\",\n      \"geometryTypes\": [{\"text\":\"Point\", \"id\":\"Point\"}, {\"text\":\"Line\", \"id\":\"Line\"}, {\"text\":\"Polygon\", \"id\":\"Polygon\"}],\n      \"overlayConfigs\": [],\n      \"overlayOpacity\": 0.0,\n      \"geocodeProvider\": \"MapzenGeocoder\",\n      \"zoom\": 0,\n      \"maxZoom\": 20,\n      \"minZoom\": 0,\n      \"centerX\": 0,\n      \"centerY\": 0,\n      \"pitch\": 0.0,\n      \"bearing\": 0.0,\n      \"geocodePlaceholder\": \"Search\",\n      \"geocoderVisible\": true,\n      \"featureColor\": null,\n      \"featureLineWidth\": null,\n      \"featurePointSize\": null\n    }`],\n    ['10000000-0000-0000-0000-000000000008', 'number-widget', 'number', '{ \"placeholder\": \"Enter number\", \"width\": \"100%\", \"min\":\"\", \"max\":\"\"}'],\n    ['10000000-0000-0000-0000-000000000009', 'concept-radio-widget', 'concept', '{ \"options\": [] }'],\n    ['10000000-0000-0000-0000-000000000013', 'concept-checkbox-widget', 'concept-list', '{ \"options\": [] }'],\n    ['10000000-0000-0000-0000-000000000017', 'domain-radio-widget', 'domain-value', '{}'],\n    ['10000000-0000-0000-0000-000000000018', 'domain-checkbox-widget', 'domain-value-list', '{}'],\n    ['10000000-0000-0000-0000-000000000019', 'file-widget', 'file-list', '{\"acceptedFiles\": \"\", \"maxFilesize\": \"200\"}'],\n];\nconst WIDGETS: {[key: string]: Widget} = Object.fromEntries(_WIDGET_VALUES.map((constructor: [string, string, string, string]): [string, Widget] => [constructor[1], new Widget(...constructor)]));\n\nfunction getDefaultWidgetForNode(node: StaticNode, preferences: {[key: string]: string} = {}) {\n  const datatype = node.datatype;\n\n  // For example, you can use this to prefer a rich-text field.\n  if (datatype in preferences) {\n    return WIDGETS[preferences[datatype]];\n  }\n\n  if (datatype === 'semantic') {\n    throw Error(\"Not default widget for a semantic node\");\n  } else if (datatype === 'number') {\n    return WIDGETS['number-widget'];\n  } else if (datatype === 'string') {\n    return WIDGETS['text-widget'];\n  } else if (datatype === 'concept') {\n    return WIDGETS['concept-select-widget'];\n  } else if (datatype === 'concept-list') {\n    return WIDGETS['concept-multiselect-widget'];\n  } else if (datatype === 'domain-value') {\n    return WIDGETS['domain-select-widget'];\n  } else if (datatype === 'domain-value-list') {\n    return WIDGETS['domain-multiselect-widget'];\n  } else if (datatype === 'geojson-feature-collection') {\n    return WIDGETS['geojson-feature-collection'];\n  } else if (datatype === 'boolean') {\n    return WIDGETS['switch-widget'];\n  } else if (datatype === 'date') {\n    return WIDGETS['datepicker-widget'];\n  } else {\n    throw Error(`No default widget for ${datatype} datatype - perhaps you could supply a manual preference`);\n  }\n}\n\nexport { DEFAULT_CARD_COMPONENT, CardComponent, getDefaultWidgetForNode, Widget };\n","import { INodeConfig } from './interfaces';\nimport { StaticNode, StaticDomainValue } from './static-types';\n\ninterface IStaticNodeConfigDomain {\n  i18n_config: {[key: string]: string}\n  options: StaticDomainValue[];\n};\n\ninterface IStaticNodeConfigBoolean {\n  i18n_properties: string[]\n  falseLabel: {[key: string]: string}\n  trueLabel: {[key: string]: string}\n};\n\ninterface IStaticNodeConfigConcept {\n  rdmCollection: string\n};\n\nclass StaticNodeConfigBoolean implements IStaticNodeConfigBoolean, INodeConfig {\n  i18n_properties: string[]\n  falseLabel: {[key: string]: string}\n  trueLabel: {[key: string]: string}\n\n  constructor(jsonData: IStaticNodeConfigBoolean) {\n    this.i18n_properties = jsonData.i18n_properties;\n    this.falseLabel = jsonData.falseLabel;\n    this.trueLabel = jsonData.trueLabel;\n  }\n}\n\nclass StaticNodeConfigConcept implements IStaticNodeConfigConcept, INodeConfig {\n  rdmCollection: string;\n\n  constructor(jsonData: IStaticNodeConfigConcept) {\n    this.rdmCollection = jsonData.rdmCollection;\n  }\n}\n\nclass StaticNodeConfigDomain implements IStaticNodeConfigDomain, INodeConfig {\n  i18n_config: {[key: string]: string}\n  options: StaticDomainValue[];\n\n  getSelected() {\n    return this.options.find(option => option.selected);\n  }\n\n  valueFromId(id: string) {\n    return this.options.find(option => option.id == id);\n  }\n\n  constructor(jsonData: IStaticNodeConfigDomain) {\n    this.i18n_config = jsonData.i18n_config;\n    this.options = jsonData.options;\n    if (this.options) {\n      this.options = this.options.map(sdv => {\n        if (!(sdv instanceof StaticDomainValue)) {\n          return new StaticDomainValue(sdv);\n        }\n        return sdv;\n      });\n    }\n  }\n}\n\nclass NodeConfigManager {\n  static _cache: Map<string, INodeConfig | null>\n  cache: Map<string, INodeConfig | null>\n\n  constructor(cache: Map<string, INodeConfig | null> | undefined = undefined) {\n    if (!cache) {\n      cache = NodeConfigManager._cache || new Map();\n    }\n    this.cache = cache;\n  }\n\n  retrieve(node: StaticNode) {\n    if (this.cache.has(node.nodeid)) {\n      return this.cache.get(node.nodeid);\n    }\n    let nodeConfig = null;\n    switch (node.datatype) {\n      case \"boolean\":\n        // @ts-expect-error node.config is not typed\n        nodeConfig = new StaticNodeConfigBoolean(node.config);\n        break;\n      case \"domain-value-list\":\n      case \"domain-value\":\n        // @ts-expect-error node.config is not typed\n        nodeConfig = new StaticNodeConfigDomain(node.config);\n        break;\n      default:\n    };\n    this.cache.set(node.nodeid, nodeConfig);\n    return nodeConfig;\n  }\n};\n\nconst nodeConfigManager = new NodeConfigManager();\n\nexport { nodeConfigManager, StaticNodeConfigDomain, StaticNodeConfigBoolean, StaticNodeConfigConcept };\n","import {\n  IStringKeyedObject,\n  IInstanceWrapper,\n  IModelWrapper,\n  IViewModel,\n  IPseudo,\n  IGraphManager,\n  IRIVM,\n  GetMeta,\n} from \"./interfaces.ts\";\nimport { PseudoValue, PseudoList } from \"./pseudos\";\nimport { RDM } from \"./rdm\";\nimport {\n  StaticNodeConfigDomain,\n  StaticNodeConfigBoolean,\n} from './nodeConfig';\nimport {\n  StaticDomainValue,\n  StaticTile,\n  StaticNode,\n  StaticValue,\n  StaticConcept,\n  StaticResource,\n  StaticResourceReference\n} from \"./static-types\";\nimport { AttrPromise } from \"./utils\";\nimport { nodeConfigManager } from './nodeConfig';\n\nconst TILE_LOADING_ERRORS = null; // \"suppress\" or \"silence\" TODO: enum\n\nconst DEFAULT_LANGUAGE = \"en\";\n\nclass ViewContext {\n  graphManager: IGraphManager | undefined\n};\nconst viewContext = new ViewContext();\n\nfunction tileLoadingError(reason: string, exc: any) {\n  if (TILE_LOADING_ERRORS !== \"silence\") {\n    console.error(reason, exc);\n    if (TILE_LOADING_ERRORS !== \"suppress\") {\n      throw exc;\n    }\n  }\n}\n\nclass ValueList<T extends IRIVM<T>> {\n  values: Map<string, any>;\n  wrapper: IInstanceWrapper<T>;\n  tiles: StaticTile[] | null;\n  promises: Map<string, boolean | Promise<boolean | IViewModel>>;\n  writeLock: null | Promise<boolean | IViewModel>;\n\n  constructor(\n    values: Map<string, any>,\n    allNodegroups: Map<string, boolean>,\n    wrapper: IInstanceWrapper<T>,\n    tiles: StaticTile[] | null,\n  ) {\n    this.values = values;\n    this.wrapper = wrapper;\n    this.tiles = tiles;\n    this.promises = allNodegroups;\n    this.writeLock = null;\n  }\n\n  async get(key: string) {\n    return this.retrieve(key, this.values.get(key), true);\n  }\n\n  set(key: string, value: any) {\n    this.values.set(key, value);\n  }\n\n  async has(key: string) {\n    await this.retrieve(key, null);\n    return this.values.has(key);\n  }\n\n  async retrieve(key: string, dflt: any = null, raiseError: boolean = false) {\n    let result: any = this.values.get(key);\n    if (Array.isArray(result)) {\n      return result;\n    }\n    const node = this.wrapper.model.getNodeObjectsByAlias().get(key);\n\n    result = await result;\n\n    if (!node) {\n      throw Error(`This key ${key} has no corresponding node`);\n    }\n    const nodegroupId = node.nodegroup_id || '';\n    const promise = node ? await this.promises.get(nodegroupId) : false;\n    // When an unloaded node is found, the whole nodegroup is loaded.\n    // The promises member ensures that no other node in the nodegroup\n    // triggers the same nodegroup load. Note that there is _also_ the\n    // individual node promise, which allows any operation to wait for\n    // just that node to finish and resolve in to the approach pseudo\n    // even if `retrieve` is not used (e.g. allEntries).\n    // _However_, this means that allEntries will not see a promise for\n    // individual nodes in the nodegroup that are _not_ the first\n    // requested, until the first requested resolves and updates the\n    // values map for all nodes in the nodegroup.\n    if (promise === false) {\n      // FIXME: the evidence is that this is not successfully functioning as\n      // a resource-wide lock...\n      await this.writeLock;\n      if (this.wrapper.resource) {\n        // Will KeyError if we do not have it.\n        const node = this.wrapper.model.getNodeObjectsByAlias().get(key);\n        if (node === undefined) {\n          throw Error(\n            \"Tried to retrieve a node key that does not exist on this resource\",\n          );\n        }\n        const values = new Map([...this.values.entries()]);\n        const promise: Promise<IViewModel | boolean> = new Promise((resolve) => {\n           return this.wrapper\n            .ensureNodegroup(\n              values,\n              this.promises,\n              nodegroupId,\n              this.wrapper.model.getNodeObjects(),\n              this.wrapper.model.getNodegroupObjects(),\n              this.wrapper.model.getEdges(),\n              false,\n              this.tiles,\n              true\n            ).then(async ([ngValues]) => {\n              let original = false;\n              const processValue = (k: string, concreteValue: any) => {\n                if (key === k) {\n                  // Other methods may be waiting on this specific\n                  // value to resolve.\n                  original = concreteValue;\n                }\n                // In theory, this should never happen when this.values[k] is\n                // not false, as the resource-wide write lock means that no other nodegroup\n                // can write. This _is_ happening however. In theory, once set, the\n                // value will be a list, so passed by reference, and so should not\n                // undo and changes that happened concurrently.\n                if (concreteValue !== false) {\n                  this.values.set(k, concreteValue);\n                }\n              }\n              return Promise.all([...ngValues.entries()].map(([k, value]) => {\n                if (value instanceof Promise) {\n                  return value.then((concreteValue: any) => processValue(k, concreteValue));\n                }\n                processValue(k, value);\n              })).then(() => {\n                resolve(original);\n              });\n            });\n        });\n        // No writes should happen until this is done\n        this.writeLock = promise;\n        // No reads from this nodegroup should happen [legacy comment]\n        this.promises.set(nodegroupId, promise);\n        // Other readers are welcome to wait for this nodegroup's read\n        this.values.set(key, promise);\n        await promise;\n        this.promises.set(nodegroupId, true);\n      } else {\n        this.values.delete(key);\n      }\n      result = await this.values.get(key);\n    }\n    result = await result;\n    if (result === undefined || result === false) {\n      if (raiseError) {\n        throw Error(`Unset key ${key}`);\n      } else {\n        return dflt;\n      }\n    }\n    return result;\n  }\n\n  async setDefault(key: string, value: any) {\n    const newValue = await this.retrieve(key, value, false);\n    this.values.set(key, newValue);\n    return newValue;\n  }\n}\n\nclass ConceptListCacheEntry implements IStringKeyedObject {\n  [key: string]: any;\n  datatype: string = 'concept-list';\n  _: ConceptValueCacheEntry[];\n  meta: {[key: string]: any};\n\n  constructor({meta, _}: {meta: IStringKeyedObject | undefined, _: ConceptValueCacheEntry[]}) {\n    this._ = _.map(instance => {\n      if (instance instanceof ConceptValueCacheEntry) {\n        return instance;\n      } else if (instance) {\n        return new ConceptValueCacheEntry(instance);\n      }\n      return null;\n    }).filter(cvce => cvce !== null);\n    this.meta = meta || {};\n  }\n}\n\nclass ConceptValueCacheEntry implements IStringKeyedObject {\n  [key: string]: any\n  datatype: string = 'concept';\n  id: string;\n  value: string;\n  conceptId: string | null;\n  meta: {[key: string]: any};\n\n  constructor({meta, id, value, conceptId}: {meta: IStringKeyedObject | undefined, id: string, value: string, conceptId: string | null}) {\n    this.id = id;\n    this.value = value;\n    this.conceptId = conceptId;\n    this.meta = meta || {};\n  }\n}\n\nclass ResourceInstanceListCacheEntry implements IStringKeyedObject {\n  [key: string]: any;\n  datatype: string = 'resource-instance-list';\n  _: ResourceInstanceCacheEntry[];\n  meta: {[key: string]: any};\n\n  constructor({meta, _}: {meta: IStringKeyedObject | undefined, _: ResourceInstanceCacheEntry[]}) {\n    this._ = _.map(instance => {\n      if (instance instanceof ResourceInstanceCacheEntry) {\n        return instance;\n      }\n      return new ResourceInstanceCacheEntry(instance);\n    });\n    this.meta = meta || {};\n  }\n}\n\nclass ResourceInstanceCacheEntry implements IStringKeyedObject {\n  [key: string]: any\n  datatype: string = 'resource-instance';\n  id: string;\n  type: string;\n  graphId: string;\n  title: string | null;\n  meta: {[key: string]: any};\n\n  constructor({meta, id, type, graphId, title}: {meta: IStringKeyedObject | undefined, id: string, type: string, graphId: string, title: string | null}) {\n    this.id = id;\n    this.type = type;\n    this.graphId = graphId;\n    this.meta = meta || {};\n    this.title = this.meta.title || title;\n  }\n}\n\nclass ResourceInstanceListViewModel extends Array implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: IPseudo | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n  _value: Promise<(ResourceInstanceViewModel<any> | null)[]> | null = null;\n\n  async forJson() {\n    const value = await this._value;\n    return value ? value.map((v) => (v ? v.forJson() : null)) : null;\n  }\n\n  async __forJsonCache(getMeta: GetMeta): Promise<ResourceInstanceListCacheEntry> {\n    return new ResourceInstanceListCacheEntry({\n      meta: getMeta ? await getMeta(this) : getMeta,\n      _: await Promise.all([...this.values()].map(async (rivmPromise: Promise<ResourceInstanceViewModel<any>>) => {\n        const rivm = await rivmPromise;\n        return await rivm.__forJsonCache(getMeta)\n      }))\n    });\n  }\n\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n    cacheEntry: ResourceInstanceListCacheEntry | null = null\n  ): Promise<ResourceInstanceListViewModel | null> {\n    const nodeid = node.nodeid;\n    let val: (ResourceInstanceViewModel<any> | null | Promise<ResourceInstanceViewModel<any> | null>)[];\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, null);\n      }\n      if (value !== null) {\n        tile.data.set(nodeid, []);\n        if (!Array.isArray(value)) {\n          throw Error(\n            `Cannot set an (entire) resource list value on node ${nodeid} except via an array: ${JSON.stringify(value)}`,\n          );\n        }\n        val = value.map((v, i) => {\n          if (v instanceof ResourceInstanceViewModel) {\n            return v;\n          }\n          return ResourceInstanceViewModel.__create(tile, node, v, cacheEntry && cacheEntry._[i] ? cacheEntry._[i] : null);\n        });\n        Promise.all(\n          val.map(async (c) => {\n            const v = await c;\n            return v ? (await v).id : null;\n          }),\n        ).then((ids) => {\n          tile.data.set(nodeid, ids.map(id => {\n            return {\n              resourceId: id\n            };\n          }));\n          return ids;\n        });\n        value = val;\n      }\n    } else {\n      value = [];\n    }\n\n    if (!tile || !value) {\n      return null;\n    }\n    const str = new ResourceInstanceListViewModel(...value);\n    return str;\n  }\n\n  async __asTileData() {\n    return this._value ? await this._value : null;\n  }\n}\n\nclass ResourceInstanceViewModel<RIVM extends IRIVM<RIVM>> implements IStringKeyedObject {\n  [key: string | symbol]: any;\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  $: IInstanceWrapper<RIVM> | null;\n  __: IModelWrapper<RIVM> | null;\n  __parentPseudo: IPseudo | undefined = undefined;\n  __cacheEntry: ResourceInstanceCacheEntry | null = null;\n  id: string;\n  then: undefined;\n  [Symbol.toPrimitive]: undefined;\n\n  gm: IGraphManager | undefined;\n\n  toString(): string {\n    if (!this.__) {\n      return `[Resource:${this.id}]`;\n    }\n    return `[${this.__.wkrm.modelClassName}:${this.id ?? \"-\"}]`;\n  }\n\n  async __has(key: string): Promise<boolean | undefined> {\n    // There is a catch here, that because we lazy-load, we do not\n    // know, hence three possible return values.\n    if (!this.$) {\n      return undefined;\n    }\n    return (await this.$.getRootViewModel() || new Map()).__has(key);\n  }\n\n  async __asTileData(): Promise<IStringKeyedObject> {\n    return {\n      resourceId: this.id\n    };\n  }\n\n  async __forJsonCache(getMeta: GetMeta): Promise<ResourceInstanceCacheEntry> {\n    // TODO should we re-use the cacheEntry and rely on it being expired correctly?\n    let wrapper: IModelWrapper<RIVM>;\n    if (!this.__) {\n      if (this.__cacheEntry) {\n        return this.__cacheEntry;\n      } else {\n        [, wrapper] = await this.retrieve();\n      }\n    } else {\n      wrapper = this.__;\n    }\n    this.__cacheEntry = new ResourceInstanceCacheEntry({\n      meta: getMeta ? await getMeta(this) : undefined,\n      id: this.id,\n      type: wrapper.wkrm.modelClassName,\n      graphId: wrapper.wkrm.graphId,\n      title: null,\n    });\n    return this.__cacheEntry;\n  }\n\n  async forJson(cascade: boolean=false) {\n    let jsonData: StaticResourceReference;\n    if (!cascade && this.__cacheEntry) {\n      jsonData = {\n        type: this.__cacheEntry.type,\n        graphId: this.__cacheEntry.graphId,\n        id: this.__cacheEntry.id,\n        title: this.__cacheEntry.title || undefined,\n        meta: this.__cacheEntry.meta || undefined,\n        root: null\n      };\n    } else if (this.__) {\n      jsonData = {\n        type: this.__.wkrm.modelClassName,\n        graphId: this.__.wkrm.graphId,\n        id: this.id,\n        title: undefined,\n        meta: undefined,\n        root: null\n      };\n    } else {\n      jsonData = {\n        type: \"(unknown)\",\n        graphId: \"\",\n        id: this.id,\n        title: undefined,\n        meta: undefined,\n        root: null\n      };\n    }\n    const basic = new StaticResourceReference(jsonData);\n    if (cascade) {\n      if (!this.$) {\n        await this.retrieve();\n        if (!this.$) {\n          throw Error(\"Could not retrieve resource\");\n        }\n      }\n      const root = await this.$.getRootViewModel();\n      basic.root = await root.forJson();\n    }\n    return basic;\n  }\n\n  async retrieve(): Promise<[IInstanceWrapper<RIVM>, IModelWrapper<RIVM>]> {\n    let iw: IInstanceWrapper<RIVM>;\n    let mw: IModelWrapper<RIVM>;\n    if (viewContext.graphManager) {\n      const replacement = await viewContext.graphManager.getResource(this.id, true);\n\n      // @ts-expect-error We cannot guarantee this resource is the right type...\n      iw = replacement.$;\n      // @ts-expect-error We cannot guarantee this resource is the right type...\n      mw = replacement.__;\n    } else {\n      throw Error(\"Cannot traverse resource relationships without a GraphManager\");\n    }\n    this.$ = iw;\n    this.__ = mw;\n    return [iw, mw];\n  }\n\n  constructor(\n    id: string,\n    modelWrapper: IModelWrapper<RIVM> | null,\n    instanceWrapperFactory: ((\n      rivm: RIVM,\n    ) => IInstanceWrapper<RIVM>) | null,\n    cacheEntry: object | null,\n  ) {\n    this.id = id;\n    // @ts-expect-error I believe some deep type magic would be required to\n    // convince TS that `this` is a valid RIVM.\n    this.$ = instanceWrapperFactory ? instanceWrapperFactory(this) : null;\n    this.__ = modelWrapper;\n    if (cacheEntry instanceof ResourceInstanceCacheEntry) {\n      this.__cacheEntry = cacheEntry;\n    }\n\n    return new Proxy(this, {\n      // NOTE: set should not return a promise, so could cause a race\n      // condition with a subsequent read.\n      // @ts-expect-error Returning a promise for set\n      set: async (object: ResourceInstanceViewModel<RIVM>, key, value): Promise<boolean> => {\n        const k: string = typeof key === 'symbol' ? key.description || '' : key;\n        if (key in object) {\n          object[key] = value;\n        } else if (k in object || k.startsWith('__')) {\n          object[k] = value;\n        } else {\n          if (!object.$) {\n            await this.retrieve();\n            if (!object.$) {\n              throw Error(\"Could not retrieve resource\");\n            }\n          }\n          object.$.setOrmAttribute(k, value);\n        }\n        return true;\n      },\n      get: (object: ResourceInstanceViewModel<RIVM>, key) => {\n        const k: string = typeof key === 'symbol' ? key.description || '' : key;\n        if (key in object) {\n          return object[key];\n        } else if (k in object || k.startsWith('__')) {\n          return object[k];\n        }\n        return new AttrPromise(async (resolve) => {\n          if (!object.$) {\n            await this.retrieve();\n            if (!object.$) {\n              throw Error(\"Could not retrieve resource\");\n            }\n          }\n          return object.$.getOrmAttribute(k).then((v) => {\n            return resolve(v);\n          });\n        });\n      },\n    });\n  }\n\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n    cacheEntry: ResourceInstanceCacheEntry | null\n  ): Promise<ResourceInstanceViewModel<any> | null> {\n    const nodeid = node.nodeid;\n    let val: string | null = value;\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, null);\n      }\n      if (value !== null) {\n        if (!value && !(value instanceof StaticResource) && !(value instanceof StaticResourceReference)) {\n          val = null;\n        } else if (value instanceof Promise) {\n          return value.then((value) => {\n            return ResourceInstanceViewModel.__create(tile, node, value, cacheEntry);\n          });\n        } else if (typeof value == \"string\") {\n          if (\n            /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.exec(\n              value,\n            )\n          ) {\n            val = value;\n          } else {\n            throw Error(\n              `Set resource instances using id, not strings in node ${node.alias}: ${value}`,\n            );\n          }\n        } else if (value instanceof Object && value.resourceId) {\n          val = value.resourceId;\n        } else if (value instanceof Array && value.length < 2 ) {\n          if (value.length == 1) {\n            return ResourceInstanceViewModel.__create(tile, node, value[0], cacheEntry);\n          }\n        } else {\n          throw Error(\"Could not set resource instance from this data\");\n        }\n\n        tile.data.set(nodeid, val ? [{resourceId: val}] : null);\n      }\n    }\n\n    if (!tile || !val) {\n      return null;\n    }\n    const str = new ResourceInstanceViewModel(val, null, null, cacheEntry);\n    return str;\n  }\n}\n\nclass FileListViewModel extends Array implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: IPseudo | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n  _value: Promise<(ConceptValueViewModel | null)[]> | null = null;\n\n  async forJson() {\n    const value = await this._value;\n    return value ? value.map((v) => (v ? v.forJson() : null)) : null;\n  }\n\n  async __forJsonCache(): Promise<null> {\n    return null;\n  }\n\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): Promise<FileListViewModel> {\n    const nodeid = node.nodeid;\n    let val: (ConceptValueViewModel | Promise<ConceptValueViewModel | null> | null)[] = [];\n    if (!tile.data.has(nodeid)) {\n      tile.data.set(nodeid, null);\n    }\n    if (value !== null) {\n      tile.data.set(nodeid, []);\n      if (!Array.isArray(value)) {\n        throw Error(\n          `Cannot set an (entire) file list value on node ${nodeid} except via an array: ${JSON.stringify(value)}`,\n        );\n      }\n      val = value.map((c) => {\n        return c;\n      });\n      Promise.all(val).then((vals) => {\n        Promise.all(\n          vals.map(async (c) => {\n            const v = await c;\n            return v ? (await v.getValue()).id : null;\n          })\n        ).then((ids) => {\n          tile.data.set(nodeid, ids);\n        });\n      });\n      value = val;\n    } else {\n      value = [];\n    }\n\n    const str = new FileListViewModel(...value);\n    return str;\n  }\n\n  async __asTileData() {\n    return this._value ? await this._value : null;\n  }\n}\n\nclass ConceptListViewModel extends Array implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: IPseudo | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n  _value: Promise<(ConceptValueViewModel | null)[]> | null = null;\n\n  async forJson() {\n    const value = await this._value;\n    return value ? value.map((v) => (v ? v.forJson() : null)) : null;\n  }\n\n  async __forJsonCache(getMeta: GetMeta): Promise<ConceptListCacheEntry> {\n    return new ConceptListCacheEntry({\n      meta: getMeta ? await getMeta(this) : getMeta,\n      _: (await Promise.all([...this.values()].map(async (rivmPromise: Promise<ConceptValueViewModel>) => {\n        const rivm = await rivmPromise;\n        if (rivm) {\n          return await rivm.__forJsonCache(getMeta)\n        }\n      }))).filter(val => val !== undefined)\n    });\n  }\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n    cacheEntry: ConceptListCacheEntry | null = null\n  ): Promise<ConceptListViewModel> {\n    const nodeid = node.nodeid;\n    let val: (ConceptValueViewModel | Promise<ConceptValueViewModel | null> | null)[] = [];\n    if (!tile.data.has(nodeid)) {\n      tile.data.set(nodeid, null);\n    }\n    if (value !== null) {\n      tile.data.set(nodeid, []);\n      if (!Array.isArray(value)) {\n        throw Error(\n          `Cannot set an (entire) concept list value on node ${nodeid} except via an array: ${JSON.stringify(value)}`,\n        );\n      }\n      val = value.map((c, i) => {\n        if (c instanceof ConceptValueViewModel) {\n          return c;\n        }\n        return ConceptValueViewModel.__create(tile, node, c, cacheEntry && cacheEntry._[i] ? cacheEntry._[i] : null);\n      });\n      Promise.all(val).then((vals) => {\n        Promise.all(\n          vals.map(async (c) => {\n            const v = await c;\n            return v ? (await v.getValue()).id : null;\n          })\n        ).then((ids) => {\n          tile.data.set(nodeid, ids);\n        });\n      });\n      value = val;\n    } else {\n      value = [];\n    }\n\n    const str = new ConceptListViewModel(...value);\n    return str;\n  }\n\n  async __asTileData() {\n    return this._value ? await this._value : null;\n  }\n}\n\nclass DomainValueListViewModel extends Array implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n  _value: Promise<(DomainValueViewModel | null)[]> | null = null;\n\n  async forJson() {\n    const value = await this._value;\n    return value ? value.map((v) => (v ? v.forJson() : null)) : null;\n  }\n\n  // No point in caching something that is on the graph.\n  __forJsonCache(): null {\n    return null;\n  }\n\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): Promise<DomainValueListViewModel> {\n    const nodeid = node.nodeid;\n    let val: (DomainValueViewModel | Promise<DomainValueViewModel | null> | null)[];\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, null);\n      }\n      if (value !== null) {\n        tile.data.set(nodeid, []);\n        if (!Array.isArray(value)) {\n          throw Error(\n            `Cannot set an (entire) domain list value on node ${nodeid} except via an array: ${JSON.stringify(value)}`,\n          );\n        }\n        val = value.map((c) => {\n          if (c instanceof DomainValueViewModel) {\n            return c;\n          }\n          return DomainValueViewModel.__create(tile, node, c);\n        });\n        Promise.all(val).then(async (vals) => {\n          const ids = Promise.all(vals.map(async val => val === null ? val : (await val._value).id));\n          ids.then(ids => {\n            tile.data.set(nodeid, ids);\n          });\n        });\n      }\n    } else {\n      value = [];\n    }\n\n    const str = new DomainValueListViewModel(...value);\n    return str;\n  }\n\n  async __asTileData() {\n    const value = await this._value;\n    return value ?? null;\n  }\n}\n\n\n\nclass DomainValueViewModel extends String implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  _value: StaticDomainValue | Promise<StaticDomainValue>;\n\n  constructor(value: StaticDomainValue) {\n    super(value.toString());\n    this._value = value;\n  }\n\n  async forJson(): Promise<StaticDomainValue> {\n    return this._value;\n  }\n\n  // No point in caching something that is on the graph.\n  __forJsonCache(): null {\n    return null;\n  }\n\n  getValue(): StaticDomainValue | Promise<StaticDomainValue> {\n    return this._value;\n  }\n\n  async lang(lang: string): Promise<string | undefined> {\n    return (await this._value).lang(lang);\n  }\n\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): Promise<DomainValueViewModel | null> {\n    const nodeid = node.nodeid;\n    let val: StaticDomainValue | null = value;\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, null);\n      }\n      if (value !== null) {\n        if (!value && !(value instanceof StaticDomainValue)) {\n          val = null;\n        } else if (value instanceof Promise) {\n          return value.then((value) => {\n            return DomainValueViewModel.__create(tile, node, value);\n          });\n        } else if (typeof value == \"string\") {\n          if (\n            /^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i.exec(\n              value,\n            )\n          ) {\n            const config = nodeConfigManager.retrieve(node);\n            if (!config || !(config instanceof StaticNodeConfigDomain)) {\n              throw Error(`Cannot form domain value for ${node.nodeid} without config`);\n            }\n            val = config.valueFromId(value) || null;\n          } else {\n            throw Error(\n              \"Set domain values using values from domain lists, not strings\",\n            );\n          }\n        } else {\n          throw Error(\"Could not set domain value from this data\");\n        }\n\n        if (!(val instanceof Promise)) {\n          tile.data.set(nodeid, val ? val.id : null);\n        }\n      }\n    }\n\n    if (!tile || !val) {\n      return null;\n    }\n    const str = new DomainValueViewModel(val);\n    return str;\n  }\n\n  async __asTileData() {\n    const value = await this._value;\n    return value ? value.id : null;\n  }\n}\n\nclass ConceptValueViewModel extends String implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: IPseudo | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  _value: StaticValue | Promise<StaticValue>;\n\n  constructor(value: StaticValue) {\n    super(value.value);\n    this._value = value;\n  }\n\n  async forJson(): Promise<StaticValue> {\n    return this._value;\n  }\n\n  async __forJsonCache(getMeta: GetMeta): Promise<ConceptValueCacheEntry> {\n    const value = await this._value;\n    return new ConceptValueCacheEntry({\n      meta: getMeta ? await getMeta(this) : undefined,\n      id: value.id,\n      value: value.value,\n      conceptId: value.__conceptId\n    });\n  }\n\n  getValue(): StaticValue | Promise<StaticValue> {\n    return this._value;\n  }\n\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n    cacheEntry: ConceptValueCacheEntry | null\n  ): Promise<ConceptValueViewModel | null> {\n    const nodeid = node.nodeid;\n    const collectionId = node.config?.rdmCollection;\n    if (!collectionId) {\n      throw Error(`Node ${node.alias} (${node.nodeid}) missing rdmCollection in config`);\n    }\n    let val: StaticValue | null = value;\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, null);\n      }\n      if (value !== null) {\n        if (value instanceof StaticConcept) {\n          if (value.getPrefLabel) {\n            val = value.getPrefLabel();\n          } else {\n            throw Error(\"Recognizing value as StaticConcept, but no getPrefLabel member\");\n          }\n        }\n        if (!value) {\n          val = null;\n        } else if (value instanceof StaticValue) {\n          // No change needed.\n        } else if (value instanceof Promise) {\n          return value.then((value) => {\n            return ConceptValueViewModel.__create(tile, node, value, cacheEntry);\n          });\n        } else if (typeof value == \"string\") {\n          if (\n            /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.exec(\n              value,\n            )\n          ) {\n            if (cacheEntry) {\n              val = new StaticValue({\n                id: cacheEntry.id,\n                value: cacheEntry.value,\n                __concept: null,\n                __conceptId: cacheEntry.conceptId,\n              }, cacheEntry.conceptId);\n              return new ConceptValueViewModel(val);\n            } else {\n              const collection = RDM.retrieveCollection(collectionId);\n              return collection.then((collection) => {\n                if (!collection.getConceptValue) {\n                  throw Error(`Collection ${collection.id} must be a StaticCollection here, not a key/value object`);\n                }\n                const val = collection.getConceptValue(value);\n\n                if (!val) {\n                  console.error(\"Could not find concept for value\", value, \"for\", node.alias, \"in collection\", collectionId);\n                }\n\n                tile.data.set(nodeid, val ? val.id : null);\n\n                if (!tile || !val) {\n                  return null;\n                }\n                const str = new ConceptValueViewModel(val);\n\n                return str;\n              });\n            }\n          } else {\n            throw Error(\n              `Set concepts using values from collections, not strings: ${value}`,\n            );\n          }\n        } else {\n          throw Error(\"Could not set concept from this data\");\n        }\n\n        if (!(val instanceof Promise)) {\n          if (!val) {\n            console.error(\"Could not find concept for value\", value, \"for\", node.alias, \"in collection\", collectionId);\n          }\n\n          tile.data.set(nodeid, val ? val.id : null);\n        }\n      }\n    }\n\n    if (!tile || !val) {\n      return null;\n    }\n    const str = new ConceptValueViewModel(val);\n    return str;\n  }\n\n  async __asTileData() {\n    const value = await this._value;\n    return value ? value.id : null;\n  }\n}\n\nclass DateViewModel extends Date implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n  __original: string;\n  then: undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  constructor(val: string) {\n    super(val);\n    this.__original = val;\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): DateViewModel | Promise<DateViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) =>\n        DateViewModel.__create(tile, node, value),\n      );\n    }\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, null);\n      }\n      if (value !== null) {\n        tile.data.set(nodeid, value);\n      }\n    }\n\n    let val: string | {[key: string]: string} | any = tile.data.get(nodeid);\n    // TODO: catch rendering issues - this workaround should be removed\n    // as it is overly tolerant of input issues.\n    if (typeof val == \"object\" && val['en'] !== undefined) {\n      val = val.en;\n    }\n    if (!tile || val === null || val === undefined || val === '') {\n      return null;\n    }\n    if (typeof val != \"string\") {\n      throw Error(\"Date should be a string\");\n    }\n    const str = new DateViewModel(val);\n    return str;\n  }\n\n  async forJson() {\n    try {\n      return this.toISOString();\n    } catch (e) {\n      console.warn(e);\n      return this.__original;\n    }\n  }\n\n  __asTileData() {\n    return this.toISOString();\n  }\n}\n\nclass GeoJSONViewModel implements IViewModel, IStringKeyedObject {\n  [key: string | symbol]: any;\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n  then: undefined;\n  [Symbol.toPrimitive]: undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  _value: { [key: string]: any };\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  constructor(jsonData: { [key: string]: any }) {\n    this._value = jsonData;\n    return new Proxy(this, {\n      get: (object: GeoJSONViewModel, key) => {\n        const k: string = typeof key === 'symbol' ? key.description || '' : key;\n        if (key in object) {\n          return object[key];\n        } else if (k in object) {\n          return object[k];\n        }\n        return this._value[k];\n      },\n      set: (object: GeoJSONViewModel, key, value) => {\n        const k: string = typeof key === 'symbol' ? key.description || '' : key;\n        if (key in object) {\n          object[key] = value;\n        } else if (k in object) {\n          object[k] = value;\n        } else {\n          this._value[k] = value;\n        }\n        return true;\n      },\n    });\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): GeoJSONViewModel | Promise<GeoJSONViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) =>\n        GeoJSONViewModel.__create(tile, node, value),\n      );\n    }\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, null);\n      }\n      if (value !== null) {\n        tile.data.set(nodeid, value);\n      }\n    }\n\n    const val = tile.data.get(nodeid);\n    if (!tile || val === null || val === undefined) {\n      return null;\n    }\n    if (!(val instanceof Object)) {\n      throw Error(\"GeoJSON should be a JSON object\");\n    }\n    const str = new GeoJSONViewModel(val);\n    return str;\n  }\n\n  async forJson() {\n    return await this._value;\n  }\n\n  __asTileData() {\n    return this._value;\n  }\n}\n\nclass StringTranslatedLanguage {\n  value: string = \"\"\n}\n\nclass EDTFViewModel extends String implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  forJson(): string {\n    return this.toString();\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): EDTFViewModel | Promise<EDTFViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) => EDTFViewModel.__create(tile, node, value));\n    }\n    if (tile) {\n      if (value !== null) {\n        tile.data.set(nodeid, value);\n      }\n    }\n\n    const val = tile.data.get(nodeid);\n    if (!tile || val === null || val === undefined) {\n      return null;\n    }\n    const string = new EDTFViewModel(val);\n    return string;\n  }\n\n  __asTileData() {\n    return `${this}`;\n  }\n}\n\nclass NonLocalizedStringViewModel extends String implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  forJson(): string {\n    return this.toString();\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): NonLocalizedStringViewModel | Promise<NonLocalizedStringViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) => NonLocalizedStringViewModel.__create(tile, node, value));\n    }\n    if (tile) {\n      if (value !== null) {\n        tile.data.set(nodeid, value);\n      }\n    }\n\n    const val = tile.data.get(nodeid);\n    if (!tile || val === null || val === undefined) {\n      return null;\n    }\n    const string = new NonLocalizedStringViewModel(val);\n    return string;\n  }\n\n  __asTileData() {\n    return `${this}`;\n  }\n}\n\nclass NumberViewModel extends Number implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  toString(): string {\n    return `${this.valueOf()}`;\n  }\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  forJson(): number {\n    return this.valueOf();\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): NumberViewModel | Promise<NumberViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) => NumberViewModel.__create(tile, node, value));\n    }\n    if (tile) {\n      if (value !== null) {\n        tile.data.set(nodeid, value);\n      }\n    }\n\n    const val = tile.data.get(nodeid);\n    if (!tile || val === null || val === undefined) {\n      return null;\n    }\n    const num = new NumberViewModel(val);\n    return num;\n  }\n\n  __asTileData() {\n    return this.valueOf();\n  }\n}\n\n// Note that this is a Boolean _object__, not an actual boolean\nclass BooleanViewModel extends Boolean implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n  __config:  StaticNodeConfigBoolean;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  constructor(value: boolean, config: StaticNodeConfigBoolean) {\n    super(value);\n    this.__config = config;\n  }\n\n  toString(lang?: string | undefined): string {\n    const labelLang = lang || DEFAULT_LANGUAGE;\n    return this.valueOf() ? (\n      this.__config && this.__config.trueLabel ? this.__config.trueLabel[labelLang] || 'true' : 'true'\n    ) : (\n      this.__config && this.__config.trueLabel ? this.__config.falseLabel[labelLang] || 'false' : 'false'\n    );\n  }\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  forJson(): boolean {\n    return this.valueOf();\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): BooleanViewModel | Promise<BooleanViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) => BooleanViewModel.__create(tile, node, value));\n    }\n    if (tile) {\n      if (value !== null) {\n        tile.data.set(nodeid, value);\n      }\n    }\n\n    const val = tile.data.get(nodeid);\n    if (!tile || val === null || val === undefined) {\n      return null;\n    }\n    const config = nodeConfigManager.retrieve(node);\n    if (!config || !(config instanceof StaticNodeConfigBoolean)) {\n      throw Error(`Cannot form boolean value for ${node.nodeid} without config`);\n    }\n    if (typeof val !== 'boolean' && val !== 0 && val !== 1) {\n      throw Error(`Refusing to use truthiness for value ${val} in boolean`);\n    }\n    const bool = new BooleanViewModel(val ? true : false, config);\n    return bool;\n  }\n\n  __asTileData() {\n    return this.valueOf();\n  }\n}\n\nclass Url {\n  url: string\n  url_label?: string\n\n  constructor(url: string, url_label?: string) {\n    this.url = url;\n    this.url_label = url_label;\n  }\n}\n\nclass UrlViewModel extends String implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  _value: Url;\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  constructor(value: Url) {\n    const displayValue = value.url_label || value.url;\n    super(displayValue);\n    this._value = value;\n  }\n\n  forJson(): {[key: string]: string} {\n    return {\n      url: this._value.url,\n      url_label: this._value.url_label || \"\",\n    };\n  }\n\n  label() {\n    return this._value.url_label || this._value.url;\n  }\n\n  href() {\n    return this._value.url;\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): UrlViewModel | Promise<UrlViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) => UrlViewModel.__create(tile, node, value));\n    }\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, {});\n      }\n      if (value !== null) {\n        if (value instanceof UrlViewModel) {\n          value = value._value;\n        } else if (value instanceof Object) {\n          if (!value.url) {\n            throw Error(`A URL must be null or have a 'url' field: ${value}`);\n          }\n        }\n        tile.data.set(nodeid, {\n          url: value.url,\n          url_label: value.url_label,\n        });\n      }\n    }\n\n    const val = tile.data.get(nodeid);\n    if (!tile || val === null || val === undefined) {\n      return null;\n    }\n    let url: Url;\n    if (typeof val !== 'object') {\n      url = new Url(`${val}`);\n    } else if (val instanceof Map) {\n      url = new Url(val.get('url'), val.get('url_label'));\n    } else if ('url' in val && typeof val === 'object' && typeof val.url === 'string' && 'url_label' in val && (val.url_label === undefined || typeof val.url_label === 'string')) {\n      url = new Url(val.url, val.url_label);\n    } else {\n      throw Error(`Unrecognised URL type: ${val}`);\n    }\n    const str = new UrlViewModel(url);\n    return str;\n  }\n\n  __asTileData() {\n    return this.forJson();\n  }\n}\n\nclass StringViewModel extends String implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  _value: Map<string, StringTranslatedLanguage>;\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  constructor(value: Map<string, StringTranslatedLanguage>, language: string | null = null) {\n    const lang = value.get(language || DEFAULT_LANGUAGE);\n    let displayValue: string;\n    if (lang) {\n      if (typeof lang == \"string\") {\n        displayValue = lang;\n      } else {\n        displayValue = lang.value;\n      }\n    } else {\n      // TODO: allow fallback\n      displayValue = \"\";\n    }\n    super(displayValue);\n    this._value = value;\n  }\n\n  forJson(): string {\n    return `${this}`;\n  }\n\n  lang(language: string) {\n    const elt = this._value.get(language);\n    if (elt) {\n      if (elt instanceof Object) {\n        return elt.value;\n      }\n      return elt;\n    } else {\n      return undefined;\n    }\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): StringViewModel | Promise<StringViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) => StringViewModel.__create(tile, node, value));\n    }\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, {});\n      }\n      if (value !== null) {\n        if (value instanceof Object) {\n          const entries =\n            value instanceof Map ? value.entries() : Object.entries(value);\n          for (const [k, v] of [...entries]) {\n            const val = tile.data.get(nodeid);\n            if (val instanceof Map) {\n              val.set(k, v);\n            } else if (val instanceof Object) {\n              // @ts-expect-error Need better typing of data to make this settable.\n              val[k] = v;\n            } else if (val !== null) {\n              throw Error(\"Malformed string in tile data\");\n            }\n          }\n        } else {\n          tile.data.set(nodeid, {\n            [DEFAULT_LANGUAGE]: value,\n          });\n        }\n      }\n    }\n\n    const val = tile.data.get(nodeid);\n    if (!tile || val === null || val === undefined) {\n      return null;\n    }\n    let mapVal;\n    if (val instanceof Map) {\n      mapVal = val;\n    } else {\n      mapVal = new Map(Object.entries(val));\n    }\n    const str = new StringViewModel(mapVal);\n    return str;\n  }\n\n  __asTileData() {\n    return this._value;\n  }\n}\n\nclass SemanticViewModel implements IStringKeyedObject, IViewModel {\n  [key: string | symbol]: any;\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  then: undefined;\n  [Symbol.toPrimitive]: undefined;\n\n  __parentPseudo: PseudoValue<any> | undefined;\n  __childValues: Map<string, any>;\n  __parentWkri: IRIVM<any> | null;\n  __childNodes: Map<string, StaticNode>;\n  __tile: StaticTile | null;\n  __node: StaticNode;\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  constructor(\n    parentWkri: IRIVM<any> | null,\n    childNodes: Map<string, StaticNode>,\n    tile: StaticTile | null,\n    node: StaticNode,\n  ) {\n    this.__childValues = new Map<string, any>();\n    this.__parentWkri = parentWkri;\n    this.__tile = tile;\n    this.__node = node;\n    this.__childNodes = childNodes;\n    return new Proxy(this, {\n      set: (object, key, value) => {\n        const k: string = typeof key === 'symbol' ? key.description || '' : key;\n        if (key in object) {\n          object[key] = value;\n        } else if (k.startsWith(\"__\") || k in object) {\n          object[k] = value;\n        } else {\n          object.__set(k, value);\n        }\n        return true;\n      },\n      get: (object, key) => {\n        const k: string = typeof key === 'symbol' ? key.description || '' : key;\n        if (key in object) {\n          return object[key];\n        } else if (k.startsWith(\"__\") || k in object) {\n          return object[k];\n        }\n        if (k == \"length\") {\n          return object.__childNodes.size;\n        }\n        return new AttrPromise((resolve) => {\n          object.__get(k).then(resolve);\n        });\n      },\n    });\n  }\n\n  async toString(): Promise<string> {\n    const entries = [...this.__childValues.entries()].map(([k, v]) => `${k}: ${v}`);\n    return `[[${entries.join(\",\")}]]`;\n  }\n\n  async toObject() {\n    const entries = [...(await this.__getChildValues()).entries()];\n    return Object.fromEntries(await Promise.all(entries.map(async ([k, vl]) => {\n        return [k, (await vl).getValue()];\n    })));\n  }\n\n  async forJson() {\n    async function _forJson(v: IPseudo | IViewModel | null) {\n      v = await v;\n      if (!v) {\n        return null;\n      }\n      return await v.forJson();\n    };\n    const entries = [...(await this.__getChildValues()).entries()];\n    return Object.fromEntries(await Promise.all(entries.map(async ([k, vl]) => {\n        return [k, vl ? await _forJson(vl) : vl];\n    })));\n  }\n\n  async __update(map: Map<string, any>) {\n    return Promise.all(\n      [...map.entries()].map(([k, v]) => {\n        this.__set(k, v);\n      }),\n    );\n  }\n\n  async __get(key: string) {\n    const childValue = await this.__getChildValue(key);\n    return childValue.getValue();\n  }\n\n  async __set(key: string, value: any) {\n  // async __set(key: string, value: any) {\n    if (!this.__childNodes.has(key)) {\n      throw Error(\n        `Semantic node does not have this key: ${key} (${[...this.__childNodes.keys()]})`,\n      );\n    }\n\n    throw Error(`Setting semantic keys (${key} = ${value}) is not implemented yet in Javascript`);\n    // const child = await this.__getChildValue(key, true);\n    // child.value = value;\n  }\n\n  __has(key: string) {\n    return this.__childNodes.has(key);\n  }\n\n  async __getChildTypes() {\n    const promises = [...this.__childNodes.keys()].map(async (key): Promise<[string, IPseudo]> => [\n      key,\n      await this.__getChildValue(key),\n    ]);\n    const entries: Array<[string, IPseudo]> = await Promise.all(promises);\n    return new Map<string, any>([...entries]);\n  }\n\n  async __getChildren(direct: null | boolean = null) {\n    const items = new Map<string, any>();\n    for (const [key, value] of [...(await this.__getChildValues()).entries()]) {\n      items.set(key, value);\n    }\n    const children = [...items.entries()]\n      .filter((entry) => {\n        const child = this.__childNodes.get(entry[0]);\n        if (!child) {\n          throw Error(\"Child key is not in child nodes\");\n        }\n        return (\n          (direct === null || direct === !child.is_collector) &&\n          entry[1] !== null\n        );\n      })\n      .map((entry) => entry[1]);\n    return children;\n  }\n\n  async __getChildValue(key: string, setDefault: boolean = false): Promise<IPseudo> {\n    if (!this.__childNodes.has(key)) {\n      throw Error(\n        `Semantic node does not have this key: ${key} (${[...this.__childNodes.keys()]})`,\n      );\n    }\n\n    let child;\n    if (!this.__childValues.has(key)) {\n      const children = await this.__getChildValues();\n      child = children.get(key) || null;\n\n      let set = true;\n      if (child === null) {\n        child = this.__makePseudo(key);\n        set = setDefault;\n      }\n      if (set) {\n        // This ensures that we do not set a default value in our\n        // local cache simply because the node is not loaded yet.\n        this.__childValues.set(key, child);\n      }\n      child.parentNode = this.__parentPseudo || null;\n    } else {\n      child = this.__childValues.get(key);\n    }\n    return child;\n  }\n\n  __makePseudo(key: string): IPseudo {\n    const childNode = this.__childNodes.get(key);\n\n    if (!childNode) {\n      throw Error(`Child node key ${key} missing`);\n    }\n\n    if (!this.__parentWkri) {\n      throw Error(\"This semantic node is currently parentless (no WKRI)\");\n    }\n\n    if (!this.__parentWkri.$) {\n      // Could autoretreive?\n      throw Error(\"This semantic node is currently on an unloaded WKRI\");\n    }\n\n    const child = this.__parentWkri.$.addPseudo(childNode, this.__tile, this.__node);\n    child.parentNode = this.__parentPseudo || null;\n    return child;\n  }\n\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n    parent: IRIVM<any> | null,\n    childNodes: Map<string, StaticNode>,\n  ): Promise<SemanticViewModel> {\n    const svm = new SemanticViewModel(parent, childNodes, tile, node);\n    if (value) {\n      try {\n        await svm.__update(value);\n      } catch (e) {\n        tileLoadingError(\n          `\n          Suppressed a tile loading error: ${e}: ${typeof e} (tile: ${tile}; node: ${node}) - ${value}\n        `,\n          e,\n        );\n      }\n    }\n    // await svm.__getChildren();\n    return svm;\n  }\n\n  async __asTileData() {\n    // Ensure all nodes have populated the tile\n    const relationships: any[] = [];\n    for (const value of [...await this.__getChildren(true)]) {\n      // We do not use tile, because a child node will ignore its tile reference.\n      const [, subrelationships] = await value.getTile();\n      relationships.push(...subrelationships);\n    }\n    // This is none because the semantic type has no nodal value,\n    // only its children have nodal values, and the nodal value of this nodeid should\n    // not exist.\n    return [null, relationships];\n  }\n\n  async __getChildValues(): Promise<Map<string, IPseudo>> {\n    const parent = this.__parentWkri;\n    const childNodes = this.__childNodes;\n    const tile = this.__tile;\n    const node = this.__node;\n    if (!parent || !parent.$) {\n      return new Map();\n    }\n\n    // Ensure lazy-loading done.\n    // TODO check this does not go deeper than necessary.\n    await parent.$.loadNodes([...childNodes.keys()]);\n\n    // TODO: Why not just use edges?\n    const children: Map<string, any> = new Map();\n    for (const entry of [...parent.$.allEntries()]) {\n      const key = entry[0];\n      let values = entry[1];\n      if (values instanceof Promise) {\n        values = await values;\n      }\n      if (values === false || values === null || values === undefined) {\n        continue;\n      }\n      const childNode = childNodes.get(key);\n      if (childNode) {\n        for (let value of values) {\n          if (\n            value !== null &&\n            value.node &&\n            (!(value.parentNode) ||\n              value.parentNode === this.__parentPseudo)\n          ) {\n            // It is possible that this value has already\n            // been requested, but the tile is in-flight.\n            value = await value;\n            if (!value.node) {\n              throw Error(`Node ${childNode.alias} (${childNode.nodeid}) is unavailable`);\n            }\n            if (\n              // value.node.nodegroup_id == node.nodeid in all cases for first possibility?\n              (value.node.nodegroup_id != node.nodegroup_id && tile && value.tile && (!(value.tile.parenttile_id) || value.tile.parenttile_id == tile.tileid)) ||\n              (value.node.nodegroup_id == node.nodegroup_id &&\n                tile &&\n                value.tile == tile &&\n                !childNode.is_collector) //  # It shares a tile\n              // it feels like this should be necessary, but area_assignments->area_assignment fails with null parenttile_id\n              // (tile && value.tile && value.tile.parenttile_id == tile.tileid) ||\n              // (value.node.nodegroup_id == node.nodegroup_id &&\n              //   tile &&\n              //   value.tile == tile &&\n              //   !childNode.is_collector) //  # It shares a tile\n            ) {\n              children.set(key, value);\n            } else if (\n              node.nodegroup_id != value.node.nodegroup_id &&\n              childNode.is_collector // It does not share a tile\n            ) {\n              // This avoids list types that have their own tiles (like resource or concept lists)\n              // from appearing doubly-nested\n              const childValue = value instanceof PseudoList ? value : (value.isIterable() ? await value.getValue() : null);\n              let listValue: PseudoList | Array<any> | null;\n              if (childValue && Array.isArray(childValue)) {\n                listValue = childValue;\n              } else {\n                listValue = null;\n              }\n              if (listValue !== null) {\n                if (children.has(key)) {\n                  children.get(key).push(...listValue);\n                } else {\n                  children.set(key, listValue);\n                }\n              } else {\n                // In this case, we have a value, but the wrapper logic did not make it a PseudoList, so\n                // we should treat it as singular.\n                children.set(key, value);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (const [key, value] of [...children.entries()]) {\n      value.parentNode = this.__parentPseudo;\n      this.__childValues.set(key, value);\n    }\n\n    return children;\n  }\n}\n\nconst CUSTOM_DATATYPES: Map<string, string | IViewModel> = new Map();\n\nasync function getViewModel<RIVM extends IRIVM<RIVM>>(\n  parentPseudo: PseudoValue<any>,\n  tile: StaticTile,\n  node: StaticNode,\n  data: any,\n  parent: IRIVM<RIVM> | null,\n  childNodes: Map<string, StaticNode>,\n  isInner: boolean = false\n): Promise<IViewModel | null> {\n  let vm;\n  // TODO: should parentPseudo.parent.$ trigger a retrieve if missing?\n  const cacheEntries: {[tileId: string]: {[nodeId: string]: IStringKeyedObject}} | undefined = parentPseudo.parent && parentPseudo.parent.$ ? await parentPseudo.parent.$.getValueCache(false, undefined) : undefined;\n  let cacheEntry: IStringKeyedObject | null = null;\n  if (cacheEntries) {\n    cacheEntry = (tile.tileid ? (cacheEntries[tile.tileid] ?? {}) : {})[node.nodeid]\n  };\n  const datatype = isInner ? \"semantic\" : CUSTOM_DATATYPES.get(node.datatype) ?? node.datatype;\n\n  // TODO: find a neater way.\n  let conceptCacheEntry: ConceptListCacheEntry | null;\n  let conceptValueCacheEntry: ConceptValueCacheEntry | null;\n  let resourceInstanceCacheEntry: ResourceInstanceCacheEntry | null;\n  let resourceInstanceListCacheEntry: ResourceInstanceListCacheEntry | null;\n\n  if (!(typeof datatype == \"string\")) {\n    // @ts-expect-error Cannot make a static member part of the interface\n    vm = await datatype.__create(tile, node, data, cacheEntry);\n  } else {\n    switch (datatype) {\n      case \"semantic\":\n        vm = await SemanticViewModel.__create(\n          tile,\n          node,\n          data,\n          parent,\n          childNodes,\n        );\n        break;\n      case \"domain-value\":\n        vm = await DomainValueViewModel.__create(tile, node, data);\n        break;\n      case \"domain-value-list\":\n        vm = await DomainValueListViewModel.__create(tile, node, data);\n        break;\n      case \"concept\":\n        if (cacheEntry && typeof cacheEntry === \"object\" && !(cacheEntry instanceof ConceptValueCacheEntry)) {\n          // @ts-expect-error We do not know the cache entry is structured correctly, and any such checks are in the constructor.\n          conceptValueCacheEntry = new ConceptValueCacheEntry(cacheEntry);\n        } else {\n          conceptValueCacheEntry = cacheEntry;\n        }\n        vm = await ConceptValueViewModel.__create(tile, node, data, conceptValueCacheEntry);\n        break;\n      case \"resource-instance\":\n        if (cacheEntry && typeof cacheEntry === \"object\" && !(cacheEntry instanceof ResourceInstanceCacheEntry)) {\n          // @ts-expect-error We do not know the cache entry is structured correctly, and any such checks are in the constructor.\n          resourceInstanceCacheEntry = new ResourceInstanceCacheEntry(cacheEntry);\n        } else {\n          resourceInstanceCacheEntry = cacheEntry;\n        }\n        vm = await ResourceInstanceViewModel.__create(tile, node, data, resourceInstanceCacheEntry);\n        break;\n      case \"resource-instance-list\":\n        if (cacheEntry && typeof cacheEntry === \"object\" && !(cacheEntry instanceof ResourceInstanceListCacheEntry)) {\n          // @ts-expect-error We do not know the cache entry is structured correctly, and any such checks are in the constructor.\n          resourceInstanceListCacheEntry = new ResourceInstanceListCacheEntry(cacheEntry);\n        } else {\n          resourceInstanceListCacheEntry = cacheEntry;\n        }\n        vm = await ResourceInstanceListViewModel.__create(tile, node, data, resourceInstanceListCacheEntry);\n        break;\n      case \"concept-list\":\n        if (cacheEntry && typeof cacheEntry === \"object\" && !(cacheEntry instanceof ConceptListCacheEntry)) {\n          // @ts-expect-error We do not know the cache entry is structured correctly, and any such checks are in the constructor.\n          conceptCacheEntry = new ConceptListCacheEntry(cacheEntry);\n        } else {\n          conceptCacheEntry = cacheEntry;\n        }\n        vm = await ConceptListViewModel.__create(tile, node, data, conceptCacheEntry);\n        break;\n      case \"date\":\n        vm = await DateViewModel.__create(tile, node, data);\n        break;\n      case \"geojson-feature-collection\":\n        vm = await GeoJSONViewModel.__create(tile, node, data);\n        break;\n      case \"boolean\":\n        vm = await BooleanViewModel.__create(tile, node, data);\n        break;\n      case \"string\":\n        vm = await StringViewModel.__create(tile, node, data);\n        break\n      case \"number\":\n        vm = await NumberViewModel.__create(tile, node, data);\n        break\n      case \"file-list\":\n        vm = await FileListViewModel.__create(tile, node, data);\n        break;\n      case \"edtf\":\n        vm = await EDTFViewModel.__create(tile, node, data);\n        break;\n      case \"url\":\n        vm = await UrlViewModel.__create(tile, node, data);\n        break;\n      case \"non-localized-string\":\n        vm = await NonLocalizedStringViewModel.__create(tile, node, data);\n        break;\n      default:\n        console.warn(\"Missing type for tile\", tile.tileid, \"on node\", node.alias, \"with type\", node.datatype);\n        vm = await NonLocalizedStringViewModel.__create(tile, node, data);\n    }\n  }\n\n  if (vm === null) {\n    return null;\n  }\n\n  vm.__parentPseudo = parentPseudo;\n  if (vm instanceof Array) {\n    for (const vme of vm) {\n      if (vme instanceof Promise) {\n        vme.then(vmep => { if (vmep !== null) vmep.__parentPseudo = parentPseudo; });\n      } else {\n        vme.__parentPseudo = parentPseudo;\n      }\n    }\n  }\n\n  return vm;\n}\n\nexport { ResourceInstanceCacheEntry, DEFAULT_LANGUAGE, ResourceInstanceViewModel, ValueList, getViewModel, DomainValueViewModel, SemanticViewModel, StringViewModel, DateViewModel, GeoJSONViewModel, ConceptValueViewModel, viewContext, NonLocalizedStringViewModel, CUSTOM_DATATYPES, BooleanViewModel, NumberViewModel, UrlViewModel };\n","import { StaticTile, StaticNode } from \"./static-types\";\nimport { ISemantic, IViewModel, IPseudo, IRIVM, IModelWrapper } from \"./interfaces\";\nimport { getViewModel } from \"./viewModels\";\nimport { AttrPromise } from \"./utils\";\n\nclass PseudoUnavailable implements IPseudo {\n  parentNode: PseudoValue<any> | null = null;\n  tile: null = null;\n  node: StaticNode;\n  isOuter: boolean = false;\n\n  constructor(node: StaticNode) {\n    this.node = node;\n  }\n\n  async forJson(): Promise<{[key: string]: any}[] | null> {\n    return null;\n  }\n\n  describeField() {\n    return \"Unavailable field\";\n  }\n\n  describeFieldGroup() {\n    return \"Unavailable field\";\n  }\n\n  public getValue(): AttrPromise<null> {\n    return new AttrPromise(resolve => resolve(null));\n  }\n\n  getLength() {\n    return 0;\n  }\n\n  getChildren(_: boolean = false) {\n    return [];\n  }\n\n  isIterable(): boolean {\n    return false\n  }\n}\n\nconst ITERABLE_DATATYPES = [\n  \"concept-list\",\n  \"resource-instance-list\",\n  \"domain-value-list\"\n];\n\nclass PseudoValue<VM extends IViewModel> implements IPseudo {\n  node: StaticNode;\n  tile: StaticTile | null;\n  value: any;\n  parent: IRIVM<any> | null;\n  parentNode: PseudoValue<any> | null;\n  valueLoaded: boolean | undefined = false;\n  datatype: string | null = null;\n  originalTile: StaticTile | null;\n  accessed: boolean;\n  childNodes: Map<string, StaticNode>;\n  isOuter: boolean = false;\n  isInner: boolean = false;\n  inner: PseudoValue<ISemantic> | null = null;\n  independent: boolean;\n\n  isIterable(): boolean {\n    return this.datatype !== null && ITERABLE_DATATYPES.includes(this.datatype);\n  }\n\n  describeField() {\n    let fieldName = this.node.name;\n    if (this.parent && this.parent.__) {\n      fieldName = `${this.parent.__.wkrm.modelName} - ${fieldName}`;\n    }\n    return fieldName;\n  }\n\n  describeFieldGroup() {\n    let fieldName = this.node.name;\n    if (this.parent && this.node.nodegroup_id && this.parent.$) {\n      const nodegroup = this.parent.$.model.getNodeObjects().get(this.node.nodegroup_id);\n      if (nodegroup && this.parent.__) {\n        fieldName = `${this.parent.__.wkrm.modelName} - ${nodegroup.name}`;\n      }\n    }\n    return fieldName;\n  }\n\n  constructor(\n    node: StaticNode,\n    tile: StaticTile | null,\n    value: any,\n    parent: IRIVM<any> | null,\n    childNodes: Map<string, StaticNode>,\n    inner: boolean | PseudoValue<ISemantic>,\n  ) {\n    this.node = node;\n    this.tile = tile;\n    this.independent = tile === null;\n    if (!parent) {\n      throw Error(\"Must have a parent or parent class for a pseudo-node\");\n    }\n    this.parent = parent;\n    this.parentNode = null;\n    this.childNodes = childNodes;\n    this.value = value;\n    this.accessed = false;\n    this.originalTile = tile;\n    this.datatype = node.datatype;\n    if (inner instanceof PseudoValue) {\n      this.isOuter = true;\n      this.inner = inner;\n    }\n    if (inner === true) {\n      this.isInner = true;\n      this.datatype = 'semantic';\n    }\n  }\n\n  // TODO deepcopy\n  //\n\n  getParentTileId() {\n    return this.tile ? this.tile.parenttile_id : null;\n  }\n\n  async getTile(): Promise<[StaticTile | null, any[]]> {\n    await this.updateValue();\n\n    let relationships: Array<any> = [];\n\n    if (this.inner) {\n      [this.tile, relationships] = await this.inner.getTile();\n    }\n\n    let tileValue;\n    if (this.value !== null) {\n      // It may be better to make this fully async if there's a performance benefit.\n      const [newTileValue, ownRelationships] = await (await this.value).__asTileData();\n      tileValue = newTileValue;\n      relationships = [...relationships, ...ownRelationships];\n    } else {\n      tileValue = null;\n    }\n    // if isinstance(tile_value, tuple):\n    //     relationships = [\n    //         relationship\n    //         if isinstance(relationship, tuple)\n    //         else (self.tile.nodegroup_id, self.node.nodeid, relationship)\n    //         for relationship in tile_value[1]\n    //     ]\n    //     tile_value = tile_value[0]\n    if (!this.tile) {\n      throw Error();\n    }\n    this.tile.data = this.tile.data || {};\n    if (tileValue === null) {\n      if (this.tile.data.get(this.node.nodeid)) {\n        this.tile.data.delete(this.node.nodeid);\n      }\n    } else {\n      this.tile.data.set(this.node.nodeid, tileValue);\n    }\n    const tile = this.independent ? this.tile : null;\n\n    // TODO relationships\n    return [tile, relationships];\n  }\n\n  clear() {\n    this.value = null;\n    if (this.tile && this.tile.data && this.tile.data.has(this.node.nodeid)) {\n      this.tile.data.delete(this.node.nodeid);\n    }\n  }\n\n  updateValue(tile?: StaticTile | null): AttrPromise<VM> {\n    if (tile) {\n      this.tile = tile;\n    }\n    this.accessed = true;\n    if (this.inner) {\n      this.inner.accessed = true;\n    }\n    if (!this.tile) {\n      if (!this.node) {\n        throw Error(\"Empty tile\");\n      }\n      if (this.inner) {\n        return new AttrPromise(async (resolve) => {\n          const tile = await this.inner?.getTile();\n          resolve(this.updateValue(tile ? tile[0] : undefined));\n        });\n      }\n      if (!this.tile) {\n        // NB: You may see issues where the nodegroup is null because it is the root node,\n        // and a node below is not marked as a collector, so tries to fill its tile in\n        // A cardinality n node below the root should be a collector.\n        this.tile = new StaticTile({\n          nodegroup_id: this.node.nodegroup_id || \"\",\n          tileid: null,\n          data: new Map<string, any>(),\n          sortorder: this.node.sortorder,\n          resourceinstance_id: \"\",\n          parenttile_id: null,\n          provisionaledits: null,\n          ensureId: () => \"\"\n        });\n        // this.relationships = [];\n      }\n    }\n    if (this.valueLoaded === false) {\n      this.valueLoaded = undefined;\n      let data: any;\n      if (\n        this.value === null &&\n        this.tile.data !== null &&\n        this.tile.data.has(this.node.nodeid) &&\n        this.datatype !== 'semantic' // Semantic nodes only have placeholder data\n      ) {\n        data = this.tile.data.get(this.node.nodeid);\n      } else {\n        data = this.value;\n      }\n\n      if (this.isOuter && typeof data === 'object' && this.inner && data) {\n        let outerData = undefined;\n        if (\"_\" in data && !data.constructor) {\n          outerData = data[\"_\"];\n          delete data[\"_\"];\n          this.inner.getValue().then((v: ISemantic | null) => v && v.update(data));\n          data = outerData;\n        } else if (data instanceof Map && data.has(\"_\")) {\n          outerData = data.get(\"_\");\n          data.delete(\"_\");\n          this.inner.getValue().then((v: ISemantic | null) => v && v.update(data));\n          data = outerData;\n        }\n      }\n      const vm = getViewModel(\n        this,\n        this.tile,\n        this.node,\n        data,\n        this.parent,\n        this.childNodes,\n        this.isInner\n      );\n\n      const resolveAttr = (vm: IViewModel) => {\n        if (vm !== null && vm instanceof Object) {\n          vm.__parentPseudo = this;\n          if (this.isOuter && this.inner) {\n            vm._ = this.inner.getValue();\n          }\n\n          this.valueLoaded = true;\n        }\n        return vm;\n      };\n      this.value = new AttrPromise((resolve) => {\n        vm.then((vm) => resolve(vm ? resolveAttr(vm) : vm));\n      });\n    }\n\n    return this.value;\n  }\n\n  public getValue(): AttrPromise<VM | null> {\n    return this.updateValue();\n  }\n\n  // @value.setter\n  // def value(this, value):\n\n  getLength() {\n    return this.getChildren().length;\n  }\n\n  async getChildTypes() {\n    await this.updateValue();\n    let childTypes = {};\n    if (this.value && this.value instanceof Object && 'getChildTypes' in this.value && typeof this.value.getChildTypes === 'function') {\n      childTypes = this.value.getChildTypes();\n    }\n    if (this.inner) {\n      Object.assign(childTypes, this.inner.getChildTypes());\n    }\n    return childTypes;\n  }\n\n  getChildren(direct = null): IPseudo[] {\n    let children = [];\n    if (this.value && this.value instanceof Object && 'getChildren' in this.value && typeof this.value.getChildren === 'function') {\n      children = this.value.getChildren(direct);\n    }\n    if (this.inner) {\n      children = [...children, ...this.inner.getChildren(direct)];\n    }\n    return children;\n  }\n\n  async forJson(): Promise<{[key: string]: any} | {[key: string]: any}[] | string | number | boolean | null> {\n    const value = (await this.getValue());\n    return value instanceof Object ? value.forJson() : value;\n  }\n}\n\nclass PseudoList extends Array implements IPseudo {\n  node: StaticNode | undefined = undefined;\n  parent: IRIVM<any> | null | undefined = undefined;\n  parentNode: PseudoValue<any> | null = null;\n  tile: StaticTile | undefined;\n  parenttileId: string | undefined;\n  ghostChildren: Set<PseudoValue<any>> | null = null;\n  isOuter: boolean = false;\n\n  isIterable(): boolean {\n    return true;\n  }\n\n  async sorted() {\n    const resolved = await Promise.all(this.map(async (pn) => await pn));\n    const test = [];\n    const sorted = resolved.sort((a, b) => {\n      const vals = [a, b].map(val => {\n        if (val && a.__parentPseudo && a.__parentPseudo.tile) {\n          if (val.__parentPseudo.tile.sortorder > 0) {\n            // RMV\n            test.push(1);\n          }\n          return val.__parentPseudo.tile.sortorder;\n        } else {\n          return 0;\n        }\n      });\n      return vals[0] - vals[1];\n    });\n    return sorted;\n  }\n\n  describeField() {\n    if (!this.node) {\n      return \"[(uninitialized node)]\";\n    }\n\n    let fieldName = this.node.name;\n    if (this.parent && this.parent.__) {\n      fieldName = `${this.parent.__.wkrm.modelName} - ${fieldName}`;\n    }\n    return `[${fieldName}]`;\n  }\n\n  describeFieldGroup() {\n    if (!this.node) {\n      return \"[(uninitialized node)]\";\n    }\n\n    let fieldName = this.node.name;\n    if (this.parent && this.node.nodegroup_id && this.parent.$) {\n      const nodegroup = this.parent.$.model.getNodeObjects().get(this.node.nodegroup_id);\n      if (nodegroup && this.parent.__) {\n        fieldName = `${this.parent.__.wkrm.modelName} - ${nodegroup.name}`;\n      }\n    }\n    return `[${fieldName}]`;\n  }\n\n  // Otherwise interferes with Array methods;\n  initialize(node: StaticNode, parent: IRIVM<any> | null) {\n    this.node = node;\n    if (Array.isArray(this.node)) {\n      throw Error(\"Cannot make a list of lists\");\n    }\n    if (!parent) {\n      throw Error(\"Must have a parent or parent class for a pseudo-node\");\n    }\n    this.parent = parent;\n    this.tile = undefined;\n    this.parenttileId = undefined;\n    this.ghostChildren = new Set();\n  }\n\n  async forJson(): Promise<{[key: string]: any}[]> {\n    const array: {[key: string]: any}[] = Array.from(\n      (await this.sorted()).map(\n        async (entry: Promise<IViewModel> | IViewModel) => {\n          const value = await entry;\n          return (value && value instanceof Object && value.forJson) ? value.forJson() : value;\n        }\n      )\n    );\n    return Promise.all(array);\n  }\n\n  getValue(): AttrPromise<PseudoList> {\n    return new AttrPromise(resolve => resolve(this));\n  }\n\n  toString() {\n    return `<PL: ${this.length}>`;\n  }\n}\n\n// Fix wkri type.\nfunction makePseudoCls(\n  model: IModelWrapper<any>,\n  key: string,\n  single: boolean,\n  tile: StaticTile | null = null,\n  wkri: any | null = null,\n): PseudoList | PseudoValue<any> | PseudoUnavailable {\n  const nodeObjs = model.getNodeObjectsByAlias();\n  const nodeObj = nodeObjs.get(key);\n  if (!nodeObj) {\n    throw Error(\"Could not find node by alias\");\n  }\n\n  const nodegroups = model.getNodegroupObjects();\n  const nodegroup = nodegroups.get(nodeObj.nodegroup_id || \"\");\n\n  let value = null;\n  if (\n    nodeObj.nodegroup_id &&\n    nodeObj.is_collector &&\n    nodegroup &&\n    nodegroup.cardinality == \"n\" &&\n    !single\n  ) {\n    value = new PseudoList();\n    value.initialize(nodeObj, wkri);\n  }\n  if (value === null || tile) {\n    let nodeValue;\n    const isPermitted = model.isNodegroupPermitted(nodeObj.nodegroup_id || '', tile, nodeObjs);\n    if (isPermitted) {\n      const childNodes: Map<string, StaticNode> = model.getChildNodes(nodeObj.nodeid);\n      let inner: boolean | PseudoValue<any> = false;\n      if (childNodes && childNodes.size && nodeObj.datatype !== 'semantic') {\n        inner = new PseudoValue(nodeObj, tile, null, wkri, childNodes, true);\n      }\n      nodeValue = new PseudoValue(nodeObj, tile, null, wkri, inner !== false ? new Map() : childNodes, inner);\n    } else {\n      nodeValue = new PseudoUnavailable(nodeObj);\n    }\n    // If we have a tile in a list, add it\n    if (value) {\n      value.push(nodeValue.getValue());\n    } else {\n      value = nodeValue;\n    }\n  }\n\n  return value;\n}\n\nexport { PseudoValue, PseudoList, PseudoUnavailable, makePseudoCls };\n","import { GraphResult, archesClient, ArchesClient, ArchesClientRemote } from './client';\nimport { staticStore } from './staticStore';\nimport { CardComponent, DEFAULT_CARD_COMPONENT, Widget, getDefaultWidgetForNode } from './cards';\nimport {\n  StaticTranslatableString,\n  StaticCollection,\n  StaticConstraint,\n  StaticCard,\n  StaticEdge,\n  StaticCardsXNodesXWidgets,\n  StaticFunctionsXGraphs,\n  StaticTile,\n  StaticGraph,\n  StaticNode,\n  StaticNodegroup,\n  StaticResource,\n  StaticResourceDescriptors,\n  StaticGraphMeta,\n  IStaticDescriptorConfig\n} from \"./static-types\";\nimport { makePseudoCls, PseudoList } from \"./pseudos.ts\";\nimport { DEFAULT_LANGUAGE, ResourceInstanceViewModel, ValueList, viewContext, SemanticViewModel } from \"./viewModels.ts\";\nimport { CheckPermission, GetMeta, IRIVM, IStringKeyedObject, IPseudo, IInstanceWrapper, IViewModel, ResourceInstanceViewModelConstructor } from \"./interfaces\";\nimport { } from \"./nodeConfig.ts\";\nimport { generateUuidv5, AttrPromise } from \"./utils\";\n\nconst MAX_GRAPH_DEPTH = 100;\nconst DESCRIPTOR_FUNCTION_ID = \"60000000-0000-0000-0000-000000000001\";\n\nclass WKRM {\n  modelName: string;\n  modelClassName: string;\n  graphId: string;\n  meta: StaticGraphMeta;\n\n  constructor(meta: StaticGraphMeta) {\n    let name: {[lang: string]: string} | string | undefined;\n    if (meta.name instanceof Object) {\n      name = meta.name[DEFAULT_LANGUAGE].toString();\n    } else {\n      name = meta.name;\n    }\n    this.modelName = name || \"Unnamed\";\n    this.graphId = meta.graphid;\n    this.modelClassName = (meta.slug || this.modelName)\n      .replace(/[_-]/g, \" \")\n      .replace(/\\s(.)/g, (c: string) => c.toUpperCase())\n      .replace(/\\s/g, \"\");\n    this.modelClassName = this.modelClassName[0].toUpperCase() + this.modelClassName.slice(1);\n    this.meta = meta;\n  }\n}\n\nclass ConfigurationOptions {\n  graphs: Array<string> | null | boolean;\n  eagerLoadGraphs: boolean = false;\n\n  constructor() {\n    this.graphs = null;\n  }\n}\n\nclass ResourceInstanceWrapper<RIVM extends IRIVM<RIVM>> implements IInstanceWrapper<RIVM> {\n  wkri: RIVM;\n  model: ResourceModelWrapper<RIVM>;\n\n  resource: StaticResource | null | false ;\n  valueList: ValueList<RIVM>;\n  cache: {[tileId: string]: {[nodeId: string]: IStringKeyedObject}} | undefined;\n  scopes?: string[];\n  metadata?: {[key: string]: string};\n\n  constructor(\n    wkri: RIVM,\n    model: ResourceModelWrapper<RIVM>,\n    resource: StaticResource | null | false, // False to disable dynamic resource-loading\n    pruneTiles: boolean = true\n  ) {\n    this.wkri = wkri;\n    this.model = model;\n    if (resource) {\n      this.model.stripTiles(resource);\n    }\n    this.resource = resource;\n    this.valueList = new ValueList(new Map<string, any>(), new Map<string, boolean>(), this, []);\n    this.cache = resource ? resource.__cache : undefined;\n    this.scopes = resource ? resource.__scopes : undefined;\n    this.metadata = resource ? resource.metadata : undefined;\n    if (pruneTiles && this.resource) {\n      this.pruneResourceTiles()\n    }\n  }\n\n  pruneResourceTiles(): undefined {\n    if (!this.resource) {\n      console.warn(\"Trying to prune tiles for an empty resource\", this.wkri.modelClassName);\n      return;\n    }\n    this.resource.tiles = (this.resource.tiles || []).filter((tile: StaticTile) => {\n      return this.model.isNodegroupPermitted(tile.nodegroup_id || '', tile);\n    });\n  }\n\n  async loadNodes(aliases: Array<string>): Promise<void> {\n    for (const key of aliases) {\n      await this.valueList.retrieve(key);\n    }\n  }\n\n  async getName(update: boolean = false) {\n    let resourceName = this.resource && this.resource.resourceinstance.name;\n    if (update || !resourceName) {\n      const descriptors = await this.getDescriptors(update);\n      resourceName = (descriptors && descriptors.name) || resourceName || '<Unnamed>';\n      if (this.resource && this.resource.resourceinstance) {\n        this.resource.resourceinstance.name = resourceName;\n      }\n    }\n    return resourceName;\n  }\n\n  async getDescriptors(update: boolean = false) {\n    let descriptors = this.resource && this.resource.resourceinstance.descriptors;\n    if (update || !descriptors || descriptors.isEmpty()) {\n      descriptors = new StaticResourceDescriptors();\n      let descriptorConfig: IStaticDescriptorConfig | undefined = undefined;\n      if (this.model.graph.functions_x_graphs) {\n        const descriptorNode = this.model.graph.functions_x_graphs.find(node => node.function_id === DESCRIPTOR_FUNCTION_ID);\n        if (descriptorNode) {\n          descriptorConfig = descriptorNode.config;\n        }\n      }\n      const nodes = this.model.getNodeObjects();\n      if (descriptorConfig) {\n        for (const [descriptor, config] of Object.entries(descriptorConfig.descriptor_types)) {\n          const semanticNode = nodes.get(config.nodegroup_id);\n          let description = config.string_template;\n          if (!description) {\n            continue;\n          }\n          let requestedNodes = description.match(/<[A-Za-z _-]*>/g) || [];\n          const relevantNodes = [...nodes.values()].filter(node => node.nodegroup_id === config.nodegroup_id && [...requestedNodes].includes(`<${node.name}>`)).map(node => [node.name, node.alias || '']);\n          let relevantValues: [string, string | undefined][] = [];\n          // First try and see if we can find all of these on one tile, for consistency.\n          if (semanticNode) {\n            let semanticValue = await (await this.valueList.retrieve(semanticNode.alias || ''))[0];\n            if (semanticValue instanceof PseudoList) {\n              semanticValue = await semanticValue[0];\n            } else if (semanticValue.inner) {\n              // TODO: Do we need to re-add the e.g. stringviewmodel as a <...> variable?\n              relevantValues.push([semanticNode.name || '', await semanticValue.getValue()]);\n              semanticValue = await semanticValue.inner.getValue();\n            } else {\n              semanticValue = await semanticValue.getValue();\n            }\n            if (semanticValue) {\n              relevantValues = [...relevantValues, ...await Promise.all(relevantNodes.filter(([_, alias]) => semanticValue.__has(alias)).map(([name, alias]) => semanticValue[alias].then((value: IViewModel) => [name, value])))];\n            }\n          }\n          if (relevantValues) {\n            description = relevantValues.reduce((desc, [name, value]) => value ? desc.replace(`<${name}>`, value) : desc, description);\n          }\n          requestedNodes = description.match(/<[A-Za-z _-]*>/g) || [];\n          if (requestedNodes.length) {\n            relevantValues = await Promise.all(relevantNodes.map(([name, alias]) => this.valueList.retrieve(alias).then((values: string[]): [string, string | undefined] => [name, values ? values[0] : undefined])));\n            if (relevantValues) {\n              description = relevantValues.reduce((desc, [name, value]) => value ? desc.replace(`<${name}>`, value) : desc, description);\n            }\n          }\n          descriptors[descriptor] = description;\n        }\n      }\n    }\n    if (this.resource && this.resource.resourceinstance) {\n      this.resource.resourceinstance.descriptors = descriptors;\n      if (descriptors.name) {\n        this.resource.resourceinstance.descriptors.name = descriptors.name;\n      }\n    }\n    return descriptors;\n  }\n\n  addPseudo(childNode: StaticNode, tile: StaticTile | null, node: StaticNode): IPseudo {\n    const key = childNode.alias;\n    if (!key) {\n      throw Error(`Cannot add a pseudo node with no alias ${childNode.nodeid}`);\n    }\n    const child = makePseudoCls(\n      this.model,\n      key,\n      false,\n      (!childNode.is_collector && childNode.nodegroup_id === node.nodegroup_id) ? tile : null, // Does it share a tile\n      this.wkri,\n    );\n\n    const valueList: ValueList<any> = this.valueList;\n    valueList.setDefault(key, []).then((val: Array<any>) => val.push(child));\n    return child;\n  }\n\n  allEntries(): MapIterator<[string, Array<IPseudo> | false | null]> {\n    return this.valueList.values.entries()\n  }\n\n  async keys() {\n    return (await this.getRootViewModel()).keys();\n  }\n\n  async values() {\n    return (await this.getRootViewModel()).values();\n  }\n\n  async entries() {\n    return (await this.getRootViewModel()).entries();\n  }\n\n  async getRootViewModel(): Promise<SemanticViewModel> {\n    const root = await this.getRoot();\n    let value: IViewModel | null = null;\n    if (root) {\n      const rootValue = await root.getValue();\n      if (!Array.isArray(rootValue)) {\n        value = rootValue;\n      }\n    }\n    if (!value || !(value instanceof SemanticViewModel)) {\n      throw Error(`Tried to get root on ${this.model.wkrm.modelClassName}, which has no root`);\n    }\n    return value;\n  }\n\n  getOrmAttribute(key: string): AttrPromise<IViewModel> {\n    let promise: Promise<void>;\n    if (this.resource === null) {\n      promise = this.model.findStatic(this.wkri.id).then(resource => {\n        this.resource = resource;\n      }).then(() => this.populate(true));\n    } else {\n      promise = new Promise((resolve) => { resolve(); });\n    }\n\n    // TODO remapping\n    return new AttrPromise(resolve => {\n      promise.then(() => this.getRootViewModel()).then(root => resolve(root[key]));\n    });\n  }\n\n  async getRoot(): Promise<IPseudo | undefined> {\n    const values = this.valueList;\n    const node = this.model.getRootNode();\n    if (node) {\n      let value;\n      const alias = node.alias;\n      if (!(typeof alias == 'string')) {\n        throw Error(`Alias missing for node ${node.nodeid}`);\n      }\n      await values.setDefault(alias, []);\n      const nodeValues = await values.get(alias);\n\n      if (nodeValues.length > 1) {\n        throw Error(\"Cannot have multiple root tiles\");\n      } else if (nodeValues.length == 1) {\n        value = nodeValues[0];\n      } else {\n        value = makePseudoCls(this.model, alias, false, null, this.wkri);\n        values.set(alias, [value]);\n      }\n      return value;\n    }\n  }\n\n  setOrmAttribute(key: string, value: any) {\n    // TODO remapping\n    return this.getRootViewModel().then((root) => {\n      if (root) {\n        root[key] = value;\n      } else {\n        throw Error(`Tried to set ${key} on ${self}, which has no root`);\n      }\n    });\n  }\n\n  async ensureNodegroup(\n    allValues: Map<string, any>,\n    allNodegroups: Map<string, boolean | Promise<any>>,\n    nodegroupId: string,\n    nodeObjs: Map<string, StaticNode>,\n    nodegroupObjs: Map<string, StaticNodegroup>,\n    edges: Map<string, string[]>,\n    addIfMissing: boolean,\n    tiles: StaticTile[] | null,\n    doImpliedNodegroups: boolean = true\n  ): Promise<[Map<string, any>, Set<string>]> {\n    const impliedNodegroups: Set<string> = new Set();\n    const sentinel = allNodegroups.get(nodegroupId); // no action required if pending\n    let newValues = new Map();\n\n    if (sentinel === false || (addIfMissing && sentinel === undefined)) {\n      [...nodeObjs.values()].filter((node: StaticNode) => {\n        return node.nodegroup_id === nodegroupId;\n      }).forEach((node: StaticNode) => allValues.delete(node.alias || ''));\n      let nodegroupTiles: (StaticTile | null)[];\n      if (tiles === null) {\n        nodegroupTiles = [];\n        console.error(\"Tiles must be provided and cannot be lazy-loaded yet\");\n      } else {\n        nodegroupTiles = tiles.filter(\n          (tile) => tile.nodegroup_id == nodegroupId && this.model.isNodegroupPermitted(nodegroupId, tile)\n        );\n        if (nodegroupTiles.length == 0 && addIfMissing) {\n          nodegroupTiles = [null];\n        }\n        const rgValues = await this.valuesFromResourceNodegroup(\n          allValues,\n          nodegroupTiles,\n          nodegroupId,\n          nodeObjs,\n          edges,\n        );\n        newValues = rgValues[0];\n        const newImpliedNodegroups: Set<string> = rgValues[1];\n\n        [...newValues.entries()].forEach((entry) => {\n          if (entry[1] !== undefined) {\n            allValues.set(entry[0], entry[1]);\n          }\n        });\n        [...newImpliedNodegroups].forEach((v) => {\n          impliedNodegroups.add(v);\n        });\n        allNodegroups.set(nodegroupId, true);\n      }\n    }\n\n    // RMV double-check against Python logic\n    if (doImpliedNodegroups) {\n      for (const nodegroupId of [...impliedNodegroups]) {\n        // TODO: why are we not keeping implied nodegroups?\n        const [impliedValues] = await this.ensureNodegroup(\n          allValues,\n          allNodegroups,\n          nodegroupId,\n          nodeObjs,\n          nodegroupObjs,\n          edges,\n          true,\n          tiles, // RMV different from Python\n          true\n        );\n        for (const [key, value] of impliedValues) {\n          newValues.set(key, value);\n        }\n      }\n      impliedNodegroups.clear();\n    }\n\n    return [newValues, impliedNodegroups];\n  }\n\n  async populate(lazy: boolean): Promise<void> {\n    const nodeObjs = this.model.getNodeObjects();\n    const nodegroupObjs = this.model.getNodegroupObjects();\n    const edges = this.model.getEdges();\n    // FIXME: this needs to be nodeObjs to ensure tiles\n    // whose nodegroup node is in a different nodegroup\n    // (e.g. children of designation_and_protection_timespan)\n    // get loaded - however, just doing that drops performance\n    // by half or two-thirds, so a less wasteful approach is needed.\n    const allValues: Map<string, any> = new Map();\n    const allNodegroups: Map<string, any> = new Map([...nodegroupObjs.keys()].map((id: string) => {\n      return [id || \"\", false];\n    }));\n    //[...nodegroupObjs.keys()].map((id: string) => {\n    //  const node = nodeObjs.get(id);\n    //  if (!node) {\n    //    throw Error(`Could not find node for nodegroup ${id}`);\n    //  }\n    //  allValues.set(node.alias || \"\", false);\n    //});\n    const rootNode = this.model.getRootNode();\n\n    if (rootNode.alias === null) {\n      throw Error(\"Cannot populate a model with no proper root node\");\n    }\n\n    allValues.set(rootNode.alias, false);\n\n    let tiles = null;\n    if (!lazy && this.resource) {\n      tiles = this.resource.tiles;\n      let impliedNodegroups = new Set<string>();\n      for (const [ng] of nodegroupObjs) {\n        const [_, newImpliedNodegroups] = await this.ensureNodegroup(\n          allValues,\n          allNodegroups,\n          ng,\n          nodeObjs,\n          nodegroupObjs,\n          edges,\n          true, // RMV: check vs python\n          tiles,\n          false\n        );\n\n        for (const impliedNodegroup of [...newImpliedNodegroups]) {\n          impliedNodegroups.add(impliedNodegroup);\n        }\n        impliedNodegroups.delete(ng);\n      }\n\n      while (impliedNodegroups.size) {\n        const newImpliedNodegroups = new Set<string>();\n        for (const nodegroupId of [...impliedNodegroups]) {\n          const currentValue = allNodegroups.get(nodegroupId);\n          if (currentValue === false || currentValue === undefined) {\n            const [_, newImpliedNodegroups] = await this.ensureNodegroup(\n              allValues,\n              allNodegroups,\n              nodegroupId,\n              nodeObjs,\n              nodegroupObjs,\n              edges,\n              true,\n              tiles, // RMV different from Python\n              true\n            );\n            for (const impliedNodegroup of [...newImpliedNodegroups]) {\n              newImpliedNodegroups.add(impliedNodegroup);\n            }\n          }\n        }\n        impliedNodegroups = newImpliedNodegroups;\n      }\n    } else if (this.resource) {\n      this.model.stripTiles(this.resource);\n    }\n\n    this.valueList = new ValueList(\n      allValues,\n      allNodegroups,\n      this,\n      this.resource ? this.resource.tiles : null,\n    );\n  }\n\n  async getValueCache(build: boolean = true, getMeta: GetMeta = undefined): Promise<{[tileId: string]: {[nodeId: string]: IStringKeyedObject}} | undefined> {\n    if (build) {\n      this.cache = await this.buildValueCache(getMeta);\n    }\n    return this.cache;\n  }\n\n  async buildValueCache(getMeta: GetMeta): Promise<{[tileId: string]: {[nodeId: string]: IStringKeyedObject}}> {\n    const cacheByTile: {[tileId: string]: {[nodeId: string]: IStringKeyedObject}} = {};\n    for (let pseudos of this.valueList.values.values()) {\n      pseudos = await pseudos;\n      if (pseudos) {\n        await Promise.all(pseudos.map(async (pseudo: IPseudo) => {\n          const value = await pseudo.getValue();\n          // We do not try to cache pseudolists\n          if (pseudo.tile && value && (!Array.isArray(pseudo))) {\n            // @ts-expect-error this can be IViewModel[] while using a pseudolist\n            const cacheJson = await value.__forJsonCache(getMeta); // caching JSON\n            if (cacheJson) {\n              const tileId = pseudo.tile.ensureId();\n              const nodeId = pseudo.node.nodeid;\n              if (!(tileId in cacheByTile)) {\n                cacheByTile[tileId] = {};\n              }\n              if (!(nodeId in cacheByTile[tileId])) {\n                cacheByTile[tileId][nodeId] = {};\n              }\n              cacheByTile[tileId][nodeId] = cacheJson;\n            }\n          }\n        }));\n      }\n    }\n    return cacheByTile;\n  }\n\n  async valuesFromResourceNodegroup(\n    existingValues: Map<string, any>,\n    nodegroupTiles: (StaticTile | null)[],\n    nodegroupId: string,\n    nodeObjs: Map<string, StaticNode>,\n    edges: Map<string, string[]>,\n  ): Promise<[Map<string, any>, Set<string>]> {\n    const allValues = new Map<string, any>();\n\n    const impliedNodegroups = new Set<string>();\n    const impliedNodes: Map<string, [StaticNode, StaticTile]> = new Map();\n\n    const nodesUnseen = new Set(\n      [...nodeObjs.values()]\n        .filter((node) => node.nodegroup_id == nodegroupId)\n        .map((node) => node.alias),\n    );\n    const tileNodesSeen: Set<[string, string]> = new Set();\n    const _addPseudo = async (node: StaticNode, tile: StaticTile | null) => {\n      const key = node.alias || \"\";\n      nodesUnseen.delete(node.alias);\n      const tileid = tile && tile.tileid;\n      if (tileid) {\n        tileNodesSeen.add([node.nodeid, tileid]);\n      }\n      let existing = existingValues.get(key);\n      if (existing instanceof Promise) {\n        existing = await existing;\n      }\n      if (existing !== false && existing !== undefined) {\n        // This might be correct - confirm.\n        // console.warn(`Tried to load node twice: ${key} (${node.nodeid}<${node.nodegroup_id})`, nodegroupId);\n        allValues.set(key, existing);\n      }\n      if (!allValues.has(key)) {\n        allValues.set(key, []);\n      }\n      const pseudoNode = makePseudoCls(this.model, key, false, tile, this.wkri);\n      // We shouldn't have to take care of this case, as it should already\n      // be included below.\n      // if tile.parenttile_id:\n      for (const [domain, ranges] of edges) {\n        if (ranges.includes(node.nodeid)) {\n          const domainNode = nodeObjs.get(domain);\n          if (!domainNode) {\n            throw Error(\"Edge error in graph\");\n          }\n          const toAdd = domainNode.nodegroup_id\n            ? domainNode.nodegroup_id\n            : '';\n          if (toAdd && toAdd !== nodegroupId) {\n            impliedNodegroups.add(toAdd);\n          }\n          if (domainNode.nodegroup_id && tile && domainNode.nodegroup_id === tile.nodegroup_id && domainNode.nodegroup_id !== domainNode.nodeid && tileid && !impliedNodes.has(domainNode.nodeid + tileid)) {\n            impliedNodes.set(domainNode.nodeid + tileid, [domainNode, tile]);\n          }\n          break;\n        }\n      }\n      if (Array.isArray(pseudoNode)) {\n        const value = allValues.get(key);\n        if (value !== undefined && value !== false) {\n          for (const pseudoList of allValues.get(key)) {\n            if (!(pseudoList instanceof PseudoList) || !(pseudoNode instanceof PseudoList)) {\n              throw Error(`Should be all lists not ${typeof pseudoList} and ${typeof pseudoNode}`);\n            }\n\n            if (pseudoList.parentNode == pseudoNode.parentNode) {\n              for (const ps of pseudoNode) {\n                pseudoList.push(ps);\n              }\n              return;\n            }\n          }\n        }\n      }\n      allValues.get(key).push(pseudoNode);\n    };\n\n    for (const tile of nodegroupTiles) {\n      const parentNode = nodeObjs.get(nodegroupId);\n      if (parentNode === undefined) {\n        continue;\n      }\n      if (!parentNode.nodegroup_id || parentNode.nodegroup_id == nodegroupId) {\n        await _addPseudo(parentNode, tile);\n      }\n\n      if (tile) {\n        const tileNodes = new Map();\n        for (const [key, value] of [...tile.data.entries()]) {\n          tileNodes.set(key, value);\n        }\n\n        // Semantic nodes in this tile should always have a pseudo-node\n        [...nodeObjs.values()].filter((node: StaticNode) => {\n          return node.nodegroup_id === nodegroupId && !tileNodes.get(node.nodeid) && node.datatype === 'semantic';\n        }).forEach((node: StaticNode) => tileNodes.set(node.nodeid, {}));\n\n        if (!tileNodes.has(tile.nodegroup_id)) {\n          tileNodes.set(tile.nodegroup_id, {});\n        }\n        for (const [nodeid, nodeValue] of [...tileNodes.entries()]) {\n          if (nodeid == nodegroupId) {\n            // RMV is this correct?\n            continue;\n          }\n          const node = nodeObjs.get(nodeid);\n          if (!node) {\n            throw Error(`Unknown node in nodegroup: ${nodeid} in ${nodegroupId}`);\n          }\n          if (nodeValue !== null) {\n            await _addPseudo(node, tile);\n          }\n        }\n      }\n    }\n    while (impliedNodes.size > 0) {\n      const value = impliedNodes.entries().next().value;\n      if (value) {\n        const [node, tile] = value[1];\n        // If nodeid!=nodegroup_id, then it has its own tile.\n        if (tile.tileid && !tileNodesSeen.has([node.nodeid, tile.tileid])) {\n          await _addPseudo(node, tile);\n        }\n        impliedNodes.delete(value[0]);\n      }\n    }\n    // Remove any \"unloaded\" sentinel values so we do not try and\n    // reload this nodegroup.\n    [...nodesUnseen.keys()].forEach((nodeUnseen) => {\n      // if (allValues.get(nodeUnseen) === false) { // TODO: work out why this is not necessary\n      if (nodeUnseen) {\n        allValues.set(nodeUnseen, undefined);\n      }\n      // }\n    });\n    return [allValues, impliedNodegroups];\n  }\n}\n\ntype GraphMutation = (baseGraph: StaticGraph) => StaticGraph;\n\nclass GraphMutator {\n  baseGraph: StaticGraph;\n  mutations: GraphMutation[];\n\n  autocreateCard: boolean;\n\n  constructor(baseGraph: StaticGraph, options: {\n    autocreateCard?: boolean\n  } = {}) {\n    this.baseGraph = baseGraph;\n    this.mutations = [];\n    this.autocreateCard = options.autocreateCard === undefined || options.autocreateCard;\n  }\n\n  _generateUuidv5(key: string) {\n    return generateUuidv5(['graph', this.baseGraph.graphid], key);\n  }\n\n  _generateEdge(fromNode: string, toNode: string, ontologyProperty: string, name?: string, description?: string) {\n    const edgeId = this._generateUuidv5(`node-${fromNode}-${toNode}`);\n    return new StaticEdge({\n      description: description || null,\n      domainnode_id: fromNode,\n      edgeid: edgeId,\n      graph_id: this.baseGraph.graphid,\n      name: name || null,\n      rangenode_id: toNode,\n      ontologyproperty: ontologyProperty,\n    });\n  }\n\n  addSemanticNode(parentAlias: string | null, alias: string, name: string, cardinality: 'n' | '1', ontologyClass: string, parentProperty: string, description?: string, options: {\n    exportable?: boolean,\n    fieldname?: string,\n    hascustomalias?: boolean;\n    is_collector?: boolean;\n    isrequired?: boolean;\n    issearchable?: boolean;\n    istopnode?: boolean;\n    sortorder?: number;\n  } = {}, config?: {[key: string]: any}) {\n    return this._addGenericNode(\n      parentAlias,\n      alias,\n      name,\n      cardinality,\n      \"semantic\",\n      ontologyClass,\n      parentProperty,\n      description,\n      options,\n      config\n    );\n  }\n\n  addConceptNode(parentAlias: string | null, alias: string, name: string, collection: StaticCollection, cardinality: 'n' | '1', ontologyClass: string, parentProperty: string, description?: string, options: {\n    is_list?: boolean,\n    exportable?: boolean,\n    fieldname?: string,\n    hascustomalias?: boolean;\n    is_collector?: boolean;\n    isrequired?: boolean;\n    issearchable?: boolean;\n    istopnode?: boolean;\n    sortorder?: number;\n  } = {}, config?: {[key: string]: any}) {\n    config = config || {};\n    if (collection?.id) {\n      config['rdmCollection'] = collection.id\n    }\n    return this._addGenericNode(\n      parentAlias,\n      alias,\n      name,\n      cardinality,\n      options.is_list ? \"concept-list\" : \"concept\",\n      ontologyClass,\n      parentProperty,\n      description,\n      options,\n      config\n    );\n  }\n\n  addCard(nodegroup: string | StaticNodegroup, name: string | StaticTranslatableString, component?: CardComponent, options: {\n    active?: boolean,\n    constraints?: Array<StaticConstraint>,\n    cssclass?: string | null,\n    helpenabled?: boolean,\n    helptext?: string | null | StaticTranslatableString,\n    helptitle?: string | null | StaticTranslatableString,\n    instructions?: string | null | StaticTranslatableString,\n    is_editable?: boolean,\n    description?: string | null,\n    sortorder?: number | null,\n    visible?: boolean\n  } = {}, config?: {[key: string]: any}) {\n    const nodegroupId = typeof nodegroup === 'string' ? nodegroup : nodegroup.nodegroupid;\n    const cardName = name instanceof StaticTranslatableString ? name : new StaticTranslatableString(name);\n    const cardComponent = component || DEFAULT_CARD_COMPONENT;\n    const helptext = options?.helptext && (\n      options.helptext instanceof StaticTranslatableString ?\n        options.helptext : new StaticTranslatableString(options.helptext)\n    );\n    const helptitle = (options?.helptitle && (\n      options.helptitle instanceof StaticTranslatableString ?\n        options.helptitle : new StaticTranslatableString(options.helptitle)\n    ));\n    const instructions = (options?.instructions && (\n      options.instructions instanceof StaticTranslatableString ?\n        options.instructions : new StaticTranslatableString(options.instructions)\n    ));\n    this.mutations.push((graph: StaticGraph) => {\n      graph.cards = graph.cards || [];\n      if (graph.cards.filter(card => card.nodegroup_id === nodegroup).length > 0) {\n        throw Error(`This nodegroup, ${nodegroupId}, already has a card`);\n      }\n      const cardId = this._generateUuidv5(`card-ng-${nodegroupId}`);\n      const card = new StaticCard({\n        active: options.active === undefined ? true : options.active,\n        cardid: cardId,\n        component_id: cardComponent.id,\n        config: config || null,\n        constraints: options.constraints || [],\n        cssclass: options.cssclass || null,\n        description: options.description || null,\n        graph_id: graph.graphid,\n        helpenabled: !!(options.helpenabled || (options.helpenabled === undefined && (helptext || helptitle))),\n        helptext: helptext || new StaticTranslatableString(''),\n        helptitle: helptitle || new StaticTranslatableString(''),\n        instructions: instructions || new StaticTranslatableString(''),\n        is_editable: options.is_editable === undefined ? true : options.is_editable,\n        name: cardName,\n        nodegroup_id: nodegroupId,\n        sortorder: options.sortorder || null,\n        visible: options.visible === undefined ? true : options.visible\n      });\n      graph.cards.push(card);\n      return graph;\n    });\n  }\n\n  addStringNode(parentAlias: string | null, alias: string, name: string, cardinality: 'n' | '1', ontologyClass: string, parentProperty: string, description?: string, options: {\n    exportable?: boolean,\n    fieldname?: string,\n    hascustomalias?: boolean;\n    is_collector?: boolean;\n    isrequired?: boolean;\n    issearchable?: boolean;\n    istopnode?: boolean;\n    sortorder?: number;\n  } = {}, config?: {[key: string]: any}) {\n    return this._addGenericNode(\n      parentAlias,\n      alias,\n      name,\n      cardinality,\n      \"string\",\n      ontologyClass,\n      parentProperty,\n      description,\n      options,\n      config\n    );\n  }\n\n  _addNodegroup(parentAlias: string | null, nodegroupId: string, cardinality: 'n' | '1', name?: StaticTranslatableString) {\n    this.mutations.push((graph: StaticGraph) => {\n      const prnt = parentAlias === null ? graph.root : graph.nodes.find(node => node.alias === parentAlias);\n      if (!prnt) {\n        throw Error(`Missing parent for nodegroup: ${parentAlias}`);\n      }\n      const nodegroup = new StaticNodegroup({\n        cardinality: cardinality,\n        legacygroupid: null,\n        nodegroupid: nodegroupId,\n        parentnodegroup_id: prnt.nodegroup_id\n      });\n      graph.nodegroups.push(nodegroup);\n      return graph;\n    });\n    if (this.autocreateCard) {\n      this.addCard(nodegroupId, name || '(unnamed)');\n    }\n    return this;\n  }\n\n  _addGenericNode(parentAlias: string | null, alias: string, name: string, cardinality: 'n' | '1', datatype: string, ontologyClass: string, parentProperty: string, description?: string, options: {\n    exportable?: boolean,\n    fieldname?: string,\n    hascustomalias?: boolean;\n    is_collector?: boolean;\n    isrequired?: boolean;\n    issearchable?: boolean;\n    istopnode?: boolean;\n    sortorder?: number;\n  } = {}, config?: {[key: string]: any}) {\n    const nodeId = this._generateUuidv5(`node-${alias}`);\n    const node = {\n      alias: alias,\n      config: config || {},\n      datatype: datatype,\n      description: description || null,\n      exportable: options.exportable || false,\n      fieldname: options.fieldname || null,\n      graph_id: this.baseGraph.graphid,\n      hascustomalias: options.hascustomalias || false,\n      is_collector: options.is_collector || false,\n      isrequired: options.isrequired || false,\n      issearchable: options.issearchable || true, // This is the default in Arches I believe\n      istopnode: options.istopnode || false,\n      name: name,\n      nodegroup_id: '',\n      nodeid: nodeId,\n      parentproperty: parentProperty,\n      sortorder: options.sortorder || 0,\n      ontologyclass: ontologyClass,\n      sourcebranchpublication_id: null,\n    };\n    if (cardinality === 'n' || parentAlias === null) {\n      node.nodegroup_id = nodeId;\n      this._addNodegroup(parentAlias, node.nodegroup_id, cardinality, new StaticTranslatableString(name));\n    }\n    this.mutations.push((graph: StaticGraph) => {\n      const prnt = parentAlias === null ? graph.root : graph.nodes.find(node => node.alias === parentAlias);\n      if (!prnt) {\n        throw Error(`Parent node does not exist: ${parentAlias}`);\n      }\n      // FIXME: we assume we are not adding a root node, but nowhere do we say this.\n      node.nodegroup_id = node.nodegroup_id !== '' ? node.nodegroup_id : prnt.nodegroup_id || '';\n      const newNode = new StaticNode(node);\n      graph.nodes.push(newNode);\n      const edge = this._generateEdge(prnt.nodeid, nodeId, parentProperty);\n      graph.edges.push(edge);\n      return graph;\n    });\n\n    if (this.autocreateCard && datatype !== 'semantic') {\n      const widget = getDefaultWidgetForNode(node);\n      const config = widget.getDefaultConfig();\n      config.label = name;\n      this.addWidgetToCard(\n        nodeId,\n        widget,\n        name,\n        config,\n        {\n          sortorder: node.sortorder,\n          silentSkip: true // if, for some reason, the card is not present (i.e. was removed), we should not worry\n        }\n      );\n    }\n    return this;\n  }\n\n  addWidgetToCard(\n    nodeId: string,\n    widget: Widget,\n    name: string,\n    config: {[key: string]: any},\n    options: {\n      sortorder?: number | null,\n      silentSkip?: boolean,\n      visible?: boolean\n    } = {}\n  ): GraphMutator {\n    this.mutations.push((graph: StaticGraph) => {\n      const node = graph.nodes.find(node => node.nodeid === nodeId);\n      if (!node) {\n        throw Error(`Tried to add card to graph ${graph.graphid} for node ${nodeId} but it was not found.`);\n      }\n      const card = graph.cards?.find(card => card.nodegroup_id === node.nodegroup_id);\n\n      if (card) {\n        const cardXNodeXWidgetId = this._generateUuidv5(`cxnxw-${nodeId}-${widget.id}`);\n\n        const cardXNodeXWidget = new StaticCardsXNodesXWidgets({\n          card_id: card.cardid,\n          config: config,\n          id: cardXNodeXWidgetId,\n          label: new StaticTranslatableString(name),\n          node_id: nodeId,\n          sortorder: options.sortorder || 0,\n          visible: options.visible === undefined || options.visible,\n          widget_id: widget.id\n        });\n        graph.cards_x_nodes_x_widgets = graph.cards_x_nodes_x_widgets || [];\n        graph.cards_x_nodes_x_widgets.push(cardXNodeXWidget);\n      } else if (!options.silentSkip) {\n        throw Error(`Failed adding widget for ${nodeId} to card for ${node.nodegroup_id} on graph ${graph.graphid}, as no card for this nodegroup (yet?)`);\n      }\n      return graph;\n    });\n    return this;\n  }\n\n  apply() {\n    if (!this.baseGraph.copy) {\n      throw Error(\"Attempt to build a mutator without a proper StaticGraph base graph\");\n    }\n    // TODO: complete deepcopies\n    const graph = this.baseGraph.copy();\n    return this.mutations.reduce((graph, mutation) => mutation(graph), graph);\n  }\n}\n\nclass ResourceModelWrapper<RIVM extends IRIVM<RIVM>> {\n  wkrm: WKRM;\n  graph: StaticGraph;\n  viewModelClass?: ResourceInstanceViewModelConstructor<RIVM>;\n  permittedNodegroups?: Map<string | null, boolean | CheckPermission>;\n\n  constructor(wkrm: WKRM, graph: StaticGraph, viewModelClass?: ResourceInstanceViewModelConstructor<RIVM>) {\n    this.wkrm = wkrm;\n    this.graph = graph;\n    this.viewModelClass = viewModelClass;\n  }\n\n  // TODO: Switch to getBranches\n  getBranchPublicationIds(accessible?: boolean): string[] {\n    const accessibleOnly = accessible || false;\n    const nodes = [...this.graph.nodes.values()];\n    return [...nodes.reduce(\n      (acc: Set<string>, node: StaticNode): Set<string> => {\n        if (node.sourcebranchpublication_id) {\n          if (accessibleOnly) {\n            if (this.isNodegroupPermitted(node.nodegroup_id || '', null)) {\n              acc.add(node.sourcebranchpublication_id);\n            }\n          } else {\n            acc.add(node.sourcebranchpublication_id);\n          }\n        }\n        return acc;\n      }, new Set()\n    )];\n  }\n\n  getCollections(accessible?: boolean): string[] {\n    const accessibleOnly = accessible || false;\n    const nodes = [...this.graph.nodes.values()];\n    return [...nodes.reduce(\n      (acc: Set<string>, node: StaticNode): Set<string> => {\n        if (['concept', 'concept-list'].includes(node.datatype) && node.config?.rdmCollection) {\n          if (accessibleOnly) {\n            if (this.isNodegroupPermitted(node.nodegroup_id || '', null)) {\n              acc.add(node.config.rdmCollection);\n            }\n          } else {\n            acc.add(node.config.rdmCollection);\n          }\n        }\n        return acc;\n      }, new Set()\n    )];\n  }\n\n  pruneGraph(keepFunctions?: string[]): undefined {\n    const allNodegroups = this.getNodegroupObjects();\n    const root = this.graph.root.nodeid;\n    // Strictly, this ultimately also contains nodes, but not all allowed nodes - the key point is that\n    // it has only and all nodegroups that we will keep.\n    const allowedNodegroups = new Map([...allNodegroups.values()].filter((nodegroup: StaticNodegroup) => {\n      return this.isNodegroupPermitted(nodegroup.nodegroupid || '', null);\n    }).map((nodegroup: StaticNodegroup) => [nodegroup.nodegroupid, nodegroup.nodegroupid === null || nodegroup.nodegroupid === '' || nodegroup.nodegroupid === root]));\n    const backedges: Map<string, string> = new Map();\n    for (const [d, rs] of this.getEdges()) {\n      for (const r of rs) {\n        if (backedges.has(r)) {\n          throw Error(`Graph is malformed, node ${r} has multiple parents, ${backedges.get(r)} and ${d} at least`);\n        }\n        backedges.set(r, d);\n      }\n    }\n\n    let loops = 0;\n    // This is not a fast approach, but it's simple enough. Optimize if needed.\n    allowedNodegroups.set(root, true);\n    while (loops < MAX_GRAPH_DEPTH) {\n      const unrooted = [...allowedNodegroups.entries()].filter(([_, rooted]: [string, boolean]) => !rooted);\n      if (unrooted.length === 0) {\n        break;\n      }\n      for (const [ng] of unrooted) {\n        if (ng === root) {\n          continue;\n        }\n        const next = backedges.get(ng);\n        if (!next) {\n          throw Error(`Graph does not have a parent for ${ng}`);\n        }\n        allowedNodegroups.set(ng, true);\n        if (!allowedNodegroups.has(next)) {\n          allowedNodegroups.set(next, false);\n        }\n      }\n      loops += 1;\n    }\n\n    if (loops >= MAX_GRAPH_DEPTH) {\n      throw Error(\"Hit edge traversal limit when pruning, is the graph well-formed without cycles?\")\n    }\n\n    const allowedNodes = new Set([...this.getNodeObjects().values()].filter((node: StaticNode) => {\n      return (node.nodegroup_id && allowedNodegroups.get(node.nodegroup_id)) || node.nodeid === root;\n    }).map((node: StaticNode) => node.nodeid));\n\n    this.graph.cards = (this.graph.cards || []).filter((card: StaticCard) => allowedNodegroups.get(card.nodegroup_id));\n    this.graph.cards_x_nodes_x_widgets = (this.graph.cards_x_nodes_x_widgets || []).filter((card: StaticCardsXNodesXWidgets) => allowedNodes.has(card.node_id));\n    this.graph.edges = (this.graph.edges || []).filter((edge: StaticEdge) => (edge.domainnode_id === root || allowedNodes.has(edge.domainnode_id)) && allowedNodes.has(edge.rangenode_id));\n    this.graph.nodegroups = (this.graph.nodegroups || []).filter((ng: StaticNodegroup) => allowedNodegroups.has(ng.nodegroupid));\n    this.graph.nodes = (this.graph.nodes || []).filter((node: StaticNode) => allowedNodes.has(node.nodeid));\n\n    // At this point, every originally-allowed nodegroup has an allowed parent, up to the root.\n    if (Array.isArray(keepFunctions) && this.graph.functions_x_graphs) {\n      this.graph.functions_x_graphs = this.graph.functions_x_graphs.filter((fxg: StaticFunctionsXGraphs) => keepFunctions.includes(fxg.function_id));\n    } else {\n      this.graph.functions_x_graphs = [];\n    }\n  }\n\n  exportGraph(): StaticGraph {\n    const graph = this.graph;\n    return new StaticGraph({\n      author: graph.author,\n      cards: graph.cards,\n      cards_x_nodes_x_widgets: graph.cards_x_nodes_x_widgets,\n      color: graph.color,\n      config: graph.config,\n      deploymentdate: graph.deploymentdate,\n      deploymentfile: graph.deploymentfile,\n      description: graph.description,\n      edges: graph.edges,\n      functions_x_graphs: graph.functions_x_graphs,\n      graphid: graph.graphid,\n      iconclass: graph.iconclass,\n      is_editable: graph.is_editable,\n      isresource: graph.isresource,\n      jsonldcontext: graph.jsonldcontext,\n      name: graph.name,\n      nodegroups: graph.nodegroups,\n      nodes: graph.nodes,\n      ontology_id: graph.ontology_id,\n      publication: graph.publication,\n      relatable_resource_model_ids: graph.relatable_resource_model_ids,\n      resource_2_resource_constraints: graph.resource_2_resource_constraints,\n      root: graph.root,\n      slug: graph.slug,\n      subtitle: graph.subtitle,\n      template_id: graph.template_id,\n      version: graph.version,\n    });\n  }\n\n  async all(params: { limit?: number; lazy?: boolean } | undefined = undefined): Promise<Array<RIVM>> {\n    const paramObj = params || { limit: undefined, lazy: undefined };\n    const promises = [];\n    for await (const resource of this.iterAll(paramObj)) {\n      promises.push(resource);\n    }\n    return Promise.all(promises);\n  }\n\n  stripTiles(resource: StaticResource) {\n    if (resource.tiles) {\n      const nodes = this.getNodeObjects();\n      resource.tiles = resource.tiles.filter(tile => {\n        const node = nodes.get(tile.nodegroup_id);\n        if (!node) {\n          throw Error(`Tile ${tile.tileid} has nodegroup ${tile.nodegroup_id} that is not on the model ${this.graph.graphid}`);\n        }\n        return this.isNodegroupPermitted(tile.nodegroup_id || '', tile);\n      });\n    }\n  }\n\n  async* resourceGenerator(staticResources: AsyncIterable<StaticResource, RIVM, unknown>, lazy: boolean=false, pruneTiles: boolean = true) {\n    for await (const staticResource of staticResources) {\n      yield this.fromStaticResource(staticResource, lazy, pruneTiles);\n    }\n  }\n\n  async* iterAll(params: { limit?: number; lazy?: boolean }): AsyncGenerator<RIVM> {\n    yield* this.resourceGenerator(staticStore.loadAll(this.wkrm.graphId, params.limit), params.lazy);\n  }\n\n  async findStatic(id: string): Promise<StaticResource> {\n    return await staticStore.loadOne(id);\n  }\n\n  async find(id: string, lazy: boolean = true, pruneTiles: boolean = true): Promise<RIVM> {\n    const rivm = await this.findStatic(id);\n    return this.fromStaticResource(rivm, lazy, pruneTiles);\n  }\n\n  setPermittedNodegroups(permissions: Map<string | null, boolean | CheckPermission>) {\n    const nodegroups = this.getNodegroupObjects();\n    const nodes = this.getNodeObjectsByAlias();\n    this.permittedNodegroups = new Map([...permissions].map(([key, value]): [key: string | null, value: boolean | CheckPermission] => {\n      const k = key || '';\n      if (nodegroups.has(k) || k === '') {\n        return [key, value];\n      } else {\n        const node = nodes.get(k);\n        if (node) {\n          // The nodeid is the nodegroup ID of the children, but may not be the nodegroup ID of\n          // the semantic node itself.\n          return [node.nodeid, value];\n        } else {\n          throw Error(`Could not find ${key} in nodegroups for permissions`);\n        }\n      }\n    }));\n  }\n\n  // Defaults to visible, which helps reduce the risk of false sense of security\n  // from front-end filtering masking the presence of data transferred to it.\n  getPermittedNodegroups(): Map<string | null, boolean | CheckPermission> {\n    if (!this.permittedNodegroups) {\n      const permissions = new Map([...this.getNodegroupObjects()].map(\n        ([k, _]: [k: string, _: StaticNodegroup]) => [k, true]\n      ));\n      permissions.set(\"\", true); // Have to have access to root node.\n      this.setPermittedNodegroups(permissions);\n    }\n    const permittedNodegroups = this.permittedNodegroups;\n    if (permittedNodegroups === undefined) {\n      throw Error(\"Could not set permitted nodegroups\");\n    }\n    // TODO allow reducing\n    return permittedNodegroups;\n  }\n\n  isNodegroupPermitted(nodegroupId: string, tile: StaticTile | null): boolean {\n    let permitted: boolean | CheckPermission | undefined = this.getPermittedNodegroups().get(nodegroupId);\n    if (permitted && typeof permitted == 'function') {\n      const nodes = this.getNodeObjectsByAlias();\n      permitted = permitted(nodegroupId, tile, nodes);\n    }\n    if (!permitted) {\n      return false;\n    }\n    if (permitted === true) {\n      return true;\n    }\n    throw Error(`Ambiguous permission state: ${permitted} for nodegroup ${nodegroupId}`);\n  }\n\n  makeInstance(id: string, resource: StaticResource | null, pruneTiles: boolean = true): RIVM {\n    if (!this.viewModelClass) {\n      throw Error(`Cannot instantiate without a viewModelClass in ${this.wkrm.modelClassName}`);\n    }\n    // TODO: This line needs fixed.\n    const instance: RIVM = new this.viewModelClass(\n      id,\n      this.viewModelClass.prototype.__,\n      (rivm: RIVM) =>\n        new ResourceInstanceWrapper(rivm, this, resource, pruneTiles),\n      null\n    );\n    return instance;\n  }\n\n  edges: Map<string, string[]> | undefined;\n  nodes: Map<string, StaticNode> | undefined;\n  nodegroups: Map<string, StaticNodegroup> | undefined;\n  nodesByAlias: Map<string, StaticNode> | undefined;\n\n  getChildNodes(nodeId: string): Map<string, StaticNode> {\n    const childNodes = new Map<string, StaticNode>();\n    const edges = this.getEdges().get(nodeId);\n    if (edges) {\n      for (const [, n] of this.getNodeObjects()) {\n        if (edges.includes(n.nodeid)) {\n          if (n.alias) {\n            childNodes.set(n.alias, n);\n          }\n        }\n      }\n    }\n    return childNodes;\n  }\n\n  buildNodes() {\n    if (this.nodes || this.nodegroups) {\n      throw Error(\"Cache should never try and rebuild nodes when non-empty\");\n    }\n\n    this.edges = new Map<string, string[]>();\n    this.nodes = new Map<string, StaticNode>();\n    this.nodegroups = new Map<string, StaticNodegroup>();\n\n    const graph = this.graph ?? graphManager.getGraph(this.wkrm.graphId);\n    if (!graph) {\n      throw Error(`Could not find graph ${this.wkrm.graphId} for resource`);\n    }\n    const nodes = new Map(graph.nodes.map((node) => [node.nodeid, node]));\n    const nodegroups = new Map(\n      graph.nodes\n        .filter((node) => node.nodegroup_id)\n        .map((node) => [\n          node.nodegroup_id || \"\",\n          new StaticNodegroup({\n            cardinality: \"n\",\n            legacygroupid: null,\n            nodegroupid: node.nodegroup_id || \"\",\n            parentnodegroup_id: null,\n          }),\n        ]),\n    );\n    for (const nodegroup of graph.nodegroups) {\n      nodegroups.set(nodegroup.nodegroupid, nodegroup);\n    }\n\n    const edgePairs = graph.edges.map((edge) => [\n      edge.domainnode_id,\n      edge.rangenode_id,\n    ]);\n    const edges: Map<string, string[]> = edgePairs.reduce((edges, dr) => {\n      const range = edges.get(dr[0]) || [];\n      range.push(dr[1]);\n      edges.set(dr[0], range);\n      return edges;\n    }, new Map<string, string[]>());\n\n    this.nodes = nodes;\n    this.nodegroups = nodegroups;\n    this.edges = edges;\n    this.nodesByAlias = new Map(\n      [...nodes.values()].map((node) => [node.alias || \"\", node]),\n    );\n  }\n\n  getNodeObjectsByAlias(): Map<string, StaticNode> {\n    if (!this.nodesByAlias) {\n      this.buildNodes();\n    }\n    if (!this.nodesByAlias) {\n      throw Error(\"Could not build nodes\");\n    }\n    return this.nodesByAlias;\n  }\n\n  getEdges(): Map<string, string[]> {\n    if (!this.edges) {\n      this.buildNodes();\n    }\n    if (!this.edges) {\n      throw Error(\"Could not build edges\");\n    }\n    return this.edges;\n  }\n\n  getNodeObjects(): Map<string, StaticNode> {\n    if (!this.nodes) {\n      this.buildNodes();\n    }\n    if (!this.nodes) {\n      throw Error(\"Could not build nodes\");\n    }\n    return this.nodes;\n  }\n\n  getNodegroupObjects(): Map<string, StaticNodegroup> {\n    if (!this.nodegroups) {\n      this.buildNodes();\n    }\n    if (!this.nodegroups) {\n      throw Error(\"Could not build nodegroups\");\n    }\n    return this.nodegroups;\n  }\n\n  getRootNode(): StaticNode {\n    const nodes = this.getNodeObjects();\n    const rootNode = [...nodes.values()].find((n) => !n.nodegroup_id);\n    if (!rootNode) {\n      throw Error(\n        `COULD NOT FIND ROOT NODE FOR ${this.wkrm.modelClassName}. Does the graph ${this.graph.graphid} still exist?`,\n      );\n    }\n    rootNode.alias = rootNode.alias || '';\n    return rootNode;\n  }\n\n  fromStaticResource(\n    resource: StaticResource,\n    lazy: boolean = false,\n    pruneTiles: boolean = true\n  ): Promise<RIVM> {\n    // TODO: implement lazy\n    const wkri: RIVM = this.makeInstance(\n      resource.resourceinstance.resourceinstanceid,\n      resource,\n      pruneTiles\n    );\n\n    if (!wkri.$) {\n      throw Error(\"Could not load resource from static definition\");\n    }\n\n    return wkri.$.populate(lazy).then(() => wkri);\n  }\n\n  asTree(): {[key: string]: any} {\n    const root = this.getRootNode();\n    const nodegroups = this.getNodegroupObjects();\n    const addChildren = (node: StaticNode) => {\n      const branch: {[key: string]: any} = {};\n      const children = this.getChildNodes(node.nodeid);\n      if (!children.size) {\n        return false;\n      }\n      for (const child of children.values()) {\n        const nodegroup = nodegroups.get(child.nodegroup_id || '');\n        const multiple = (\n          child.nodegroup_id &&\n          child.is_collector &&\n          nodegroup &&\n          nodegroup.cardinality == 'n' &&\n          node.nodegroup_id !== child.nodegroup_id\n        ) || child.datatype.endsWith('-list');\n        const childBranch = addChildren(child);\n        const alias = child.alias || '';\n        if (childBranch === false) {\n          branch[alias] = child.datatype;\n        } else {\n          branch[alias] = childBranch;\n          if (child.datatype !== 'semantic') {\n             branch[alias]['_'] = child.datatype;\n          }\n        }\n        if (multiple) {\n          branch[alias] = [branch[alias]];\n        }\n      }\n      return branch;\n    }\n    return addChildren(root) || {};\n  }\n}\n\nfunction makeResourceModelWrapper<T extends IRIVM<T>>(\n  viewModelClass: ResourceInstanceViewModelConstructor<T> | undefined,\n  wkrm: WKRM,\n  graph: StaticGraph,\n): ResourceInstanceViewModelConstructor<T> {\n  let vmc: ResourceInstanceViewModelConstructor<T>;\n  if (!viewModelClass) {\n    // @ts-expect-error It may be possible to correct this, but TS does not know that\n    // the dynamically-defined class meets the IRIVM interface.\n    const viewModelClassObj: {[name: string]: ResourceInstanceViewModelConstructor<T>} = {\n      [wkrm.modelClassName]: class extends ResourceInstanceViewModel<T> {\n        static _: ResourceInstanceWrapper<T> | null;\n        static __: ResourceModelWrapper<T> | null;\n      },\n    };\n    vmc = viewModelClassObj[wkrm.modelClassName];\n  } else {\n    vmc = viewModelClass;\n  }\n\n  const wrapper = new ResourceModelWrapper<T>(wkrm, graph, vmc);\n  vmc.prototype.__ = wrapper;\n  return vmc;\n}\n\nclass GraphManager {\n  _initialized: boolean = false;\n  archesClient: ArchesClient;\n  graphs: Map<string, ResourceModelWrapper<any>>;\n  wkrms: Map<string, WKRM>;\n\n  constructor(archesClient: ArchesClient) {\n    this.archesClient = archesClient;\n    this.graphs = new Map<string, ResourceModelWrapper<any>>();\n    this.wkrms = new Map<string, WKRM>();\n  }\n\n  async initialize(configurationOptions: ConfigurationOptions | undefined = undefined) {\n    if (this._initialized) {\n      return;\n    }\n    if (configurationOptions === undefined) {\n      configurationOptions = new ConfigurationOptions();\n    }\n    const graphJsons: GraphResult = await this.archesClient.getGraphs();\n\n    let graphs: Array<[string, StaticGraphMeta]> = Object.entries(graphJsons[\"models\"]);\n    const allowedGraphs = configurationOptions.graphs;\n    if (allowedGraphs !== null) {\n      if (allowedGraphs === false) {\n        throw Error(\"No current meaning of allowedGraphs === false\");\n      } else if (allowedGraphs !== true) {\n        graphs = graphs.filter(\n          ([graphId, _]: [string, StaticGraphMeta]) => allowedGraphs.includes(graphId),\n        );\n      }\n    }\n    graphs.forEach(([graphId, meta]: [string, StaticGraphMeta]) => {\n      meta.graphid = meta.graphid || graphId;\n      const wkrm = new WKRM(meta);\n      this.wkrms.set(wkrm.modelClassName, wkrm);\n    });\n    if (configurationOptions.eagerLoadGraphs) {\n      await Promise.all(graphs.map(([g]) => this.loadGraph(g)));\n    }\n\n    this._initialized = true;\n  }\n\n  async loadGraph<RIVM extends IRIVM<RIVM>>(modelClass: ResourceInstanceViewModelConstructor<RIVM> | string): Promise<ResourceModelWrapper<RIVM>> {\n    let modelClassName: string;\n    if (typeof modelClass == 'string') {\n      modelClassName = modelClass;\n    } else {\n      modelClassName = modelClass.name;\n    }\n\n    let wkrm = this.wkrms.get(modelClassName);\n    if (wkrm === undefined) {\n      wkrm = [...this.wkrms.values()].find(wkrm => wkrm.graphId === modelClassName);\n      if (wkrm === undefined) {\n        throw Error(`Only loading graphs for which metadata is present, not ${modelClassName}`);\n      }\n      modelClass = wkrm.modelClassName;\n    }\n\n    const wrapper = this.graphs.get(wkrm.graphId);\n    if (wrapper !== undefined) {\n      return wrapper;\n    }\n\n    const bodyJson = await this.archesClient.getGraph(wkrm.meta);\n    if (!bodyJson) {\n      throw Error(`Could not load graph ${wkrm.graphId}`);\n    }\n\n    const graph = new StaticGraph(bodyJson);\n\n    let model: ResourceInstanceViewModelConstructor<RIVM>;\n    if (typeof modelClass == 'string') {\n      modelClassName = modelClass;\n      model = makeResourceModelWrapper<RIVM>(undefined, wkrm, graph);\n    } else {\n      modelClassName = modelClass.name;\n      model = makeResourceModelWrapper<RIVM>(modelClass, wkrm, graph);\n    }\n\n    this.graphs.set(graph.graphid, model.prototype.__);\n    return model.prototype.__;\n  }\n\n  async get<RIVM extends IRIVM<RIVM>>(modelClass: ResourceInstanceViewModelConstructor<RIVM> | string): Promise<ResourceModelWrapper<RIVM>> {\n    let modelClassName: string;\n    if (typeof modelClass == 'string') {\n      modelClassName = modelClass;\n    } else {\n      modelClassName = modelClass.name;\n    }\n\n    // Initialize as a fallback\n    this.initialize(undefined);\n    let wkrm = this.wkrms.get(modelClassName);\n    if (wkrm === undefined) {\n      wkrm = [...this.wkrms.values()].find(w => w.graphId === modelClassName);\n      if (wkrm === undefined) {\n        throw Error(`Cannot find model requested: ${modelClassName}`);\n      }\n    }\n\n    const wrapper = this.graphs.get(wkrm.graphId);\n    if (wrapper === undefined) {\n      return this.loadGraph(modelClass);\n    }\n    return wrapper;\n  }\n\n  async getResource<T extends IRIVM<T>>(resourceId: string, lazy: boolean = true, pruneTiles: boolean = true): Promise<T> {\n    const rivm = await staticStore.loadOne(resourceId);\n    let graph = this.graphs.get(rivm.resourceinstance.graph_id);\n    if (!graph) {\n      graph = await this.loadGraph(rivm.resourceinstance.graph_id);\n      if (!graph) {\n        throw Error(`Graph not found for resource ${resourceId}`);\n      }\n    }\n    return graph.fromStaticResource(rivm, lazy, pruneTiles);\n  }\n\n  getGraph(graphId: string): StaticGraph {\n    const wrapper = this.graphs.get(graphId);\n    if (wrapper === undefined) {\n      throw Error(`Cannot find graph requested: ${graphId}`);\n    }\n    return wrapper.graph;\n  }\n}\n\nconst graphManager = new GraphManager(archesClient);\nviewContext.graphManager = graphManager;\n\nexport { GraphManager, graphManager, ArchesClientRemote, staticStore, WKRM, ResourceModelWrapper, GraphMutator };\n","import { staticStore } from \"./staticStore.ts\"\nimport { PseudoList } from \"./pseudos.ts\"\nimport { UrlViewModel, DateViewModel, ResourceInstanceViewModel, DomainValueViewModel, ConceptValueViewModel, NonLocalizedStringViewModel, StringViewModel, SemanticViewModel, GeoJSONViewModel, BooleanViewModel, NumberViewModel } from './viewModels';\n\nclass Cleanable extends String {\n  __clean: string | undefined\n}\n\nabstract class BaseRenderer {\n  async render(asset: ResourceInstanceViewModel<any>) {\n    if (!asset.$) {\n      throw Error(\"Cannot render unloaded asset - do you want to await asset.retrieve()?\");\n    }\n    const root = await (await asset.$.getRootViewModel());\n    return this.renderValue(root, 0);\n  }\n\n  abstract renderDomainValue(value: DomainValueViewModel, _depth: number): Promise<any>;\n  abstract renderDate(value: DateViewModel, _depth: number): Promise<any>;\n  abstract renderConceptValue(value: ConceptValueViewModel, _depth: number): Promise<any>;\n  abstract renderResourceReference(value: ResourceInstanceViewModel<any>, _depth: number): Promise<any>;\n  abstract renderSemantic(value: SemanticViewModel, depth: number): Promise<any>;\n  abstract renderBlock(block: {[key: string]: string} | {[key: string]: string}[], depth: number): any;\n  abstract renderArray(value: any[], depth: number): Promise<any>;\n  abstract renderString(value: string | StringViewModel | NonLocalizedStringViewModel, _depth: number): Promise<any>;\n  abstract renderBoolean(value: boolean | BooleanViewModel, _depth: number): Promise<any>;\n  abstract renderNumber(value: number | NumberViewModel, _depth: number): Promise<any>;\n  abstract renderUrl(value: UrlViewModel, _depth: number): Promise<any>;\n\n  async renderValue(value: any, depth: number): Promise<any> {\n    let newValue;\n    if (value instanceof Promise) {\n      value = await value;\n    }\n    if (value instanceof DomainValueViewModel) {\n      newValue = this.renderDomainValue(value, depth);\n    } else if (value instanceof DateViewModel) {\n      newValue = this.renderDate(value, depth);\n    } else if (value instanceof ConceptValueViewModel) {\n      newValue = this.renderConceptValue(value, depth);\n    } else if (value instanceof ResourceInstanceViewModel) {\n      newValue = this.renderResourceReference(value, depth);\n    } else if (value instanceof SemanticViewModel) {\n      newValue = this.renderSemantic(value, depth);\n    } else if (value instanceof Array) {\n      newValue = this.renderArray(value, depth);\n    } else if (value instanceof StringViewModel || value instanceof NonLocalizedStringViewModel || typeof value === 'string') {\n      newValue = this.renderString(value, depth);\n    } else if (value instanceof BooleanViewModel) {\n      newValue = this.renderBoolean(value, depth);\n    } else if (value instanceof NumberViewModel) {\n      newValue = this.renderNumber(value, depth);\n    } else if (value instanceof GeoJSONViewModel) {\n      newValue = this.renderBlock(await value.forJson(), depth);\n    } else if (value instanceof UrlViewModel) {\n      newValue = this.renderUrl(await value, depth);\n    } else if (value instanceof Object) {\n      newValue = this.renderBlock(value, depth);\n    } else {\n      newValue = value;\n    }\n    return newValue;\n  }\n}\n\nclass Renderer extends BaseRenderer {\n  async renderDomainValue(value: DomainValueViewModel, _depth: number): Promise<any> {\n    return value;\n  }\n\n  async renderString(value: string | StringViewModel | NonLocalizedStringViewModel, _depth: number): Promise<any> {\n    return `${value}`;\n  }\n\n  async renderNumber(value: number | NumberViewModel, _depth: number): Promise<any> {\n    return `${value}`;\n  }\n\n  async renderBoolean(value: boolean | BooleanViewModel, _depth: number): Promise<any> {\n    return value.toString();\n  }\n\n  async renderDate(value: DateViewModel, _depth: number): Promise<any> {\n    return value;\n  }\n\n  async renderConceptValue(value: ConceptValueViewModel, _depth: number): Promise<any> {\n    return value;\n  }\n\n  async renderResourceReference(value: ResourceInstanceViewModel<any>, _depth: number): Promise<any> {\n    return value;\n  }\n\n  async renderSemantic(value: SemanticViewModel, depth: number): Promise<any> {\n    return this.renderBlock(await value.toObject(), depth);\n  }\n\n  async renderUrl(value: UrlViewModel, _depth: number): Promise<any> {\n    return value;\n  }\n\n  renderBlock(block: {[key: string]: string} | {[key: string]: string}[], depth: number): any {\n    const renderedBlock: {[key: string]: any} = {};\n    const promises: Promise<void>[] = [];\n    for (const [key, value] of Object.entries(block)) {\n      promises.push(\n        this.renderValue(value, depth + 1).then((val: any) => { renderedBlock[key] = val; })\n      );\n    }\n    return Promise.all(promises).then(() => renderedBlock);\n  }\n\n  async renderArray(value: any, depth: number): Promise<any> {\n      return Promise.all(value.map((val: any) => this.renderValue(val, depth + 1)));\n  }\n\n}\n\nclass MarkdownRenderer extends Renderer {\n  conceptValueToUrl: ((value: ConceptValueViewModel) => string) | undefined\n  dateToText: ((value: DateViewModel) => string) | undefined\n  domainValueToUrl: ((value: DomainValueViewModel) => string) | undefined\n  resourceReferenceToUrl: ((value: ResourceInstanceViewModel<any>) => string) | undefined\n  nodeToUrl: ((value: string) => string) | undefined\n\n  constructor(callbacks: {\n    conceptValueToUrl: ((value: ConceptValueViewModel) => string) | undefined,\n    dateToText: ((value: DateViewModel) => string) | undefined,\n    domainValueToUrl: ((value: DomainValueViewModel) => string) | undefined,\n    resourceReferenceToUrl: ((value: ResourceInstanceViewModel<any>) => string) | undefined,\n    nodeToUrl: ((value: string) => string) | undefined,\n  }) {\n    super();\n    this.conceptValueToUrl = callbacks.conceptValueToUrl;\n    this.dateToText = callbacks.dateToText;\n    this.domainValueToUrl = callbacks.domainValueToUrl;\n    this.resourceReferenceToUrl = callbacks.resourceReferenceToUrl;\n    this.nodeToUrl = callbacks.nodeToUrl;\n  }\n\n  async renderUrl(value: UrlViewModel, _depth: number): Promise<any> {\n    const text = `[${value}](${value})`;\n    const wrapper = new Cleanable(text);\n    wrapper.__clean = value.href();\n    return wrapper;\n  }\n\n  override async renderDomainValue(domainValue: DomainValueViewModel, _: number): Promise<any> {\n    const value = await domainValue.getValue();\n    const url = this.domainValueToUrl ? await this.domainValueToUrl(domainValue): null;\n    const text = url ? `[${value.toString()}](${url.trim()})` : value.toString();\n    const wrapper = new Cleanable(`\n    <span\n      class='alizarin-domain-value' data-id='${value.id}'\n    >\n      ${text}\n    </span>`.replace(/\\n/g, ' ').trim());\n    wrapper.__clean = domainValue.toString();\n    return wrapper;\n  }\n\n  override async renderDate(date: DateViewModel, _: number): Promise<any> {\n    const value = await date;\n    const text = this.dateToText ? await this.dateToText(value): value.toISOString();\n    const wrapper = new Cleanable(`\n    <time datetime='${text}'>\n      ${text}\n    </time>`.replace(/\\n/g, ' ').trim());\n    wrapper.__clean = text;\n    return wrapper;\n  }\n\n  override async renderConceptValue(conceptValue: ConceptValueViewModel, _: number): Promise<any> {\n    const value = await conceptValue.getValue();\n    const url = this.conceptValueToUrl ? await this.conceptValueToUrl(conceptValue): null;\n    const text = url ? `[${value.value}](${url.trim()})` : value.value;\n    const wrapper = new Cleanable(`\n    <span\n      class='alizarin-concept-value' data-id='${value.id}'\n      data-concept-id='${value.__concept ? value.__concept.id : \"\"}'\n      data-concept-ref='$${value.__concept ? value.__concept.source : \"\"}'\n    >\n      ${text}\n    </span>`.replace(/\\n/g, ' ').trim());\n    wrapper.__clean = conceptValue.toString();\n    return wrapper;\n  }\n\n  override async renderResourceReference(rivm: ResourceInstanceViewModel<any>, _: number): Promise<any> {\n    const value = await rivm.forJson(false);\n    const url = this.resourceReferenceToUrl ? await this.resourceReferenceToUrl(rivm): null;\n    let title = value.title || value.type || 'Resource';\n    const text = url ? `[${title}](${url.trim()})` : title;\n    const resourceMetadata = await staticStore.getMeta(value.id);\n    if (resourceMetadata) {\n      title = resourceMetadata.name;\n    }\n    const wrapper = new Cleanable(`\n    <span\n      class='alizarin-resource-instance alizarin-related-resource' data-id='${value.id}'\n      data-graph-id='${value.graphId}'\n    >\n      ${text}\n    </span>`.replace(/\\n/g, ' ').trim());\n    wrapper.__clean = rivm.toString();\n    return wrapper;\n  }\n}\n\nclass FlatMarkdownRenderer extends MarkdownRenderer {\n  override async renderSemantic(vm: SemanticViewModel, depth: number): Promise<any> {\n    const children = [...(await vm.__getChildValues()).entries()].map(([_, v]) => [v.node.alias, v.node]);\n    const nodes = Object.fromEntries(await Promise.all(children));\n    return super.renderSemantic(vm, depth).then(async block => {\n      const text = [\n        `* <span class='node-type'>${vm.__node.name}</span> &rarr;`,\n        ...Object.entries(await block).map(([key, value]) => {\n          const node = nodes[key];\n          let nodeName = node.name;\n          if (this.nodeToUrl) {\n            nodeName = `[${node.name}](${this.nodeToUrl(node)})`;\n          }\n          if ((typeof value == 'string' || value instanceof String) && value.indexOf('\\n') != -1) {\n            return `  * <span class='node-name'>${nodeName}</span> <span class='node-alias'>[*${node.alias}*]</span>:<span class='node-value'>\\n${value.split('\\n').map(x => `    ${x}`).join('\\n')}\\n    </span>`;\n          } else {\n            return `  * <span class='node-name'>${nodeName}</span> <span class='node-alias'>[*${node.alias}*]</span>: <span class='node-value'>${value}</span>`;\n          }\n        }).join('\\n').split('\\n')\n      ];\n      if (text[1] == '') {\n        text[0] += `<span class='node-empty'>&lt;empty&gt;</span>`;\n        text.pop();\n      }\n      return text.map(line => `  ${line}`).join('\\n');\n    });\n  }\n\n  override async renderArray(value: any, depth: number): Promise<any> {\n      const rows = await super.renderArray(value, depth);\n      if (value instanceof PseudoList || value.indexOf('\\n') != -1) {\n        return rows.map((x: any) => `${x}`).join('\\n');\n      } else {\n        return rows.join(\", \");\n      }\n  }\n\n  async renderString(value: string | StringViewModel | NonLocalizedStringViewModel, _depth: number): Promise<any> {\n    if (value.indexOf('\\n') != -1) {\n      value = '\\n    ' + value.split('\\n').join('\\n    ');\n    }\n    return value;\n  }\n}\n\nclass JsonRenderer extends Renderer {\n  async renderDate(value: DateViewModel, _depth: number): Promise<any> {\n    return value.forJson();\n  }\n\n  async renderBoolean(value: boolean | BooleanViewModel, _depth: number): Promise<any> {\n    return typeof value === \"boolean\" ? value : value.forJson();\n  }\n\n  async renderConceptValue(value: ConceptValueViewModel, _depth: number): Promise<any> {\n    return value.forJson();\n  }\n\n  async renderDomainValue(value: DomainValueViewModel, _depth: number): Promise<any> {\n    return value.forJson();\n  }\n\n  async renderResourceReference(value: ResourceInstanceViewModel<any>, _depth: number): Promise<any> {\n    // TODO: decide if this makes sense: await value.retrieve();\n    const val = value.forJson();\n    return val;\n  }\n}\n\nexport { MarkdownRenderer, JsonRenderer, Cleanable, FlatMarkdownRenderer };\n","import { greet } from \"alizarin-wasm\";\nimport * as client from \"./client\";\nimport * as interfaces from \"./interfaces\";\nimport { RDM } from \"./rdm\";\nimport { ResourceModelWrapper, WKRM, graphManager, staticStore, GraphManager, GraphMutator } from \"./graphManager\";\nimport * as staticTypes from \"./static-types\";\nimport * as utils from \"./utils\";\nimport * as viewModels from \"./viewModels\";\nimport * as renderers from \"./renderers\";\nimport * as nodeConfig from \"./nodeConfig\";\n\nconst AlizarinModel = viewModels.ResourceInstanceViewModel;\nconst setCurrentLanguage = utils.setCurrentLanguage;\nconst getCurrentLanguage = utils.getCurrentLanguage;\nexport {\n  AlizarinModel,\n  client,\n  graphManager,\n  GraphManager,\n  staticTypes,\n  utils,\n  viewModels,\n  staticStore,\n  RDM,\n  renderers,\n  interfaces,\n  WKRM,\n  nodeConfig,\n  ResourceModelWrapper,\n  GraphMutator,\n  setCurrentLanguage,\n  getCurrentLanguage,\n};\n","export default {}"],"names":["DEFAULT_LANGUAGE","uuidv5","getCurrentLanguage","setCurrentLanguage","uuidv4","response","archesClient","resource","node","promise","value","val","ids","collection","str","tile","vm","nodegroupId","newImpliedNodegroups","card","config","graph","edges","wkrm","viewModels.ResourceInstanceViewModel","utils.setCurrentLanguage","utils.getCurrentLanguage"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}