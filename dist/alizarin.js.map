{"version":3,"file":"alizarin.js","sources":["../../../node_modules/uuid/dist/esm-browser/regex.js","../../../node_modules/uuid/dist/esm-browser/validate.js","../../../node_modules/uuid/dist/esm-browser/parse.js","../../../node_modules/uuid/dist/esm-browser/stringify.js","../../../node_modules/uuid/dist/esm-browser/rng.js","../../../node_modules/uuid/dist/esm-browser/v35.js","../../../node_modules/uuid/dist/esm-browser/native.js","../../../node_modules/uuid/dist/esm-browser/v4.js","../../../node_modules/uuid/dist/esm-browser/sha1.js","../../../node_modules/uuid/dist/esm-browser/v5.js","../src/utils.ts","../src/static-types.ts","../src/client.ts","../src/rdm.ts","../src/staticStore.ts","../src/cards.ts","../src/nodeConfig.ts","../src/viewModels.ts","../src/pseudos.ts","../src/graphManager.ts","../src/renderers.ts","../src/main.ts"],"sourcesContent":["export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;\n","import REGEX from './regex.js';\nfunction validate(uuid) {\n    return typeof uuid === 'string' && REGEX.test(uuid);\n}\nexport default validate;\n","import validate from './validate.js';\nfunction parse(uuid) {\n    if (!validate(uuid)) {\n        throw TypeError('Invalid UUID');\n    }\n    let v;\n    return Uint8Array.of((v = parseInt(uuid.slice(0, 8), 16)) >>> 24, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff, (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, v & 0xff, ((v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000) & 0xff, (v / 0x100000000) & 0xff, (v >>> 24) & 0xff, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff);\n}\nexport default parse;\n","import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n","import parse from './parse.js';\nimport { unsafeStringify } from './stringify.js';\nexport function stringToBytes(str) {\n    str = unescape(encodeURIComponent(str));\n    const bytes = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; ++i) {\n        bytes[i] = str.charCodeAt(i);\n    }\n    return bytes;\n}\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function v35(version, hash, value, namespace, buf, offset) {\n    const valueBytes = typeof value === 'string' ? stringToBytes(value) : value;\n    const namespaceBytes = typeof namespace === 'string' ? parse(namespace) : namespace;\n    if (typeof namespace === 'string') {\n        namespace = parse(namespace);\n    }\n    if (namespace?.length !== 16) {\n        throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    }\n    let bytes = new Uint8Array(16 + valueBytes.length);\n    bytes.set(namespaceBytes);\n    bytes.set(valueBytes, namespaceBytes.length);\n    bytes = hash(bytes);\n    bytes[6] = (bytes[6] & 0x0f) | version;\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = bytes[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(bytes);\n}\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n","function f(s, x, y, z) {\n    switch (s) {\n        case 0:\n            return (x & y) ^ (~x & z);\n        case 1:\n            return x ^ y ^ z;\n        case 2:\n            return (x & y) ^ (x & z) ^ (y & z);\n        case 3:\n            return x ^ y ^ z;\n    }\n}\nfunction ROTL(x, n) {\n    return (x << n) | (x >>> (32 - n));\n}\nfunction sha1(bytes) {\n    const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n    const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n    const newBytes = new Uint8Array(bytes.length + 1);\n    newBytes.set(bytes);\n    newBytes[bytes.length] = 0x80;\n    bytes = newBytes;\n    const l = bytes.length / 4 + 2;\n    const N = Math.ceil(l / 16);\n    const M = new Array(N);\n    for (let i = 0; i < N; ++i) {\n        const arr = new Uint32Array(16);\n        for (let j = 0; j < 16; ++j) {\n            arr[j] =\n                (bytes[i * 64 + j * 4] << 24) |\n                    (bytes[i * 64 + j * 4 + 1] << 16) |\n                    (bytes[i * 64 + j * 4 + 2] << 8) |\n                    bytes[i * 64 + j * 4 + 3];\n        }\n        M[i] = arr;\n    }\n    M[N - 1][14] = ((bytes.length - 1) * 8) / Math.pow(2, 32);\n    M[N - 1][14] = Math.floor(M[N - 1][14]);\n    M[N - 1][15] = ((bytes.length - 1) * 8) & 0xffffffff;\n    for (let i = 0; i < N; ++i) {\n        const W = new Uint32Array(80);\n        for (let t = 0; t < 16; ++t) {\n            W[t] = M[i][t];\n        }\n        for (let t = 16; t < 80; ++t) {\n            W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n        }\n        let a = H[0];\n        let b = H[1];\n        let c = H[2];\n        let d = H[3];\n        let e = H[4];\n        for (let t = 0; t < 80; ++t) {\n            const s = Math.floor(t / 20);\n            const T = (ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t]) >>> 0;\n            e = d;\n            d = c;\n            c = ROTL(b, 30) >>> 0;\n            b = a;\n            a = T;\n        }\n        H[0] = (H[0] + a) >>> 0;\n        H[1] = (H[1] + b) >>> 0;\n        H[2] = (H[2] + c) >>> 0;\n        H[3] = (H[3] + d) >>> 0;\n        H[4] = (H[4] + e) >>> 0;\n    }\n    return Uint8Array.of(H[0] >> 24, H[0] >> 16, H[0] >> 8, H[0], H[1] >> 24, H[1] >> 16, H[1] >> 8, H[1], H[2] >> 24, H[2] >> 16, H[2] >> 8, H[2], H[3] >> 24, H[3] >> 16, H[3] >> 8, H[3], H[4] >> 24, H[4] >> 16, H[4] >> 8, H[4]);\n}\nexport default sha1;\n","import sha1 from './sha1.js';\nimport v35, { DNS, URL } from './v35.js';\nexport { DNS, URL } from './v35.js';\nfunction v5(value, namespace, buf, offset) {\n    return v35(0x50, sha1, value, namespace, buf, offset);\n}\nv5.DNS = DNS;\nv5.URL = URL;\nexport default v5;\n","import { v5 as uuidv5 } from 'uuid';\nimport { IStringKeyedObject } from \"./interfaces\";\n\n// TODO: make this customizable.\nconst DEFAULT_LANGUAGE = \"en\";\nconst SLUG_LENGTH = 20;\nconst UUID_NAMESPACE = '1a79f1c8-9505-4bea-a18e-28a053f725ca'; // Generated for this purpose.\nconst UUID_NAMESPACE_COMPRESSION = uuidv5('compression', '1a79f1c8-9505-4bea-a18e-28a053f725ca');\n\nlet currentLanguage: string | undefined;\n\nfunction slugify(original: any): string {\n    return `${original}`.replaceAll(/[^A-Za-z0-9_]/g, \"\").slice(0, SLUG_LENGTH);\n}\n\nfunction getCurrentLanguage(): string {\n  return currentLanguage || ((typeof navigator != 'undefined' && navigator.language) || DEFAULT_LANGUAGE).slice(0, 2);\n}\n\nfunction setCurrentLanguage(lang: string) {\n  currentLanguage = lang;\n}\n\nclass AttrPromise<T> extends Promise<T> implements IStringKeyedObject {\n  [key: string | symbol]: any;\n  [Symbol.toPrimitive]: undefined;\n  constructor(\n    executor: (\n      resolve: (value: T | PromiseLike<T>) => void,\n      reject: (reason: any) => void,\n    ) => void,\n  ) {\n    super(executor);\n    const proxy = new Proxy(this, {\n      set: (object: AttrPromise<T>, keyObj, value) => {\n        object.then((val: any) => {\n          val[keyObj] = value;\n          return val;\n        });\n        return true;\n      },\n      get: (object: AttrPromise<T>, keyObj: string | symbol) => {\n        if (keyObj in object) {\n          const value: any = object[keyObj];\n          if (typeof value === \"function\") {\n            return value.bind(object);\n          }\n          return value;\n        }\n        const key = keyObj.toString();\n        if (key in object) {\n          const value: any = object[key];\n          if (typeof value === \"function\") {\n            return value.bind(object);\n          }\n          return value;\n        }\n        if (object instanceof Promise) {\n          return object.then((val: any) => {\n            return val ? val[keyObj] : val;\n          });\n        }\n        return object[keyObj];\n      },\n    });\n    return proxy;\n  }\n}\n\nconst KEY_COMPRESSION_LENGTH = 1000;\nfunction generateUuidv5(group: [type: string, id?: string], key: string | string[]) {\n  if (Array.isArray(key)) {\n    let shortKey = '';\n    let keyTracker = '';\n    key.forEach(k => {\n      if (keyTracker.length + k.length + 1 > KEY_COMPRESSION_LENGTH) {\n        shortKey = uuidv5(shortKey + '>' + keyTracker, UUID_NAMESPACE_COMPRESSION);\n        keyTracker = k;\n      } else {\n        keyTracker += ';' + k;\n      }\n    });\n  }\n  return uuidv5(`${group[0]}:${group[1]}:${key}`, UUID_NAMESPACE);\n}\n\nexport { slugify, AttrPromise, getCurrentLanguage, generateUuidv5, setCurrentLanguage };\n","import { v4 as uuidv4 } from 'uuid';\nimport { generateUuidv5 } from './utils';\nconst UUID_NAMESPACE = '1a79f1c8-9505-4bea-a18e-28a053f725ca'; // Generated for this purpose.\nimport { getCurrentLanguage, slugify } from './utils';\n\nclass StaticGraphMeta {\n  [key: string]: any\n  author: string | undefined\n  cards: number | undefined\n  cards_x_nodes_x_widgets: number | undefined\n  color: string | undefined\n  description: {[lang: string]: string} | undefined\n  edges: number | undefined\n  graphid: string\n  iconclass: string | undefined\n  is_editable: boolean | undefined\n  isresource: boolean | undefined\n  jsonldcontext: {[key: string]: any} | undefined\n  name: {[lang: string]: string} | undefined\n  nodegroups: number | undefined\n  nodes: number | undefined\n  ontology_id: string | undefined\n  publication: {[key: string]: string | null} | undefined\n  relatable_resource_model_ids: string[] = []\n  resource_2_resource_constraints: any[] = []\n  root: StaticNode | undefined\n  slug: string | undefined\n  subtitle: {[lang: string]: string} | undefined\n  version: string | undefined\n\n  constructor(jsondata: StaticGraphMeta) {\n    this.graphid = jsondata.graphid;\n    Object.assign(this, jsondata)\n  }\n}\n\nclass StaticTranslatableString extends String {\n  translations: Map<string, string>;\n  lang: string;\n\n  constructor(\n    s: string | StaticTranslatableString,\n    lang: undefined | string = undefined,\n  ) {\n    let translations: Map<string, string>;\n    let finalLang: string;\n    if (s instanceof StaticTranslatableString) {\n      translations = new Map(s.translations);\n      if (lang === undefined) {\n        finalLang = s.lang;\n      } else {\n        finalLang = lang;\n      }\n    } else if (typeof s === \"object\") {\n      translations = new Map(Object.entries(s));\n      if (lang === undefined || !translations.has(lang)) {\n        const defaultLanguage = getCurrentLanguage();\n        if (!translations || translations.has(defaultLanguage)) {\n          finalLang = defaultLanguage;\n        } else {\n          finalLang = Object.keys(s)[0];\n        }\n      } else {\n        finalLang = lang;\n      }\n    } else {\n      translations = new Map();\n      finalLang = lang || getCurrentLanguage();\n      translations.set(finalLang, s);\n    }\n    s = translations.get(finalLang) || \"\";\n    super(s);\n    this.translations = translations;\n    this.lang = finalLang;\n  }\n\n  copy?() {\n    return new StaticTranslatableString(this, this.lang);\n  }\n\n  toString(): string {\n    const current = this.lang || getCurrentLanguage();\n    let asString;\n    if (this.translations.size) {\n      asString = this.translations.get(current) || this.translations.values().next().value\n    }\n    return `${asString}`;\n  }\n\n  toJSON(): {[key: string]: string} {\n    return Object.fromEntries(this.translations);\n  }\n}\n\nclass StaticNodegroup {\n  cardinality: \"1\" | \"n\" | null;\n  legacygroupid: null;\n  nodegroupid: string;\n  parentnodegroup_id: string | null;\n\n  constructor(jsonData: StaticNodegroup) {\n    this.legacygroupid = jsonData.legacygroupid;\n    this.nodegroupid = jsonData.nodegroupid;\n    this.parentnodegroup_id = jsonData.parentnodegroup_id;\n    this.cardinality = jsonData.cardinality;\n  }\n\n  copy?(): StaticNodegroup {\n    return new StaticNodegroup(this);\n  }\n}\n\nclass StaticNode {\n  alias: string | null;\n  config: { [key: string]: any } | null;\n  datatype: string;\n  description: string | null;\n  exportable: boolean;\n  fieldname: null | string;\n  graph_id: string;\n  hascustomalias: boolean;\n  is_collector: boolean;\n  isrequired: boolean;\n  issearchable: boolean;\n  istopnode: boolean;\n  name: string;\n  nodegroup_id: string | null;\n  nodeid: string;\n  ontologyclass: string | null = null;\n  parentproperty: string | null = null;\n  sortorder: number;\n  sourcebranchpublication_id: null | string = null;\n\n  constructor(jsonData: StaticNode) {\n    this.alias = jsonData.alias;\n    this.config = jsonData.config;\n    this.datatype = jsonData.datatype;\n    this.description = jsonData.description;\n    this.exportable = jsonData.exportable;\n    this.fieldname = jsonData.fieldname;\n    this.graph_id = jsonData.graph_id;\n    this.hascustomalias = jsonData.hascustomalias;\n    this.is_collector = jsonData.is_collector;\n    this.isrequired = jsonData.isrequired;\n    this.issearchable = jsonData.issearchable;\n    this.istopnode = jsonData.istopnode;\n    this.name = jsonData.name;\n    this.nodegroup_id = jsonData.nodegroup_id;\n    this.nodeid = jsonData.nodeid;\n    this.parentproperty = jsonData.parentproperty;\n    this.sortorder = jsonData.sortorder;\n    this.ontologyclass = jsonData.ontologyclass;\n    this.sourcebranchpublication_id = jsonData.sourcebranchpublication_id;\n  }\n\n  copy?(): StaticNode {\n    // TODO: config should be deep copied\n    return new StaticNode(this);\n  }\n\n  // true -- same object\n  // 2 -- identical\n  // 1 -- identical not counting falsey nodeid, nodegroupid and/or graphid\n  // -1 -- identical up to nodeid\n  // -2 -- identical up to nodeid, nodegroupid\n  // -3 -- identical up to nodeid, nodegroupid and graphid\n  // false -- different\n  // for <2, falsey nodeid, nodegroupid and graphid count as matches\n  // and copy/compare are ignored.\n  static compare(nodeA: StaticNode | {[key: string]: any}, nodeB: StaticNode | {[key: string]: any}): number | boolean {\n    if (nodeA === nodeB) {\n      return true;\n    }\n    const keys = [...Object.keys(nodeA), ...Object.keys(nodeB)].filter(key => ![\n      'compare',\n      'copy',\n      'nodeid',\n      'graph_id',\n      'nodegroup_id'\n    ].includes(key));\n    // doubles keys...\n    function compareEntries(entriesA: [string, any][], entriesB: [string, any][]) {\n      const entryPairs: {[key: string]: any} = {};\n      for (const [key, value] of [...entriesA, ...entriesB]) {\n        entryPairs[key] = entryPairs[key] || [];\n        entryPairs[key].push(value);\n      }\n      for (const [_, [valA, valB]] of Object.entries(entryPairs)) {\n        if (valA && valB && typeof valA === 'object' && typeof valB === 'object') {\n          if (!compareEntries(Object.entries(valA), Object.entries(valB))) {\n            return false;\n          }\n        }\n        if (Array.isArray(valA) && Array.isArray(valB)) {\n          if (!compareEntries(Object.entries(valA), Object.entries(valB))) {\n            return false;\n          }\n        }\n        if (valA !== valB) {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (!compareEntries(\n      // @ts-expect-error Expecting values to be symbols\n      keys.map((k: string): [string, any][] => [k, nodeA[k]]),\n      // @ts-expect-error Expecting values to be symbols\n      keys.map((k: string): [string, any][] => [k, nodeB[k]])\n    )) {\n      return false;\n    }\n\n    // We know these are the same up to the IDs\n    if (nodeA.graph_id && nodeB.graph_id && nodeA.graph_id !== nodeB.graph_id) {\n      return -3;\n    }\n    if (nodeA.nodegroup_id && nodeB.nodegroup_id && nodeA.nodegroup_id !== nodeB.nodegroup_id) {\n      return -2;\n    }\n    if (nodeA.nodeid && nodeB.nodeid && nodeA.nodeid !== nodeB.nodeid) {\n      return -1;\n    }\n    if (\n      (nodeA.graph_id && nodeB.graph_id || nodeA.graph_id === nodeB.graph_id) &&\n      (nodeA.nodegroup_id && nodeB.nodegroup_id || nodeA.nodegroup_id === nodeB.nodegroup_id) &&\n      (nodeA.nodeid && nodeB.nodeid || nodeA.nodeid === nodeB.nodeid)\n    ) {\n      return 2;\n    }\n    return 1;\n  }\n}\n\nclass StaticConstraint {\n  card_id: string;\n  constraintid: string;\n  nodes: Array<string>;\n  uniquetoallinstances: boolean;\n\n  constructor(jsonData: StaticConstraint) {\n    this.card_id = jsonData.card_id;\n    this.constraintid = jsonData.constraintid;\n    this.nodes = jsonData.nodes;\n    this.uniquetoallinstances = jsonData.uniquetoallinstances;\n  }\n}\n\nclass StaticCard {\n  active: boolean;\n  cardid: string;\n  component_id: string;\n  config: null | object;\n  constraints: Array<StaticConstraint>;\n  cssclass: null | string;\n  description: string | null;\n  graph_id: string;\n  helpenabled: boolean;\n  helptext: StaticTranslatableString;\n  helptitle: StaticTranslatableString;\n  instructions: StaticTranslatableString;\n  is_editable: boolean;\n  name: StaticTranslatableString;\n  nodegroup_id: string;\n  sortorder: number | null;\n  visible: boolean;\n\n  constructor(jsonData: StaticCard) {\n    this.active = jsonData.active;\n    this.cardid = jsonData.cardid;\n    this.component_id = jsonData.component_id;\n    this.config = jsonData.config;\n    this.constraints = jsonData.constraints.map(\n      (constraint) => new StaticConstraint(constraint),\n    );\n    this.cssclass = jsonData.cssclass;\n    this.description = jsonData.description;\n    this.graph_id = jsonData.graph_id;\n    this.helpenabled = jsonData.helpenabled;\n    this.helptext = new StaticTranslatableString(jsonData.helptext);\n    this.helptitle = new StaticTranslatableString(jsonData.helptitle);\n    this.instructions = new StaticTranslatableString(jsonData.instructions);\n    this.is_editable = jsonData.is_editable;\n    this.name = new StaticTranslatableString(jsonData.name);\n    this.nodegroup_id = jsonData.nodegroup_id;\n    this.sortorder = jsonData.sortorder;\n    this.visible = jsonData.visible;\n  }\n}\n\nclass StaticCardsXNodesXWidgets {\n  card_id: string;\n  config: object;\n  id: string;\n  label: StaticTranslatableString;\n  node_id: string;\n  sortorder: number;\n  visible: boolean;\n  widget_id: string;\n\n  constructor(jsonData: StaticCardsXNodesXWidgets) {\n    this.card_id = jsonData.card_id;\n    this.config = jsonData.config;\n    this.id = jsonData.id;\n    this.label = new StaticTranslatableString(jsonData.label);\n    this.node_id = jsonData.node_id;\n    this.sortorder = jsonData.sortorder;\n    this.visible = jsonData.visible;\n    this.widget_id = jsonData.widget_id;\n  }\n}\n\nclass StaticEdge {\n  description: string | null;\n  domainnode_id: string;\n  edgeid: string;\n  graph_id: string;\n  name: null | string;\n  ontologyproperty: null | string = null;\n  rangenode_id: string;\n\n  constructor(jsonData: StaticEdge) {\n    this.description = jsonData.description;\n    this.domainnode_id = jsonData.domainnode_id;\n    this.edgeid = jsonData.edgeid;\n    this.graph_id = jsonData.graph_id;\n    this.name = jsonData.name;\n    this.rangenode_id = jsonData.rangenode_id;\n    this.ontologyproperty = jsonData.ontologyproperty;\n  }\n\n  copy?(): StaticEdge {\n    return new StaticEdge(this);\n  }\n}\n\ninterface IStaticDescriptorConfig {\n  descriptor_types: {\n    nodegroup_id: string,\n    string_template: string\n  }[],\n};\n\nclass StaticFunctionsXGraphs {\n  config: IStaticDescriptorConfig;\n  function_id: string;\n  graph_id: string;\n  id: string;\n\n  constructor(jsonData: StaticFunctionsXGraphs) {\n    this.config = jsonData.config;\n    this.function_id = jsonData.function_id;\n    this.graph_id = jsonData.graph_id;\n    this.id = jsonData.id;\n  }\n\n  copy(): StaticFunctionsXGraphs {\n    return new StaticFunctionsXGraphs(this);\n  }\n}\n\nclass StaticPublication {\n  graph_id: string;\n  notes: null | string;\n  publicationid: string;\n  published_time: string;\n\n  constructor(jsonData: StaticPublication) {\n    this.graph_id = jsonData.graph_id;\n    this.notes = jsonData.notes;\n    this.publicationid = jsonData.publicationid;\n    this.published_time = jsonData.published_time;\n  }\n\n  copy?(): StaticPublication {\n    return new StaticPublication(this);\n  }\n}\n\nclass StaticGraph {\n  author: string;\n  cards: Array<StaticCard> | null = null;\n  cards_x_nodes_x_widgets: Array<StaticCardsXNodesXWidgets> | null = null;\n  color: string | null;\n  config: object;\n  deploymentdate: null | string = null;\n  deploymentfile: null | string = null;\n  description: StaticTranslatableString;\n  edges: Array<StaticEdge>;\n  functions_x_graphs: Array<StaticFunctionsXGraphs> | null = null;\n  graphid: string;\n  iconclass: string;\n  is_editable: boolean | null = null;\n  isresource: boolean;\n  jsonldcontext: string | null = null;\n  name: StaticTranslatableString;\n  nodegroups: Array<StaticNodegroup>;\n  nodes: Array<StaticNode>;\n  ontology_id: string | null = null;\n  publication: StaticPublication | null = null;\n  relatable_resource_model_ids: Array<string>;\n  resource_2_resource_constraints: Array<any> | null = null;\n  root: StaticNode;\n  slug: string | null = null;\n  subtitle: StaticTranslatableString;\n  template_id: string;\n  version: string;\n\n  constructor(jsonData: StaticGraph) {\n    this.author = jsonData.author;\n    this.cards =\n      jsonData.cards && jsonData.cards.map((card) => new StaticCard(card));\n    this.cards_x_nodes_x_widgets =\n      jsonData.cards_x_nodes_x_widgets &&\n      jsonData.cards_x_nodes_x_widgets.map(\n        (card_x_node_x_widget) =>\n          new StaticCardsXNodesXWidgets(card_x_node_x_widget),\n      );\n    this.color = jsonData.color;\n    this.config = jsonData.config;\n    this.deploymentdate = jsonData.deploymentdate;\n    this.deploymentfile = jsonData.deploymentfile;\n    this.description = new StaticTranslatableString(jsonData.description);\n    this.edges = jsonData.edges.map((edge) => new StaticEdge(edge));\n    this.functions_x_graphs =\n      jsonData.functions_x_graphs &&\n      jsonData.functions_x_graphs.map(\n        (functions_x_graphs) => new StaticFunctionsXGraphs(functions_x_graphs),\n      );\n    this.graphid = jsonData.graphid;\n    this.iconclass = jsonData.iconclass;\n    this.is_editable = jsonData.is_editable;\n    this.isresource = jsonData.isresource;\n    this.jsonldcontext = jsonData.jsonldcontext;\n    this.name = new StaticTranslatableString(jsonData.name);\n    this.nodegroups = jsonData.nodegroups.map(\n      (nodegroup) => new StaticNodegroup(nodegroup),\n    );\n    this.nodes = jsonData.nodes.map((node) => new StaticNode(node));\n    this.ontology_id = jsonData.ontology_id;\n    this.publication =\n      jsonData.publication && new StaticPublication(jsonData.publication);\n    this.relatable_resource_model_ids = jsonData.relatable_resource_model_ids;\n    this.resource_2_resource_constraints =\n      jsonData.resource_2_resource_constraints;\n    this.root = jsonData.root;\n    this.slug = jsonData.slug;\n    this.subtitle = new StaticTranslatableString(jsonData.subtitle);\n    this.template_id = jsonData.template_id;\n    this.version = jsonData.version;\n  }\n\n  // TODO: complete deepcopy\n  copy?(): StaticGraph {\n    const newGraph = new StaticGraph(this);\n    Object.assign(newGraph, {\n      author: this.author,\n      cards: this.cards?.map(card => new StaticCard(card)) || [],\n      cards_x_nodes_x_widgets: this.cards_x_nodes_x_widgets?.map(cnw => new StaticCardsXNodesXWidgets(cnw)) || [],\n      color: this.color,\n      config: Object.assign({}, this.config), // TODO: deepcopy;\n      deploymentdate: this.deploymentdate,\n      deploymentfile: this.deploymentfile,\n      description: this.description.copy && this.description.copy() || this.description,\n      edges: this.edges.map(edge => edge.copy && edge.copy() || edge),\n      functions_x_graphs: this.functions_x_graphs?.map(fxg => fxg.copy()) || [],\n      graphid: this.graphid,\n      iconclass: this.iconclass,\n      is_editable: this.is_editable,\n      isresource: this.isresource,\n      jsonldcontext: this.jsonldcontext,\n      name: this.name.copy && this.name.copy() || this.name,\n      nodegroups: this.nodegroups?.map(ng => ng.copy && ng.copy() || ng),\n      nodes: this.nodes?.map(n => n.copy && n.copy() || n),\n      ontology_id: this.ontology_id,\n      publication: this.publication?.copy && this.publication.copy() || null,\n      relatable_resource_model_ids: [...this.relatable_resource_model_ids || []],\n      resource_2_resource_constraints: [...this.resource_2_resource_constraints || []],\n      root: this.root.copy && this.root.copy() || this.root,\n      slug: this.slug,\n      subtitle: this.subtitle.copy && this.subtitle.copy(),\n      template_id: this.template_id,\n      version: this.version\n    });\n    return newGraph;\n  }\n\n  static create(props: {\n    author?: string,\n    color?: string | null,\n    config?: object,\n    deploymentdate?: null | string,\n    deploymentfile?: null | string,\n    description?: string | StaticTranslatableString,\n    graphid?: string,\n    iconclass?: string,\n    is_editable?: boolean | null,\n    isresource?: boolean,\n    jsonldcontext?: string | null,\n    name?: string | StaticTranslatableString,\n    ontology_id?: string | null,\n    relatable_resource_model_ids?: Array<string>,\n    resource_2_resource_constraints?: Array<any> | null,\n    slug?: string | null,\n    subtitle?: string | StaticTranslatableString,\n    template_id?: string,\n    version?: string\n  }, published: boolean=true): StaticGraph {\n    const graphid = props.graphid || uuidv4();\n    const publication = published ? new StaticPublication({\n      graph_id: graphid,\n      notes: null,\n      publicationid: uuidv4(),\n      published_time: (new Date()).toISOString()\n    }) : null;\n    // TODO: check name is not just string in upstream\n    const name = props.name ? (\n      props.name instanceof StaticTranslatableString ?\n      props.name : new StaticTranslatableString(props.name)\n    ) : new StaticTranslatableString('');\n    const alias = slugify(name);\n    const root = new StaticNode({\n      \"alias\": alias,\n      \"config\": {},\n      \"datatype\": \"semantic\",\n      \"description\": \"\",\n      \"exportable\": false,\n      \"fieldname\": \"\",\n      \"graph_id\": graphid,\n      \"hascustomalias\": false,\n      \"is_collector\": false,\n      \"isrequired\": false,\n      \"issearchable\": true,\n      \"istopnode\": true,\n      \"name\": name.toString(),\n      \"nodegroup_id\": null,\n      \"nodeid\": graphid,\n      \"ontologyclass\": props.ontology_id || null,\n      \"parentproperty\": null,\n      \"sortorder\": 0,\n      \"sourcebranchpublication_id\": null\n    });\n    return new StaticGraph({\n      author: props.author,\n      cards: null,\n      cards_x_nodes_x_widgets: null,\n      color: props.color || null,\n      config: props.config || {},\n      deploymentdate: props.deploymentdate || null,\n      deploymentfile: props.deploymentfile || null,\n      description: props.description ? (\n        props.description instanceof StaticTranslatableString ?\n        props.description : new StaticTranslatableString(props.description)\n      ) : null,\n      edges: [],\n      functions_x_graphs: [],\n      graphid: graphid,\n      iconclass: props.iconclass || '',\n      is_editable: props.is_editable || null,\n      isresource: props.isresource || null,\n      jsonldcontext: props.jsonldcontext || null,\n      name: name,\n      nodegroups: [],\n      nodes: [root.copy()],\n      ontology_id: props.ontology_id || null,\n      publication: publication,\n      relatable_resource_model_ids: props.relatable_resource_model_ids || [],\n      resource_2_resource_constraints: props.resource_2_resource_constraints || null,\n      root: root,\n      slug: props.slug || null,\n      subtitle: props.subtitle ? (\n        props.subtitle instanceof StaticTranslatableString ?\n        props.subtitle : new StaticTranslatableString(props.subtitle)\n      ) : new StaticTranslatableString(''),\n      template_id: props.template_id || '',\n      version: props.version || ''\n    });\n  }\n}\n\n/// Resources\n//\ntype StaticProvisionalEdit = any;\n\nclass StaticValue {\n  id: string;\n  value: string;\n  __concept?: StaticConcept | null;\n  __conceptId?: string | null;\n\n  constructor(jsonData: StaticValue, concept: StaticConcept | string | null = null) {\n    this.id = jsonData.id;\n    this.value = jsonData.value;\n    if (concept instanceof StaticConcept) {\n      this.__concept = concept;\n      this.__conceptId = concept ? concept.id : null;\n    } else {\n      this.__concept = null;\n      this.__conceptId = concept;\n    }\n  }\n\n  toString() {\n    return this.value;\n  }\n\n  static create(referent: string | StaticConcept, valueType: string, value: string, language?: string) {\n    const lang = language || getCurrentLanguage();\n    const referentId = referent instanceof StaticConcept ? referent.id : referent;\n    // NB: this means passing an ID of a concept, and a concept, have different ID-creating behaviour.\n    const concept = referent instanceof StaticConcept ? referent : null;\n    const id = generateUuidv5(\n      ['value'],\n      `${referentId}/${valueType}/${value}/${lang}`\n    );\n    return new StaticValue(\n      {\n        id: id,\n        value: value\n      },\n      concept\n    );\n  }\n}\n\nclass StaticConcept {\n  id: string;\n  prefLabels: { [lang: string]: StaticValue };\n  source: string | null;\n  sortOrder: number | null;\n  children: StaticConcept[] | null;\n\n  constructor(jsonData: StaticConcept) {\n    this.id = jsonData.id;\n    this.prefLabels = jsonData.prefLabels;\n    for (const [lang, value] of Object.entries(this.prefLabels)) {\n      if (!(value instanceof StaticValue)) {\n        this.prefLabels[lang] = new StaticValue(value, this);\n      }\n    }\n    this.source = jsonData.source;\n    this.sortOrder = jsonData.sortOrder;\n    this.children = jsonData.children;\n    if (this.children) {\n      this.children = this.children.map((child) => {\n        return child instanceof StaticConcept\n          ? child\n          : new StaticConcept(child);\n      });\n    }\n  }\n\n  getPrefLabel?(): StaticValue {\n    return (\n      this.prefLabels[getCurrentLanguage()] || Object.values(this.prefLabels)[0]\n    );\n  }\n\n  toString() {\n    if (!this.getPrefLabel) {\n      return this.constructor(this).getPrefLabel().value;\n    }\n    return this.getPrefLabel().value;\n  }\n\n  // NB: copies value, does not make it a child\n  static fromValue(conceptScheme: StaticConcept | null, value: string | StaticValue | { [lang: string]: StaticValue }, children?: (string | StaticValue | StaticConcept)[], config: {baseLanguage?: string, source?: string | null, sortOrder?: number | null} = {}): StaticConcept {\n    // TODO make sure that children are in the same concept scheme so that deterministic IDs are preserved.\n    let lang = config?.baseLanguage || getCurrentLanguage();\n    let tmpValue;\n    let prefLabels: { [lang: string]: StaticValue };\n    if (typeof value === 'string') {\n      tmpValue = value;\n      prefLabels = {[lang]: new StaticValue({id: '', value: tmpValue})};\n    } else if (value instanceof StaticValue) {\n      tmpValue = value.value;\n      prefLabels = {[lang]: value};\n    } else if (lang in value) {\n      tmpValue = value[lang].value;\n      prefLabels = value;\n    } else {\n      const firstValue = Object.entries(value).sort()[0];\n      if (firstValue === undefined) {\n        throw Error(\"Cannot create a concept from values without a non-empty value\");\n      }\n      lang = firstValue[0];\n      tmpValue = firstValue[1].value;\n      prefLabels = value;\n    }\n    const conceptId = generateUuidv5(\n      ['concept'],\n      `${conceptScheme?.id || '(none)'}/${tmpValue}`\n    );\n    const childConcepts = (children || []).map(child => {\n      if (!(child instanceof StaticConcept)) {\n        return StaticConcept.fromValue(conceptScheme, value, [], {baseLanguage: config.baseLanguage});\n      }\n      return child;\n    });\n    return new StaticConcept({\n      id: conceptId,\n      prefLabels,\n      source: config.source || null,\n      sortOrder: config.sortOrder || null,\n      children: childConcepts\n    });\n  }\n}\n\n// A prefLabel, for example, can only exist once per language.\nclass StaticCollection {\n  id: string;\n  prefLabels: { [lang: string]: StaticValue };\n  concepts: { [conceptId: string]: StaticConcept };\n  __allConcepts: { [conceptId: string]: StaticConcept };\n  __values: { [valueId: string]: StaticValue };\n\n  static fromConceptScheme(props: {\n    collectionid?: string,\n    name?: string | { [lang: string]: StaticValue } | StaticValue;\n    conceptScheme: StaticConcept\n  }): StaticCollection {\n    const collectionName = props.name ?? props.conceptScheme.toString();\n    return StaticCollection.create({\n      name: collectionName,\n      concepts: props.conceptScheme.children || []\n    })\n  }\n\n  static create(props: {\n    collectionid?: string,\n    name: string | { [lang: string]: StaticValue } | StaticValue;\n    concepts: StaticConcept[] | { [conceptId: string]: StaticConcept }\n  }): StaticCollection {\n    let concepts = props.concepts;\n    if (Array.isArray(concepts)) {\n      concepts = concepts.reduce(\n        (acc: { [conceptId: string]: StaticConcept }, c: StaticConcept) => {\n          acc[c.id] = c;\n          return acc;\n        },\n      {});\n    }\n    const name: StaticValue | { [lang: string]: StaticValue } = (\n      typeof props.name === 'string' ?\n        StaticValue.create('', 'prefLabel', props.name) :\n        props.name\n      );\n    let collectionid = props.collectionid;\n    if (!collectionid) {\n      if (typeof name === 'string') {\n        collectionid = generateUuidv5(\n          ['collection'],\n          name\n        );\n      } else if (name instanceof StaticValue) {\n        collectionid = generateUuidv5(\n          ['collection'],\n          name.value\n        );\n      } else {\n        throw Error(\"Must have a unique name to create a collection ID\");\n      }\n    }\n    const prefLabels: { [lang: string]: StaticValue } = name instanceof StaticValue ? {\n      [getCurrentLanguage()]: name\n    } : name;\n    return new StaticCollection({\n      id: collectionid,\n      prefLabels: prefLabels,\n      concepts: concepts,\n      __allConcepts: {},\n      __values: {}\n    });\n  }\n\n  constructor(jsonData: StaticCollection) {\n    this.id = jsonData.id;\n    this.prefLabels = jsonData.prefLabels;\n    this.concepts = jsonData.concepts;\n    this.__allConcepts = {};\n    this.__values = {};\n    const addValues = (concept: StaticConcept) => {\n      this.__allConcepts[concept.id] = concept;\n      for (const [, value] of Object.entries(concept.prefLabels)) {\n        this.__values[value.id] = value;\n      }\n      if (concept.children) {\n        for (let child of concept.children) {\n          if (!(child instanceof StaticConcept)) {\n            child = new StaticConcept(child);\n          }\n          addValues(child);\n        }\n      }\n    };\n    for (const [id, concept] of Object.entries(this.concepts)) {\n      if (!(concept instanceof StaticConcept)) {\n        this.concepts[id] = new StaticConcept(concept);\n      }\n      addValues(this.concepts[id]);\n    }\n  }\n\n  getConceptValue?(valueId: string) {\n    return this.__values[valueId];\n  }\n\n  getConceptByValue?(label: string) {\n    return Object.values(this.__values).find(value => value.value == label)?.__concept;\n  }\n\n  toString(): string {\n    return (this.prefLabels[getCurrentLanguage()] || Object.values(this.prefLabels)[0] || '').toString();\n  }\n}\n\nclass StaticTile {\n  data: Map<\n    string,\n    object | Map<string, any> | Array<any> | null | number | boolean | string\n  >;\n  nodegroup_id: string;\n  resourceinstance_id: string;\n  tileid: string | null;\n  parenttile_id: string | null = null;\n  provisionaledits: null | Array<StaticProvisionalEdit> = null;\n  sortorder: number | null = null;\n\n  constructor(jsonData: StaticTile) {\n    this.data = jsonData.data;\n    if (typeof this.data === 'object' && !(this.data instanceof Map)) {\n      this.data = new Map(Object.entries(this.data));\n    }\n    this.nodegroup_id = jsonData.nodegroup_id;\n    this.resourceinstance_id = jsonData.resourceinstance_id;\n    this.tileid = jsonData.tileid;\n    this.parenttile_id = jsonData.parenttile_id;\n    this.provisionaledits = jsonData.provisionaledits;\n    this.sortorder = jsonData.sortorder;\n  }\n\n  ensureId(): string {\n    if (!this.tileid) {\n      this.tileid = crypto.randomUUID();\n    }\n    return this.tileid;\n  }\n}\n\nclass StaticResourceDescriptors {\n  [key: string]: (string | undefined | (() => boolean));\n  name?: string;\n  map_popup?: string;\n  description?: string;\n\n  constructor(jsonData?: StaticResourceDescriptors) {\n    if (jsonData) {\n      this.name = jsonData.name;\n      this.map_popup = jsonData.map_popup;\n      this.description = jsonData.description;\n    }\n  }\n\n  isEmpty(): boolean {\n    return !(this.name || this.map_popup || this.description);\n  }\n}\n\nclass StaticResourceMetadata {\n  descriptors: StaticResourceDescriptors;\n  graph_id: string;\n  name: string;\n  resourceinstanceid: string;\n  publication_id: string | null = null;\n  principaluser_id: number | null = null;\n  legacyid: null | string = null;\n  graph_publication_id: string | null = null;\n\n  constructor(jsonData: StaticResourceMetadata) {\n    this.descriptors = jsonData.descriptors;\n    if (!(this.descriptors instanceof StaticResourceDescriptors)) {\n      if (jsonData.descriptors instanceof Map) {\n        this.descriptors = new StaticResourceDescriptors(Object.fromEntries(jsonData.descriptors.entries()));\n      } else {\n        this.descriptors = new StaticResourceDescriptors(this.descriptors);\n      }\n    }\n    this.graph_id = jsonData.graph_id;\n    this.name = jsonData.name;\n    this.resourceinstanceid = jsonData.resourceinstanceid;\n    this.publication_id = jsonData.publication_id;\n    this.principaluser_id = jsonData.principaluser_id;\n    this.legacyid = jsonData.legacyid;\n    this.graph_publication_id = jsonData.graph_publication_id;\n  }\n}\n\nclass StaticDomainValue {\n  id: string\n  selected: boolean\n  text: {[lang: string]: string}\n\n  constructor(jsonData: StaticDomainValue) {\n    this.id = jsonData.id;\n    this.selected = jsonData.selected;\n    this.text = jsonData.text;\n  }\n\n  toString() {\n    const lang = getCurrentLanguage();\n    let localized = this.text[lang];\n    if (typeof localized !== \"string\") {\n      localized = Object.values(this.text)[0];\n    }\n    if (!localized) {\n      throw Error(`Could not render domain value ${this.id} in language ${lang}`);\n    }\n    return localized;\n  }\n\n  lang(lang: string): string | undefined {\n    return this.text[lang];\n  }\n\n  async forJson() {\n    return {\n      id: this.id,\n      selected: this.selected,\n      text: this.text\n    }\n  }\n}\n\nclass StaticResourceReference {\n  id: string;\n  type: string | undefined;\n  graphId: string;\n  title: string | undefined;\n  root: any | undefined;\n  meta?: {[key: string]: any};\n\n  constructor(jsonData: StaticResourceReference) {\n    this.id = jsonData.id;\n    this.type = jsonData.type;\n    this.graphId = jsonData.graphId;\n    this.root = jsonData.root;\n    this.title = jsonData.title;\n    if (jsonData.meta) {\n      this.meta = jsonData.meta;\n    }\n  }\n}\n\nclass StaticResource {\n  resourceinstance: StaticResourceMetadata;\n  tiles: Array<StaticTile> | null = null;\n  metadata: {[key: string]: string};\n  __cache: {[tileId: string]: {[nodeId: string]: {[key: string]: string}}} | undefined = undefined;\n  __source: string | undefined = undefined;\n  __scopes: string[] | undefined = undefined;\n\n  constructor(jsonData: StaticResource) {\n    this.resourceinstance = new StaticResourceMetadata(\n      jsonData.resourceinstance,\n    );\n    this.tiles =\n      jsonData.tiles && jsonData.tiles.map((tile) => new StaticTile(tile));\n    this.metadata = jsonData.metadata || {};\n    this.__cache = jsonData.__cache;\n    this.__scopes = jsonData.__scopes;\n  }\n}\n\nexport {\n  StaticValue,\n  StaticTile,\n  StaticGraph,\n  StaticResource,\n  StaticResourceMetadata,\n  StaticNode,\n  StaticNodegroup,\n  StaticEdge,\n  StaticCard,\n  StaticCardsXNodesXWidgets,\n  StaticCollection,\n  StaticConcept,\n  StaticDomainValue,\n  StaticResourceReference,\n  StaticGraphMeta,\n  StaticFunctionsXGraphs,\n  StaticResourceDescriptors,\n  StaticTranslatableString,\n  StaticConstraint,\n  type IStaticDescriptorConfig\n};\n","import { StaticGraphMeta, StaticGraph, StaticResource } from \"./static-types\";\nimport { StaticCollection } from \"./rdm\";\n\nclass GraphResult {\n  models: {[graphId: string]: StaticGraphMeta};\n\n  constructor(jsonData: GraphResult) {\n    this.models = Object.fromEntries(\n      Object.entries(jsonData.models).map(([k, v]) => [k, new StaticGraphMeta(v)])\n    );\n  }\n}\n\nabstract class ArchesClient {\n  abstract getGraphs(): Promise<GraphResult>;\n\n  abstract getGraph(graph: StaticGraphMeta): Promise<StaticGraph | null>;\n\n  abstract getGraphByIdOnly(graphId: string): Promise<StaticGraph | null>;\n\n  abstract getResources(\n    graphId: string,\n    limit: number,\n  ): Promise<StaticResource[]>;\n\n  abstract getResource(resourceId: string): Promise<StaticResource>;\n\n  abstract getCollection(collectionId: string): Promise<StaticCollection>;\n}\n\nclass ArchesClientRemote extends ArchesClient {\n  archesUrl: string;\n\n  constructor(archesUrl: string) {\n    super();\n    this.archesUrl = archesUrl;\n  }\n\n  async getGraphs(): Promise<GraphResult> {\n    const response = await fetch(\n      `${this.archesUrl}/api/arches/graphs?format=arches-json&hide_empty_nodes=false&compact=false`,\n    );\n    return await response.json();\n  }\n\n  async getGraph(graph: StaticGraphMeta): Promise<StaticGraph> {\n    return this.getGraphByIdOnly(graph.graphid);\n  }\n\n  async getGraphByIdOnly(graphId: string): Promise<StaticGraph> {\n    const response = await fetch(\n      `${this.archesUrl}/graphs/${graphId}?format=arches-json&gen=`,\n    );\n    return await response.json();\n  }\n\n  async getResource(resourceId: string): Promise<StaticResource> {\n    throw Error(`Not implemented yet: getResource(${resourceId}`);\n  }\n\n  async getCollection(collectionId: string): Promise<StaticCollection> {\n    throw Error(`Not implemented yet: getCollection(${collectionId}`);\n  }\n\n  async getResources(\n    graphId: string,\n    limit: number,\n  ): Promise<StaticResource[]> {\n    const response = await fetch(\n      `${this.archesUrl}/resources?graph_uuid=${graphId}&format=arches-json&hide_empty_nodes=false&compact=false&limit=${limit}`,\n    );\n    return await response.json();\n  }\n}\n\nclass ArchesClientRemoteStatic extends ArchesClient {\n  archesUrl: string;\n  allGraphFile: () => string;\n  graphToGraphFile?: (graph: StaticGraphMeta) => string;\n  graphIdToGraphFile: (graphId: string) => string;\n  graphIdToResourcesFiles: (graphId: string) => string[];\n  resourceIdToFile: (resourceId: string) => string;\n  collectionIdToFile: (collectionId: string) => string;\n\n  constructor(\n    archesUrl: string,\n    {\n      allGraphFile,\n      graphToGraphFile,\n      graphIdToResourcesFiles,\n      resourceIdToFile,\n      collectionIdToFile,\n      graphIdToGraphFile,\n    }: {\n      allGraphFile?: () => string,\n      graphToGraphFile?: (graph: StaticGraphMeta) => string,\n      graphIdToGraphFile?: (graphId: string) => string;\n      graphIdToResourcesFiles?: (graphId: string) => string[];\n      resourceIdToFile?: (resourceId: string) => string;\n      collectionIdToFile?: (collectionId: string) => string;\n    } = {},\n  ) {\n    super();\n    this.archesUrl = archesUrl;\n    this.allGraphFile = allGraphFile || (() => \"resource_models/_all.json\");\n    this.graphToGraphFile = graphToGraphFile;\n    this.graphIdToGraphFile =\n      graphIdToGraphFile ||\n      ((graphId: string) => `resource_models/${graphId}.json`);\n    this.graphIdToResourcesFiles =\n      graphIdToResourcesFiles ||\n      ((graphId: string) => [`business_data/_${graphId}.json`]);\n    this.resourceIdToFile =\n      resourceIdToFile ||\n      ((resourceId: string) => `business_data/${resourceId}.json`);\n    this.collectionIdToFile =\n      collectionIdToFile ||\n      ((collectionId: string) => `collections/${collectionId}.json`);\n  }\n\n  async getGraphs(): Promise<GraphResult> {\n    const response = await fetch(`${this.archesUrl}/${this.allGraphFile()}`);\n    return await response.json();\n  }\n\n  async getGraph(graph: StaticGraphMeta): Promise<StaticGraph | null> {\n    if (!this.graphToGraphFile) {\n      return this.getGraphByIdOnly(graph.graphid);\n    }\n    const response = await fetch(\n      `${this.archesUrl}/${this.graphToGraphFile(graph)}`,\n    );\n    return (await response.json()).graph[0];\n  }\n\n  async getGraphByIdOnly(graphId: string): Promise<StaticGraph | null> {\n    const response = await fetch(\n      `${this.archesUrl}/${this.graphIdToGraphFile(graphId)}`,\n    );\n    return (await response.json()).graph[0];\n  }\n\n  async getResource(resourceId: string): Promise<StaticResource> {\n    const source = `${this.archesUrl}/${this.resourceIdToFile(resourceId)}`;\n    const response = await fetch(source);\n    return response.json().then((response: StaticResource) => {\n      response.__source = source;\n      return response;\n    });\n  }\n\n  async getCollection(collectionId: string): Promise<StaticCollection> {\n    const response = await fetch(\n      `${this.archesUrl}/${this.collectionIdToFile(collectionId)}`,\n    );\n    return await response.json();\n  }\n\n  async getResources(\n    graphId: string,\n    limit: number,\n  ): Promise<StaticResource[]> {\n    const resources = [];\n    for (const file of this.graphIdToResourcesFiles(graphId)) {\n      const source = `${this.archesUrl}/${file}`;\n      const response = await fetch(source);\n      const resourceSet: StaticResource[] = (await response.json()).business_data.resources;\n      for (const resource of resourceSet) {\n        resource.__source = source;\n      }\n      resources.push(...(limit ? resourceSet.slice(0, limit) : resourceSet));\n      if (limit && resources.length > limit) {\n        break;\n      }\n    }\n    return resources;\n  }\n}\n\nclass ArchesClientLocal extends ArchesClient {\n  fs: any;\n  allGraphFile: () => string;\n  graphToGraphFile?: (graph: StaticGraphMeta) => string;\n  graphIdToGraphFile: (graphId: string) => string;\n  graphIdToResourcesFiles: (graphId: string) => string[];\n  resourceIdToFile: (resourceId: string) => string;\n  collectionIdToFile: (collectionId: string) => string;\n\n  constructor({\n      allGraphFile,\n      graphToGraphFile,\n      graphIdToResourcesFiles,\n      resourceIdToFile,\n      collectionIdToFile,\n      graphIdToGraphFile,\n    }: {\n      allGraphFile?: () => string,\n      graphToGraphFile?: (graph: StaticGraphMeta) => string,\n      graphIdToGraphFile?: (graphId: string) => string;\n      graphIdToResourcesFiles?: (graphId: string) => string[];\n      resourceIdToFile?: (resourceId: string) => string;\n      collectionIdToFile?: (collectionId: string) => string;\n    } = {}) {\n    super();\n    this.fs = import(\"fs\");\n    this.allGraphFile = allGraphFile || (() => \"tests/definitions/models/_all.json\");\n    this.graphToGraphFile =\n      graphToGraphFile ||\n      ((graph: StaticGraphMeta) => `tests/definitions/models/${graph.graphid}.json`);\n    this.graphIdToGraphFile =\n      graphIdToGraphFile ||\n      ((graphId: string) => `tests/definitions/models/${graphId}.json`);\n    this.graphIdToResourcesFiles =\n      graphIdToResourcesFiles ||\n      ((graphId: string) => [`tests/definitions/resources/_${graphId}.json`]);\n    this.resourceIdToFile =\n      resourceIdToFile ||\n      ((resourceId: string) => `tests/definitions/resources/${resourceId}.json`);\n    this.collectionIdToFile =\n      collectionIdToFile ||\n      ((collectionId: string) => `tests/definitions/collections/${collectionId}.json`);\n  }\n\n  async getGraphs(): Promise<GraphResult> {\n    const fs = await this.fs;\n    const response = await fs.promises.readFile(this.allGraphFile(), \"utf8\");\n    return new GraphResult(await JSON.parse(response));\n  }\n\n  async getGraph(graph: StaticGraphMeta): Promise<StaticGraph | null> {\n    const fs = await this.fs;\n    const graphFile = this.graphToGraphFile ? this.graphToGraphFile(graph) : this.graphIdToGraphFile(graph.graphid);\n    if (!graphFile) {\n      return null;\n    }\n    const response = await fs.promises.readFile(\n      graphFile,\n      \"utf8\",\n    );\n    return await JSON.parse(response).graph[0];\n  }\n\n  async getGraphByIdOnly(graphId: string): Promise<StaticGraph | null> {\n    const fs = await this.fs;\n    const graphFile = this.graphIdToGraphFile(graphId);\n    if (!graphFile) {\n      return null;\n    }\n    const response = await fs.promises.readFile(\n      graphFile,\n      \"utf8\",\n    );\n    return await JSON.parse(response).graph[0];\n  }\n\n  async getResource(resourceId: string): Promise<StaticResource> {\n    const fs = await this.fs;\n    const source = this.resourceIdToFile(resourceId);\n    const response = await fs.promises.readFile(\n      source,\n      \"utf8\",\n    );\n    return JSON.parse(response).then((resource: StaticResource) => {\n      resource.__source = source;\n      return resource;\n    });\n  }\n\n  async getCollection(collectionId: string): Promise<StaticCollection> {\n    const fs = await this.fs;\n    const response = await fs.promises.readFile(\n      this.collectionIdToFile(collectionId),\n      \"utf8\",\n    );\n    return await JSON.parse(response);\n  }\n\n  async getResources(\n    graphId: string,\n    limit: number | null,\n  ): Promise<StaticResource[]> {\n    const fs = await this.fs;\n    const resources = [];\n    for (const file of this.graphIdToResourcesFiles(graphId)) {\n      const response = JSON.parse(await fs.promises.readFile(file, \"utf8\"));\n      const source = file;\n      // const read = fs.createReadStream(file, { encoding: \"utf8\" });\n      // let buffer = '';\n      // let bufferLength = 0;\n      // const response: IStringKeyedObject = await (new Promise(resolve => {\n      //   read.pipe(bfj.unpipe((error: string, data: string) => {\n      //     if (error) {\n      //       throw Error(error);\n      //     }\n      //     return data;\n      //   })).on('data', (data: string) => {\n      //     const bl = Math.floor(buffer.length / 1000);\n      //     bufferLength = bl;\n      //     buffer += data;\n      //   }).on('end', () => {\n      //     resolve(JSON.parse(buffer));\n      //   });\n      // }));\n\n      const resourceSet: StaticResource[] = response.business_data.resources.filter(\n        (resource: StaticResource) => graphId === resource.resourceinstance.graph_id\n      );\n      for (const resource of resourceSet) {\n        resource.__source = source;\n      }\n      resources.push(...(limit ? resourceSet.slice(0, limit) : resourceSet));\n      if (limit && resources.length > limit) {\n        break;\n      }\n    }\n    return resources;\n  }\n}\n\nconst archesClient = new ArchesClientRemote(\"http://localhost:8000\");\n\nexport {\n  archesClient,\n  ArchesClient,\n  ArchesClientRemoteStatic,\n  ArchesClientRemote,\n  ArchesClientLocal,\n  GraphResult,\n};\n","import { StaticCollection } from \"./static-types\";\nimport { ArchesClient, archesClient } from \"./client\";\n\nclass ReferenceDataManager {\n  archesClient: ArchesClient;\n  collections: Map<string, Promise<StaticCollection>>;\n\n  constructor(archesClient: ArchesClient) {\n    this.archesClient = archesClient;\n    this.collections = new Map<string, Promise<StaticCollection>>();\n  }\n\n  retrieveCollection(id: string): Promise<StaticCollection> {\n    let collection = this.collections.get(id);\n    if (collection !== undefined) {\n      return collection;\n    }\n    collection = this.archesClient\n      .getCollection(id)\n      .then((jsonData) => new StaticCollection(jsonData));\n    this.collections.set(id, collection);\n    return collection;\n  }\n}\n\nconst RDM = new ReferenceDataManager(archesClient);\n\nexport { StaticCollection, ReferenceDataManager, RDM };\n","import { archesClient, ArchesClient } from \"./client.ts\";\nimport {\n  StaticResource,\n  StaticResourceMetadata,\n} from \"./static-types\";\n\n// TODO: this does not currently cache, to avoid\n//  memory leaks.\nclass StaticStore {\n  archesClient: ArchesClient;\n  cache: Map<string, StaticResource | StaticResourceMetadata>;\n  cacheMetadataOnly: boolean;\n\n  constructor(archesClient: ArchesClient, cacheMetadataOnly: boolean = true) {\n    this.archesClient = archesClient;\n    this.cache = new Map();\n    this.cacheMetadataOnly = cacheMetadataOnly;\n  }\n\n  async getMeta(id: string, onlyIfCached: boolean = true): Promise<StaticResourceMetadata | null> {\n    if (this.cache.has(id)) {\n      const resource = this.cache.get(id);\n      if (resource instanceof StaticResource) {\n        return resource.resourceinstance;\n      }\n      return resource || null;\n    }\n\n    if (!onlyIfCached) {\n      const resource = await this.loadOne(id);\n      return resource.resourceinstance;\n    }\n    return null;\n  }\n\n  async* loadAll(\n    graphId: string,\n    limit: number | undefined = undefined,\n  ): AsyncIterable<StaticResource> {\n    const resourcesJSON: StaticResource[] =\n      await this.archesClient.getResources(graphId, limit || 0);\n    for (const resourceJSON of resourcesJSON.values()) {\n      const resource = new StaticResource(resourceJSON);\n      if (resource.resourceinstance.graph_id !== graphId) {\n        continue;\n      }\n      this.cache.set(\n        resource.resourceinstance.resourceinstanceid,\n        this.cacheMetadataOnly ? resource.resourceinstance : resource\n      );\n      yield resource;\n    }\n  }\n\n  async loadOne(id: string): Promise<StaticResource> {\n    if (this.cache.has(id)) {\n      const resource = this.cache.get(id);\n      if (resource instanceof StaticResource) {\n        return resource;\n      }\n    }\n\n    const resourceJSON: StaticResource =\n      await this.archesClient.getResource(id);\n    const resource = new StaticResource(resourceJSON);\n    if (this.cacheMetadataOnly) {\n      this.cache.set(id, this.cacheMetadataOnly ? resource.resourceinstance : resource);\n    }\n    return resource;\n  }\n}\n\nconst staticStore = new StaticStore(archesClient);\n\nexport { staticStore };\n","// The Widgets here are AGPLv3 from Arches DB setup.\n//\nimport {\n  StaticNode\n} from \"./static-types\";\n\nclass CardComponent {\n  id: string;\n  name: string;\n\n  constructor(id: string, name: string) {\n    this.id = id;\n    this.name = name;\n  }\n};\n\nclass Widget {\n  id: string;\n  name: string;\n  datatype: string;\n  defaultConfig: string; // as JSON - always need a fresh copy\n\n  constructor(id: string, name: string, datatype: string, defaultConfig: string) {\n    this.id = id;\n    this.name = name;\n    this.datatype = datatype;\n    this.defaultConfig = defaultConfig;\n  }\n\n  getDefaultConfig(): {[key: string]: any} {\n    return JSON.parse(this.defaultConfig);\n  }\n};\nconst DEFAULT_CARD_COMPONENT = new CardComponent(\n  'f05e4d3a-53c1-11e8-b0ea-784f435179ea',\n  'Default Card'\n);\nconst _WIDGET_VALUES: [string, string, string, string][] = [\n    ['10000000-0000-0000-0000-000000000001', 'text-widget', 'string', '{ \"placeholder\": \"Enter text\", \"width\": \"100%\", \"maxLength\": null}'],\n    ['10000000-0000-0000-0000-000000000002', 'concept-select-widget', 'concept', '{ \"placeholder\": \"Select an option\", \"options\": [] }'],\n    ['10000000-0000-0000-0000-000000000012', 'concept-multiselect-widget', 'concept-list', '{ \"placeholder\": \"Select an option\", \"options\": [] }'],\n    ['10000000-0000-0000-0000-000000000015', 'domain-select-widget', 'domain-value', '{ \"placeholder\": \"Select an option\" }'],\n    ['10000000-0000-0000-0000-000000000016', 'domain-multiselect-widget', 'domain-value-list', '{ \"placeholder\": \"Select an option\" }'],\n    ['10000000-0000-0000-0000-000000000003', 'switch-widget', 'boolean', '{ \"subtitle\": \"Click to switch\"}'],\n    ['10000000-0000-0000-0000-000000000004', 'datepicker-widget', 'date', `{\n      \"placeholder\": \"Enter date\",\n      \"viewMode\": \"days\",\n      \"dateFormat\": \"YYYY-MM-DD\",\n      \"minDate\": false,\n      \"maxDate\": false\n    }`],\n    ['10000000-0000-0000-0000-000000000005', 'rich-text-widget', 'string', '{}'],\n    ['10000000-0000-0000-0000-000000000006', 'radio-boolean-widget', 'boolean', '{\"trueLabel\": \"Yes\", \"falseLabel\": \"No\"}'],\n    ['10000000-0000-0000-0000-000000000007', 'map-widget', 'geojson-feature-collection', `{\n      \"basemap\": \"streets\",\n      \"geometryTypes\": [{\"text\":\"Point\", \"id\":\"Point\"}, {\"text\":\"Line\", \"id\":\"Line\"}, {\"text\":\"Polygon\", \"id\":\"Polygon\"}],\n      \"overlayConfigs\": [],\n      \"overlayOpacity\": 0.0,\n      \"geocodeProvider\": \"MapzenGeocoder\",\n      \"zoom\": 0,\n      \"maxZoom\": 20,\n      \"minZoom\": 0,\n      \"centerX\": 0,\n      \"centerY\": 0,\n      \"pitch\": 0.0,\n      \"bearing\": 0.0,\n      \"geocodePlaceholder\": \"Search\",\n      \"geocoderVisible\": true,\n      \"featureColor\": null,\n      \"featureLineWidth\": null,\n      \"featurePointSize\": null\n    }`],\n    ['10000000-0000-0000-0000-000000000008', 'number-widget', 'number', '{ \"placeholder\": \"Enter number\", \"width\": \"100%\", \"min\":\"\", \"max\":\"\"}'],\n    ['10000000-0000-0000-0000-000000000009', 'concept-radio-widget', 'concept', '{ \"options\": [] }'],\n    ['10000000-0000-0000-0000-000000000013', 'concept-checkbox-widget', 'concept-list', '{ \"options\": [] }'],\n    ['10000000-0000-0000-0000-000000000017', 'domain-radio-widget', 'domain-value', '{}'],\n    ['10000000-0000-0000-0000-000000000018', 'domain-checkbox-widget', 'domain-value-list', '{}'],\n    ['10000000-0000-0000-0000-000000000019', 'file-widget', 'file-list', '{\"acceptedFiles\": \"\", \"maxFilesize\": \"200\"}'],\n];\nconst WIDGETS: {[key: string]: Widget} = Object.fromEntries(_WIDGET_VALUES.map((constructor: [string, string, string, string]): [string, Widget] => [constructor[1], new Widget(...constructor)]));\n\nfunction getDefaultWidgetForNode(node: StaticNode, preferences: {[key: string]: string} = {}) {\n  const datatype = node.datatype;\n\n  // For example, you can use this to prefer a rich-text field.\n  if (datatype in preferences) {\n    return WIDGETS[preferences[datatype]];\n  }\n\n  if (datatype === 'semantic') {\n    throw Error(\"Not default widget for a semantic node\");\n  } else if (datatype === 'number') {\n    return WIDGETS['number-widget'];\n  } else if (datatype === 'string') {\n    return WIDGETS['text-widget'];\n  } else if (datatype === 'concept') {\n    return WIDGETS['concept-select-widget'];\n  } else if (datatype === 'concept-list') {\n    return WIDGETS['concept-multiselect-widget'];\n  } else if (datatype === 'domain-value') {\n    return WIDGETS['domain-select-widget'];\n  } else if (datatype === 'domain-value-list') {\n    return WIDGETS['domain-multiselect-widget'];\n  } else if (datatype === 'geojson-feature-collection') {\n    return WIDGETS['geojson-feature-collection'];\n  } else if (datatype === 'boolean') {\n    return WIDGETS['switch-widget'];\n  } else if (datatype === 'date') {\n    return WIDGETS['datepicker-widget'];\n  } else {\n    throw Error(`No default widget for ${datatype} datatype - perhaps you could supply a manual preference`);\n  }\n}\n\nexport { DEFAULT_CARD_COMPONENT, CardComponent, getDefaultWidgetForNode, Widget };\n","import { INodeConfig } from './interfaces';\nimport { StaticNode, StaticDomainValue } from './static-types';\n\ninterface IStaticNodeConfigDomain {\n  i18n_config: {[key: string]: string}\n  options: StaticDomainValue[];\n};\n\ninterface IStaticNodeConfigBoolean {\n  i18n_properties: string[]\n  falseLabel: {[key: string]: string}\n  trueLabel: {[key: string]: string}\n};\n\ninterface IStaticNodeConfigConcept {\n  rdmCollection: string\n};\n\nclass StaticNodeConfigBoolean implements IStaticNodeConfigBoolean, INodeConfig {\n  i18n_properties: string[]\n  falseLabel: {[key: string]: string}\n  trueLabel: {[key: string]: string}\n\n  constructor(jsonData: IStaticNodeConfigBoolean) {\n    this.i18n_properties = jsonData.i18n_properties;\n    this.falseLabel = jsonData.falseLabel;\n    this.trueLabel = jsonData.trueLabel;\n  }\n}\n\nclass StaticNodeConfigConcept implements IStaticNodeConfigConcept, INodeConfig {\n  rdmCollection: string;\n\n  constructor(jsonData: IStaticNodeConfigConcept) {\n    this.rdmCollection = jsonData.rdmCollection;\n  }\n}\n\nclass StaticNodeConfigDomain implements IStaticNodeConfigDomain, INodeConfig {\n  i18n_config: {[key: string]: string}\n  options: StaticDomainValue[];\n\n  getSelected() {\n    return this.options.find(option => option.selected);\n  }\n\n  valueFromId(id: string) {\n    return this.options.find(option => option.id == id);\n  }\n\n  constructor(jsonData: IStaticNodeConfigDomain) {\n    this.i18n_config = jsonData.i18n_config;\n    this.options = jsonData.options;\n    if (this.options) {\n      this.options = this.options.map(sdv => {\n        if (!(sdv instanceof StaticDomainValue)) {\n          return new StaticDomainValue(sdv);\n        }\n        return sdv;\n      });\n    }\n  }\n}\n\nclass NodeConfigManager {\n  static _cache: Map<string, INodeConfig | null>\n  cache: Map<string, INodeConfig | null>\n\n  constructor(cache: Map<string, INodeConfig | null> | undefined = undefined) {\n    if (!cache) {\n      cache = NodeConfigManager._cache || new Map();\n    }\n    this.cache = cache;\n  }\n\n  retrieve(node: StaticNode) {\n    if (this.cache.has(node.nodeid)) {\n      return this.cache.get(node.nodeid);\n    }\n    let nodeConfig = null;\n    switch (node.datatype) {\n      case \"boolean\":\n        // @ts-expect-error node.config is not typed\n        nodeConfig = new StaticNodeConfigBoolean(node.config);\n        break;\n      case \"domain-value-list\":\n      case \"domain-value\":\n        // @ts-expect-error node.config is not typed\n        nodeConfig = new StaticNodeConfigDomain(node.config);\n        break;\n      default:\n    };\n    this.cache.set(node.nodeid, nodeConfig);\n    return nodeConfig;\n  }\n};\n\nconst nodeConfigManager = new NodeConfigManager();\n\nexport { nodeConfigManager, StaticNodeConfigDomain, StaticNodeConfigBoolean, StaticNodeConfigConcept };\n","import {\n  IStringKeyedObject,\n  IInstanceWrapper,\n  IModelWrapper,\n  IViewModel,\n  IPseudo,\n  IGraphManager,\n  IRIVM,\n  GetMeta,\n} from \"./interfaces.ts\";\nimport { PseudoValue, PseudoList } from \"./pseudos\";\nimport { RDM } from \"./rdm\";\nimport {\n  StaticNodeConfigDomain,\n  StaticNodeConfigBoolean,\n} from './nodeConfig';\nimport {\n  StaticDomainValue,\n  StaticTile,\n  StaticNode,\n  StaticValue,\n  StaticConcept,\n  StaticResource,\n  StaticResourceReference\n} from \"./static-types\";\nimport { AttrPromise } from \"./utils\";\nimport { nodeConfigManager } from './nodeConfig';\n\nconst TILE_LOADING_ERRORS = null; // \"suppress\" or \"silence\" TODO: enum\n\nconst DEFAULT_LANGUAGE = \"en\";\n\nclass ViewContext {\n  graphManager: IGraphManager | undefined\n};\nconst viewContext = new ViewContext();\n\nfunction tileLoadingError(reason: string, exc: any) {\n  if (TILE_LOADING_ERRORS !== \"silence\") {\n    console.error(reason, exc);\n    if (TILE_LOADING_ERRORS !== \"suppress\") {\n      throw exc;\n    }\n  }\n}\n\nclass ValueList<T extends IRIVM<T>> {\n  values: Map<string, any>;\n  wrapper: IInstanceWrapper<T>;\n  tiles: StaticTile[] | null;\n  promises: Map<string, boolean | Promise<boolean | IViewModel>>;\n  writeLock: null | Promise<boolean | IViewModel>;\n\n  constructor(\n    values: Map<string, any>,\n    allNodegroups: Map<string, boolean>,\n    wrapper: IInstanceWrapper<T>,\n    tiles: StaticTile[] | null,\n  ) {\n    this.values = values;\n    this.wrapper = wrapper;\n    this.tiles = tiles;\n    this.promises = allNodegroups;\n    this.writeLock = null;\n  }\n\n  async get(key: string) {\n    return this.retrieve(key, this.values.get(key), true);\n  }\n\n  set(key: string, value: any) {\n    this.values.set(key, value);\n  }\n\n  async has(key: string) {\n    await this.retrieve(key, null);\n    return this.values.has(key);\n  }\n\n  async retrieve(key: string, dflt: any = null, raiseError: boolean = false) {\n    let result: any = this.values.get(key);\n    if (Array.isArray(result)) {\n      return result;\n    }\n    const node = this.wrapper.model.getNodeObjectsByAlias().get(key);\n\n    result = await result;\n\n    if (!node) {\n      throw Error(`This key ${key} has no corresponding node`);\n    }\n    const nodegroupId = node.nodegroup_id || '';\n    const promise = node ? await this.promises.get(nodegroupId) : false;\n    // When an unloaded node is found, the whole nodegroup is loaded.\n    // The promises member ensures that no other node in the nodegroup\n    // triggers the same nodegroup load. Note that there is _also_ the\n    // individual node promise, which allows any operation to wait for\n    // just that node to finish and resolve in to the approach pseudo\n    // even if `retrieve` is not used (e.g. allEntries).\n    // _However_, this means that allEntries will not see a promise for\n    // individual nodes in the nodegroup that are _not_ the first\n    // requested, until the first requested resolves and updates the\n    // values map for all nodes in the nodegroup.\n    if (promise === false) {\n      // FIXME: the evidence is that this is not successfully functioning as\n      // a resource-wide lock...\n      await this.writeLock;\n      if (this.wrapper.resource) {\n        // Will KeyError if we do not have it.\n        const node = this.wrapper.model.getNodeObjectsByAlias().get(key);\n        if (node === undefined) {\n          throw Error(\n            \"Tried to retrieve a node key that does not exist on this resource\",\n          );\n        }\n        const values = new Map([...this.values.entries()]);\n        const promise: Promise<IViewModel | boolean> = new Promise((resolve) => {\n           return this.wrapper\n            .ensureNodegroup(\n              values,\n              this.promises,\n              nodegroupId,\n              this.wrapper.model.getNodeObjects(),\n              this.wrapper.model.getNodegroupObjects(),\n              this.wrapper.model.getEdges(),\n              false,\n              this.tiles,\n              true\n            ).then(async ([ngValues]) => {\n              let original = false;\n              const processValue = (k: string, concreteValue: any) => {\n                if (key === k) {\n                  // Other methods may be waiting on this specific\n                  // value to resolve.\n                  original = concreteValue;\n                }\n                // In theory, this should never happen when this.values[k] is\n                // not false, as the resource-wide write lock means that no other nodegroup\n                // can write. This _is_ happening however. In theory, once set, the\n                // value will be a list, so passed by reference, and so should not\n                // undo and changes that happened concurrently.\n                if (concreteValue !== false) {\n                  this.values.set(k, concreteValue);\n                }\n              }\n              return Promise.all([...ngValues.entries()].map(([k, value]) => {\n                if (value instanceof Promise) {\n                  return value.then((concreteValue: any) => processValue(k, concreteValue));\n                }\n                processValue(k, value);\n              })).then(() => {\n                resolve(original);\n              });\n            });\n        });\n        // No writes should happen until this is done\n        this.writeLock = promise;\n        // No reads from this nodegroup should happen [legacy comment]\n        this.promises.set(nodegroupId, promise);\n        // Other readers are welcome to wait for this nodegroup's read\n        this.values.set(key, promise);\n        await promise;\n        this.promises.set(nodegroupId, true);\n      } else {\n        this.values.delete(key);\n      }\n      result = await this.values.get(key);\n    }\n    result = await result;\n    if (result === undefined || result === false) {\n      if (raiseError) {\n        throw Error(`Unset key ${key}`);\n      } else {\n        return dflt;\n      }\n    }\n    return result;\n  }\n\n  async setDefault(key: string, value: any) {\n    const newValue = await this.retrieve(key, value, false);\n    this.values.set(key, newValue);\n    return newValue;\n  }\n}\n\nclass ConceptListCacheEntry implements IStringKeyedObject {\n  [key: string]: any;\n  datatype: string = 'concept-list';\n  _: ConceptValueCacheEntry[];\n  meta: {[key: string]: any};\n\n  constructor({meta, _}: {meta: IStringKeyedObject | undefined, _: ConceptValueCacheEntry[]}) {\n    this._ = _.map(instance => {\n      if (instance instanceof ConceptValueCacheEntry) {\n        return instance;\n      } else if (instance) {\n        return new ConceptValueCacheEntry(instance);\n      }\n      return null;\n    }).filter(cvce => cvce !== null);\n    this.meta = meta || {};\n  }\n}\n\nclass ConceptValueCacheEntry implements IStringKeyedObject {\n  [key: string]: any\n  datatype: string = 'concept';\n  id: string;\n  value: string;\n  conceptId: string | null;\n  meta: {[key: string]: any};\n\n  constructor({meta, id, value, conceptId}: {meta: IStringKeyedObject | undefined, id: string, value: string, conceptId: string | null}) {\n    this.id = id;\n    this.value = value;\n    this.conceptId = conceptId;\n    this.meta = meta || {};\n  }\n}\n\nclass ResourceInstanceListCacheEntry implements IStringKeyedObject {\n  [key: string]: any;\n  datatype: string = 'resource-instance-list';\n  _: ResourceInstanceCacheEntry[];\n  meta: {[key: string]: any};\n\n  constructor({meta, _}: {meta: IStringKeyedObject | undefined, _: ResourceInstanceCacheEntry[]}) {\n    this._ = _.map(instance => {\n      if (instance instanceof ResourceInstanceCacheEntry) {\n        return instance;\n      }\n      return new ResourceInstanceCacheEntry(instance);\n    });\n    this.meta = meta || {};\n  }\n}\n\nclass ResourceInstanceCacheEntry implements IStringKeyedObject {\n  [key: string]: any\n  datatype: string = 'resource-instance';\n  id: string;\n  type: string;\n  graphId: string;\n  title: string | null;\n  meta: {[key: string]: any};\n\n  constructor({meta, id, type, graphId, title}: {meta: IStringKeyedObject | undefined, id: string, type: string, graphId: string, title: string | null}) {\n    this.id = id;\n    this.type = type;\n    this.graphId = graphId;\n    this.meta = meta || {};\n    this.title = this.meta.title || title;\n  }\n}\n\nclass ResourceInstanceListViewModel extends Array implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: IPseudo | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n  _value: Promise<(ResourceInstanceViewModel<any> | null)[]> | null = null;\n\n  async forJson() {\n    const value = await this._value;\n    return value ? value.map((v) => (v ? v.forJson() : null)) : null;\n  }\n\n  async __forJsonCache(getMeta: GetMeta): Promise<ResourceInstanceListCacheEntry> {\n    return new ResourceInstanceListCacheEntry({\n      meta: getMeta ? await getMeta(this) : getMeta,\n      _: await Promise.all([...this.values()].map(async (rivmPromise: Promise<ResourceInstanceViewModel<any>>) => {\n        const rivm = await rivmPromise;\n        return await rivm.__forJsonCache(getMeta)\n      }))\n    });\n  }\n\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n    cacheEntry: ResourceInstanceListCacheEntry | null = null\n  ): Promise<ResourceInstanceListViewModel | null> {\n    const nodeid = node.nodeid;\n    let val: (ResourceInstanceViewModel<any> | null | Promise<ResourceInstanceViewModel<any> | null>)[];\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, null);\n      }\n      if (value !== null) {\n        tile.data.set(nodeid, []);\n        if (!Array.isArray(value)) {\n          throw Error(\n            `Cannot set an (entire) resource list value on node ${nodeid} except via an array: ${JSON.stringify(value)}`,\n          );\n        }\n        val = value.map((v, i) => {\n          if (v instanceof ResourceInstanceViewModel) {\n            return v;\n          }\n          return ResourceInstanceViewModel.__create(tile, node, v, cacheEntry && cacheEntry._[i] ? cacheEntry._[i] : null);\n        });\n        Promise.all(\n          val.map(async (c) => {\n            const v = await c;\n            return v ? (await v).id : null;\n          }),\n        ).then((ids) => {\n          tile.data.set(nodeid, ids.map(id => {\n            return {\n              resourceId: id\n            };\n          }));\n          return ids;\n        });\n        value = val;\n      }\n    } else {\n      value = [];\n    }\n\n    if (!tile || !value) {\n      return null;\n    }\n    const str = new ResourceInstanceListViewModel(...value);\n    return str;\n  }\n\n  async __asTileData() {\n    return this._value ? await this._value : null;\n  }\n}\n\nclass ResourceInstanceViewModel<RIVM extends IRIVM<RIVM>> implements IStringKeyedObject {\n  [key: string | symbol]: any;\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  $: IInstanceWrapper<RIVM> | null;\n  __: IModelWrapper<RIVM> | null;\n  __parentPseudo: IPseudo | undefined = undefined;\n  __cacheEntry: ResourceInstanceCacheEntry | null = null;\n  id: string;\n  then: undefined;\n  [Symbol.toPrimitive]: undefined;\n\n  gm: IGraphManager | undefined;\n\n  toString(): string {\n    if (!this.__) {\n      return `[Resource:${this.id}]`;\n    }\n    return `[${this.__.wkrm.modelClassName}:${this.id ?? \"-\"}]`;\n  }\n\n  async __has(key: string): Promise<boolean | undefined> {\n    // There is a catch here, that because we lazy-load, we do not\n    // know, hence three possible return values.\n    if (!this.$) {\n      return undefined;\n    }\n    return (await this.$.getRootViewModel() || new Map()).__has(key);\n  }\n\n  async __asTileData(): Promise<IStringKeyedObject> {\n    return {\n      resourceId: this.id\n    };\n  }\n\n  async __forJsonCache(getMeta: GetMeta): Promise<ResourceInstanceCacheEntry> {\n    // TODO should we re-use the cacheEntry and rely on it being expired correctly?\n    let wrapper: IModelWrapper<RIVM>;\n    if (!this.__) {\n      if (this.__cacheEntry) {\n        return this.__cacheEntry;\n      } else {\n        [, wrapper] = await this.retrieve();\n      }\n    } else {\n      wrapper = this.__;\n    }\n    this.__cacheEntry = new ResourceInstanceCacheEntry({\n      meta: getMeta ? await getMeta(this) : undefined,\n      id: this.id,\n      type: wrapper.wkrm.modelClassName,\n      graphId: wrapper.wkrm.graphId,\n      title: null,\n    });\n    return this.__cacheEntry;\n  }\n\n  async forJson(cascade: boolean=false) {\n    let jsonData: StaticResourceReference;\n    if (!cascade && this.__cacheEntry) {\n      jsonData = {\n        type: this.__cacheEntry.type,\n        graphId: this.__cacheEntry.graphId,\n        id: this.__cacheEntry.id,\n        title: this.__cacheEntry.title || undefined,\n        meta: this.__cacheEntry.meta || undefined,\n        root: null\n      };\n    } else if (this.__) {\n      jsonData = {\n        type: this.__.wkrm.modelClassName,\n        graphId: this.__.wkrm.graphId,\n        id: this.id,\n        title: undefined,\n        meta: undefined,\n        root: null\n      };\n    } else {\n      jsonData = {\n        type: \"(unknown)\",\n        graphId: \"\",\n        id: this.id,\n        title: undefined,\n        meta: undefined,\n        root: null\n      };\n    }\n    const basic = new StaticResourceReference(jsonData);\n    if (cascade) {\n      if (!this.$) {\n        await this.retrieve();\n        if (!this.$) {\n          throw Error(\"Could not retrieve resource\");\n        }\n      }\n      const root = await this.$.getRootViewModel();\n      basic.root = await root.forJson();\n    }\n    return basic;\n  }\n\n  async retrieve(): Promise<[IInstanceWrapper<RIVM>, IModelWrapper<RIVM>]> {\n    let iw: IInstanceWrapper<RIVM>;\n    let mw: IModelWrapper<RIVM>;\n    if (viewContext.graphManager) {\n      const replacement = await viewContext.graphManager.getResource(this.id, true);\n\n      // @ts-expect-error We cannot guarantee this resource is the right type...\n      iw = replacement.$;\n      // @ts-expect-error We cannot guarantee this resource is the right type...\n      mw = replacement.__;\n    } else {\n      throw Error(\"Cannot traverse resource relationships without a GraphManager\");\n    }\n    this.$ = iw;\n    this.__ = mw;\n    return [iw, mw];\n  }\n\n  constructor(\n    id: string,\n    modelWrapper: IModelWrapper<RIVM> | null,\n    instanceWrapperFactory: ((\n      rivm: RIVM,\n    ) => IInstanceWrapper<RIVM>) | null,\n    cacheEntry: object | null,\n  ) {\n    this.id = id;\n    // @ts-expect-error I believe some deep type magic would be required to\n    // convince TS that `this` is a valid RIVM.\n    this.$ = instanceWrapperFactory ? instanceWrapperFactory(this) : null;\n    this.__ = modelWrapper;\n    if (cacheEntry instanceof ResourceInstanceCacheEntry) {\n      this.__cacheEntry = cacheEntry;\n    }\n\n    return new Proxy(this, {\n      // NOTE: set should not return a promise, so could cause a race\n      // condition with a subsequent read.\n      // @ts-expect-error Returning a promise for set\n      set: async (object: ResourceInstanceViewModel<RIVM>, key, value): Promise<boolean> => {\n        const k: string = typeof key === 'symbol' ? key.description || '' : key;\n        if (key in object) {\n          object[key] = value;\n        } else if (k in object || k.startsWith('__')) {\n          object[k] = value;\n        } else {\n          if (!object.$) {\n            await this.retrieve();\n            if (!object.$) {\n              throw Error(\"Could not retrieve resource\");\n            }\n          }\n          object.$.setOrmAttribute(k, value);\n        }\n        return true;\n      },\n      get: (object: ResourceInstanceViewModel<RIVM>, key) => {\n        const k: string = typeof key === 'symbol' ? key.description || '' : key;\n        if (key in object) {\n          return object[key];\n        } else if (k in object || k.startsWith('__')) {\n          return object[k];\n        }\n        return new AttrPromise(async (resolve) => {\n          if (!object.$) {\n            await this.retrieve();\n            if (!object.$) {\n              throw Error(\"Could not retrieve resource\");\n            }\n          }\n          return object.$.getOrmAttribute(k).then((v) => {\n            return resolve(v);\n          });\n        });\n      },\n    });\n  }\n\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n    cacheEntry: ResourceInstanceCacheEntry | null\n  ): Promise<ResourceInstanceViewModel<any> | null> {\n    const nodeid = node.nodeid;\n    let val: string | null = value;\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, null);\n      }\n      if (value !== null) {\n        if (!value && !(value instanceof StaticResource) && !(value instanceof StaticResourceReference)) {\n          val = null;\n        } else if (value instanceof Promise) {\n          return value.then((value) => {\n            return ResourceInstanceViewModel.__create(tile, node, value, cacheEntry);\n          });\n        } else if (typeof value == \"string\") {\n          if (\n            /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.exec(\n              value,\n            )\n          ) {\n            val = value;\n          } else {\n            throw Error(\n              `Set resource instances using id, not strings in node ${node.alias}: ${value}`,\n            );\n          }\n        } else if (value instanceof Object && value.resourceId) {\n          val = value.resourceId;\n        } else if (value instanceof Array && value.length < 2 ) {\n          if (value.length == 1) {\n            return ResourceInstanceViewModel.__create(tile, node, value[0], cacheEntry);\n          }\n        } else {\n          throw Error(\"Could not set resource instance from this data\");\n        }\n\n        tile.data.set(nodeid, val ? [{resourceId: val}] : null);\n      }\n    }\n\n    if (!tile || !val) {\n      return null;\n    }\n    const str = new ResourceInstanceViewModel(val, null, null, cacheEntry);\n    return str;\n  }\n}\n\nclass FileListViewModel extends Array implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: IPseudo | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n  _value: Promise<(ConceptValueViewModel | null)[]> | null = null;\n\n  async forJson() {\n    const value = await this._value;\n    return value ? value.map((v) => (v ? v.forJson() : null)) : null;\n  }\n\n  async __forJsonCache(): Promise<null> {\n    return null;\n  }\n\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): Promise<FileListViewModel> {\n    const nodeid = node.nodeid;\n    let val: (ConceptValueViewModel | Promise<ConceptValueViewModel | null> | null)[] = [];\n    if (!tile.data.has(nodeid)) {\n      tile.data.set(nodeid, null);\n    }\n    if (value !== null) {\n      tile.data.set(nodeid, []);\n      if (!Array.isArray(value)) {\n        throw Error(\n          `Cannot set an (entire) file list value on node ${nodeid} except via an array: ${JSON.stringify(value)}`,\n        );\n      }\n      val = value.map((c) => {\n        return c;\n      });\n      Promise.all(val).then((vals) => {\n        Promise.all(\n          vals.map(async (c) => {\n            const v = await c;\n            return v ? (await v.getValue()).id : null;\n          })\n        ).then((ids) => {\n          tile.data.set(nodeid, ids);\n        });\n      });\n      value = val;\n    } else {\n      value = [];\n    }\n\n    const str = new FileListViewModel(...value);\n    return str;\n  }\n\n  async __asTileData() {\n    return this._value ? await this._value : null;\n  }\n}\n\nclass ConceptListViewModel extends Array implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: IPseudo | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n  _value: Promise<(ConceptValueViewModel | null)[]> | null = null;\n\n  async forJson() {\n    const value = await this._value;\n    return value ? value.map((v) => (v ? v.forJson() : null)) : null;\n  }\n\n  async __forJsonCache(getMeta: GetMeta): Promise<ConceptListCacheEntry> {\n    return new ConceptListCacheEntry({\n      meta: getMeta ? await getMeta(this) : getMeta,\n      _: (await Promise.all([...this.values()].map(async (rivmPromise: Promise<ConceptValueViewModel>) => {\n        const rivm = await rivmPromise;\n        if (rivm) {\n          return await rivm.__forJsonCache(getMeta)\n        }\n      }))).filter(val => val !== undefined)\n    });\n  }\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n    cacheEntry: ConceptListCacheEntry | null = null\n  ): Promise<ConceptListViewModel> {\n    const nodeid = node.nodeid;\n    let val: (ConceptValueViewModel | Promise<ConceptValueViewModel | null> | null)[] = [];\n    if (!tile.data.has(nodeid)) {\n      tile.data.set(nodeid, null);\n    }\n    if (value !== null) {\n      tile.data.set(nodeid, []);\n      if (!Array.isArray(value)) {\n        throw Error(\n          `Cannot set an (entire) concept list value on node ${nodeid} except via an array: ${JSON.stringify(value)}`,\n        );\n      }\n      val = value.map((c, i) => {\n        if (c instanceof ConceptValueViewModel) {\n          return c;\n        }\n        return ConceptValueViewModel.__create(tile, node, c, cacheEntry && cacheEntry._[i] ? cacheEntry._[i] : null);\n      });\n      Promise.all(val).then((vals) => {\n        Promise.all(\n          vals.map(async (c) => {\n            const v = await c;\n            return v ? (await v.getValue()).id : null;\n          })\n        ).then((ids) => {\n          tile.data.set(nodeid, ids);\n        });\n      });\n      value = val;\n    } else {\n      value = [];\n    }\n\n    const str = new ConceptListViewModel(...value);\n    return str;\n  }\n\n  async __asTileData() {\n    return this._value ? await this._value : null;\n  }\n}\n\nclass DomainValueListViewModel extends Array implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n  _value: Promise<(DomainValueViewModel | null)[]> | null = null;\n\n  async forJson() {\n    const value = await this._value;\n    return value ? value.map((v) => (v ? v.forJson() : null)) : null;\n  }\n\n  // No point in caching something that is on the graph.\n  __forJsonCache(): null {\n    return null;\n  }\n\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): Promise<DomainValueListViewModel> {\n    const nodeid = node.nodeid;\n    let val: (DomainValueViewModel | Promise<DomainValueViewModel | null> | null)[];\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, null);\n      }\n      if (value !== null) {\n        tile.data.set(nodeid, []);\n        if (!Array.isArray(value)) {\n          throw Error(\n            `Cannot set an (entire) domain list value on node ${nodeid} except via an array: ${JSON.stringify(value)}`,\n          );\n        }\n        val = value.map((c) => {\n          if (c instanceof DomainValueViewModel) {\n            return c;\n          }\n          return DomainValueViewModel.__create(tile, node, c);\n        });\n        Promise.all(val).then(async (vals) => {\n          const ids = Promise.all(vals.map(async val => val === null ? val : (await val._value).id));\n          ids.then(ids => {\n            tile.data.set(nodeid, ids);\n          });\n        });\n      }\n    } else {\n      value = [];\n    }\n\n    const str = new DomainValueListViewModel(...value);\n    return str;\n  }\n\n  async __asTileData() {\n    const value = await this._value;\n    return value ?? null;\n  }\n}\n\n\n\nclass DomainValueViewModel extends String implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  _value: StaticDomainValue | Promise<StaticDomainValue>;\n\n  constructor(value: StaticDomainValue) {\n    super(value.toString());\n    this._value = value;\n  }\n\n  async forJson(): Promise<StaticDomainValue> {\n    return this._value;\n  }\n\n  // No point in caching something that is on the graph.\n  __forJsonCache(): null {\n    return null;\n  }\n\n  getValue(): StaticDomainValue | Promise<StaticDomainValue> {\n    return this._value;\n  }\n\n  async lang(lang: string): Promise<string | undefined> {\n    return (await this._value).lang(lang);\n  }\n\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): Promise<DomainValueViewModel | null> {\n    const nodeid = node.nodeid;\n    let val: StaticDomainValue | null = value;\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, null);\n      }\n      if (value !== null) {\n        if (!value && !(value instanceof StaticDomainValue)) {\n          val = null;\n        } else if (value instanceof Promise) {\n          return value.then((value) => {\n            return DomainValueViewModel.__create(tile, node, value);\n          });\n        } else if (typeof value == \"string\") {\n          if (\n            /^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i.exec(\n              value,\n            )\n          ) {\n            const config = nodeConfigManager.retrieve(node);\n            if (!config || !(config instanceof StaticNodeConfigDomain)) {\n              throw Error(`Cannot form domain value for ${node.nodeid} without config`);\n            }\n            val = config.valueFromId(value) || null;\n          } else {\n            throw Error(\n              \"Set domain values using values from domain lists, not strings\",\n            );\n          }\n        } else {\n          throw Error(\"Could not set domain value from this data\");\n        }\n\n        if (!(val instanceof Promise)) {\n          tile.data.set(nodeid, val ? val.id : null);\n        }\n      }\n    }\n\n    if (!tile || !val) {\n      return null;\n    }\n    const str = new DomainValueViewModel(val);\n    return str;\n  }\n\n  async __asTileData() {\n    const value = await this._value;\n    return value ? value.id : null;\n  }\n}\n\nclass ConceptValueViewModel extends String implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: IPseudo | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  _value: StaticValue | Promise<StaticValue>;\n\n  constructor(value: StaticValue) {\n    super(value.value);\n    this._value = value;\n  }\n\n  async forJson(): Promise<StaticValue> {\n    return this._value;\n  }\n\n  async __forJsonCache(getMeta: GetMeta): Promise<ConceptValueCacheEntry> {\n    const value = await this._value;\n    return new ConceptValueCacheEntry({\n      meta: getMeta ? await getMeta(this) : undefined,\n      id: value.id,\n      value: value.value,\n      conceptId: value.__conceptId\n    });\n  }\n\n  getValue(): StaticValue | Promise<StaticValue> {\n    return this._value;\n  }\n\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n    cacheEntry: ConceptValueCacheEntry | null\n  ): Promise<ConceptValueViewModel | null> {\n    const nodeid = node.nodeid;\n    const collectionId = node.config?.rdmCollection;\n    if (!collectionId) {\n      throw Error(`Node ${node.alias} (${node.nodeid}) missing rdmCollection in config`);\n    }\n    let val: StaticValue | null = value;\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, null);\n      }\n      if (value !== null) {\n        if (value instanceof StaticConcept) {\n          if (value.getPrefLabel) {\n            val = value.getPrefLabel();\n          } else {\n            throw Error(\"Recognizing value as StaticConcept, but no getPrefLabel member\");\n          }\n        }\n        if (!value) {\n          val = null;\n        } else if (value instanceof StaticValue) {\n          // No change needed.\n        } else if (value instanceof Promise) {\n          return value.then((value) => {\n            return ConceptValueViewModel.__create(tile, node, value, cacheEntry);\n          });\n        } else if (typeof value == \"string\") {\n          if (\n            /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.exec(\n              value,\n            )\n          ) {\n            if (cacheEntry) {\n              val = new StaticValue({\n                id: cacheEntry.id,\n                value: cacheEntry.value,\n                __concept: null,\n                __conceptId: cacheEntry.conceptId,\n              }, cacheEntry.conceptId);\n              return new ConceptValueViewModel(val);\n            } else {\n              const collection = RDM.retrieveCollection(collectionId);\n              return collection.then((collection) => {\n                if (!collection.getConceptValue) {\n                  throw Error(`Collection ${collection.id} must be a StaticCollection here, not a key/value object`);\n                }\n                const val = collection.getConceptValue(value);\n\n                if (!val) {\n                  console.error(\"Could not find concept for value\", value, \"for\", node.alias, \"in collection\", collectionId);\n                }\n\n                tile.data.set(nodeid, val ? val.id : null);\n\n                if (!tile || !val) {\n                  return null;\n                }\n                const str = new ConceptValueViewModel(val);\n\n                return str;\n              });\n            }\n          } else {\n            throw Error(\n              `Set concepts using values from collections, not strings: ${value}`,\n            );\n          }\n        } else {\n          throw Error(\"Could not set concept from this data\");\n        }\n\n        if (!(val instanceof Promise)) {\n          if (!val) {\n            console.error(\"Could not find concept for value\", value, \"for\", node.alias, \"in collection\", collectionId);\n          }\n\n          tile.data.set(nodeid, val ? val.id : null);\n        }\n      }\n    }\n\n    if (!tile || !val) {\n      return null;\n    }\n    const str = new ConceptValueViewModel(val);\n    return str;\n  }\n\n  async __asTileData() {\n    const value = await this._value;\n    return value ? value.id : null;\n  }\n}\n\nclass DateViewModel extends Date implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n  __original: string;\n  then: undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  constructor(val: string) {\n    super(val);\n    this.__original = val;\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): DateViewModel | Promise<DateViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) =>\n        DateViewModel.__create(tile, node, value),\n      );\n    }\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, null);\n      }\n      if (value !== null) {\n        tile.data.set(nodeid, value);\n      }\n    }\n\n    let val: string | {[key: string]: string} | any = tile.data.get(nodeid);\n    // TODO: catch rendering issues - this workaround should be removed\n    // as it is overly tolerant of input issues.\n    if (typeof val == \"object\" && val['en'] !== undefined) {\n      val = val.en;\n    }\n    if (!tile || val === null || val === undefined || val === '') {\n      return null;\n    }\n    if (typeof val != \"string\") {\n      throw Error(\"Date should be a string\");\n    }\n    const str = new DateViewModel(val);\n    return str;\n  }\n\n  async forJson() {\n    try {\n      return this.toISOString();\n    } catch (e) {\n      console.warn(e);\n      return this.__original;\n    }\n  }\n\n  __asTileData() {\n    return this.toISOString();\n  }\n}\n\nclass GeoJSONViewModel implements IViewModel, IStringKeyedObject {\n  [key: string | symbol]: any;\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n  then: undefined;\n  [Symbol.toPrimitive]: undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  _value: { [key: string]: any };\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  constructor(jsonData: { [key: string]: any }) {\n    this._value = jsonData;\n    return new Proxy(this, {\n      get: (object: GeoJSONViewModel, key) => {\n        const k: string = typeof key === 'symbol' ? key.description || '' : key;\n        if (key in object) {\n          return object[key];\n        } else if (k in object) {\n          return object[k];\n        }\n        return this._value[k];\n      },\n      set: (object: GeoJSONViewModel, key, value) => {\n        const k: string = typeof key === 'symbol' ? key.description || '' : key;\n        if (key in object) {\n          object[key] = value;\n        } else if (k in object) {\n          object[k] = value;\n        } else {\n          this._value[k] = value;\n        }\n        return true;\n      },\n    });\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): GeoJSONViewModel | Promise<GeoJSONViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) =>\n        GeoJSONViewModel.__create(tile, node, value),\n      );\n    }\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, null);\n      }\n      if (value !== null) {\n        tile.data.set(nodeid, value);\n      }\n    }\n\n    const val = tile.data.get(nodeid);\n    if (!tile || val === null || val === undefined) {\n      return null;\n    }\n    if (!(val instanceof Object)) {\n      throw Error(\"GeoJSON should be a JSON object\");\n    }\n    const str = new GeoJSONViewModel(val);\n    return str;\n  }\n\n  async forJson() {\n    return await this._value;\n  }\n\n  __asTileData() {\n    return this._value;\n  }\n}\n\nclass StringTranslatedLanguage {\n  value: string = \"\"\n}\n\nclass EDTFViewModel extends String implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  forJson(): string {\n    return this.toString();\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): EDTFViewModel | Promise<EDTFViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) => EDTFViewModel.__create(tile, node, value));\n    }\n    if (tile) {\n      if (value !== null) {\n        tile.data.set(nodeid, value);\n      }\n    }\n\n    const val = tile.data.get(nodeid);\n    if (!tile || val === null || val === undefined) {\n      return null;\n    }\n    const string = new EDTFViewModel(val);\n    return string;\n  }\n\n  __asTileData() {\n    return `${this}`;\n  }\n}\n\nclass NonLocalizedStringViewModel extends String implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  forJson(): string {\n    return this.toString();\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): NonLocalizedStringViewModel | Promise<NonLocalizedStringViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) => NonLocalizedStringViewModel.__create(tile, node, value));\n    }\n    if (tile) {\n      if (value !== null) {\n        tile.data.set(nodeid, value);\n      }\n    }\n\n    const val = tile.data.get(nodeid);\n    if (!tile || val === null || val === undefined) {\n      return null;\n    }\n    const string = new NonLocalizedStringViewModel(val);\n    return string;\n  }\n\n  __asTileData() {\n    return `${this}`;\n  }\n}\n\nclass NumberViewModel extends Number implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  toString(): string {\n    return `${this.valueOf()}`;\n  }\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  forJson(): number {\n    return this.valueOf();\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): NumberViewModel | Promise<NumberViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) => NumberViewModel.__create(tile, node, value));\n    }\n    if (tile) {\n      if (value !== null) {\n        tile.data.set(nodeid, value);\n      }\n    }\n\n    const val = tile.data.get(nodeid);\n    if (!tile || val === null || val === undefined) {\n      return null;\n    }\n    const num = new NumberViewModel(val);\n    return num;\n  }\n\n  __asTileData() {\n    return this.valueOf();\n  }\n}\n\n// Note that this is a Boolean _object__, not an actual boolean\nclass BooleanViewModel extends Boolean implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n  __config:  StaticNodeConfigBoolean;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  constructor(value: boolean, config: StaticNodeConfigBoolean) {\n    super(value);\n    this.__config = config;\n  }\n\n  toString(lang?: string | undefined): string {\n    const labelLang = lang || DEFAULT_LANGUAGE;\n    return this.valueOf() ? (\n      this.__config && this.__config.trueLabel ? this.__config.trueLabel[labelLang] || 'true' : 'true'\n    ) : (\n      this.__config && this.__config.trueLabel ? this.__config.falseLabel[labelLang] || 'false' : 'false'\n    );\n  }\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  forJson(): boolean {\n    return this.valueOf();\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): BooleanViewModel | Promise<BooleanViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) => BooleanViewModel.__create(tile, node, value));\n    }\n    if (tile) {\n      if (value !== null) {\n        tile.data.set(nodeid, value);\n      }\n    }\n\n    const val = tile.data.get(nodeid);\n    if (!tile || val === null || val === undefined) {\n      return null;\n    }\n    const config = nodeConfigManager.retrieve(node);\n    if (!config || !(config instanceof StaticNodeConfigBoolean)) {\n      throw Error(`Cannot form boolean value for ${node.nodeid} without config`);\n    }\n    if (typeof val !== 'boolean' && val !== 0 && val !== 1) {\n      throw Error(`Refusing to use truthiness for value ${val} in boolean`);\n    }\n    const bool = new BooleanViewModel(val ? true : false, config);\n    return bool;\n  }\n\n  __asTileData() {\n    return this.valueOf();\n  }\n}\n\nclass Url {\n  url: string\n  url_label?: string\n\n  constructor(url: string, url_label?: string) {\n    this.url = url;\n    this.url_label = url_label;\n  }\n}\n\nclass UrlViewModel extends String implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  _value: Url;\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  constructor(value: Url) {\n    const displayValue = value.url_label || value.url;\n    super(displayValue);\n    this._value = value;\n  }\n\n  forJson(): {[key: string]: string} {\n    return {\n      url: this._value.url,\n      url_label: this._value.url_label || \"\",\n    };\n  }\n\n  label() {\n    return this._value.url_label || this._value.url;\n  }\n\n  href() {\n    return this._value.url;\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): UrlViewModel | Promise<UrlViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) => UrlViewModel.__create(tile, node, value));\n    }\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, {});\n      }\n      if (value !== null) {\n        if (value instanceof UrlViewModel) {\n          value = value._value;\n        } else if (value instanceof Object) {\n          if (!value.url) {\n            throw Error(`A URL must be null or have a 'url' field: ${value}`);\n          }\n        }\n        tile.data.set(nodeid, {\n          url: value.url,\n          url_label: value.url_label,\n        });\n      }\n    }\n\n    const val = tile.data.get(nodeid);\n    if (!tile || val === null || val === undefined) {\n      return null;\n    }\n    let url: Url;\n    if (typeof val !== 'object') {\n      url = new Url(`${val}`);\n    } else if (val instanceof Map) {\n      url = new Url(val.get('url'), val.get('url_label'));\n    } else if ('url' in val && typeof val === 'object' && typeof val.url === 'string' && 'url_label' in val && (val.url_label === undefined || typeof val.url_label === 'string')) {\n      url = new Url(val.url, val.url_label);\n    } else {\n      throw Error(`Unrecognised URL type: ${val}`);\n    }\n    const str = new UrlViewModel(url);\n    return str;\n  }\n\n  __asTileData() {\n    return this.forJson();\n  }\n}\n\nclass StringViewModel extends String implements IViewModel {\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  __parentPseudo: PseudoValue<any> | undefined;\n\n  describeField = () => (this.__parentPseudo ? this.__parentPseudo.describeField() : null)\n  describeFieldGroup = () => (this.__parentPseudo ? this.__parentPseudo.describeFieldGroup() : null)\n\n  _value: Map<string, StringTranslatedLanguage>;\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  constructor(value: Map<string, StringTranslatedLanguage>, language: string | null = null) {\n    const lang = value.get(language || DEFAULT_LANGUAGE);\n    let displayValue: string;\n    if (lang) {\n      if (typeof lang == \"string\") {\n        displayValue = lang;\n      } else {\n        displayValue = lang.value;\n      }\n    } else {\n      // TODO: allow fallback\n      displayValue = \"\";\n    }\n    super(displayValue);\n    this._value = value;\n  }\n\n  forJson(): string {\n    return `${this}`;\n  }\n\n  lang(language: string) {\n    const elt = this._value.get(language);\n    if (elt) {\n      if (elt instanceof Object) {\n        return elt.value;\n      }\n      return elt;\n    } else {\n      return undefined;\n    }\n  }\n\n  static __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n  ): StringViewModel | Promise<StringViewModel | null> | null {\n    const nodeid = node.nodeid;\n    if (value instanceof Promise) {\n      return value.then((value) => StringViewModel.__create(tile, node, value));\n    }\n    if (tile) {\n      if (!tile.data.has(nodeid)) {\n        tile.data.set(nodeid, {});\n      }\n      if (value !== null) {\n        if (value instanceof Object) {\n          const entries =\n            value instanceof Map ? value.entries() : Object.entries(value);\n          for (const [k, v] of [...entries]) {\n            const val = tile.data.get(nodeid);\n            if (val instanceof Map) {\n              val.set(k, v);\n            } else if (val instanceof Object) {\n              // @ts-expect-error Need better typing of data to make this settable.\n              val[k] = v;\n            } else if (val !== null) {\n              throw Error(\"Malformed string in tile data\");\n            }\n          }\n        } else {\n          tile.data.set(nodeid, {\n            [DEFAULT_LANGUAGE]: value,\n          });\n        }\n      }\n    }\n\n    const val = tile.data.get(nodeid);\n    if (!tile || val === null || val === undefined) {\n      return null;\n    }\n    let mapVal;\n    if (val instanceof Map) {\n      mapVal = val;\n    } else {\n      mapVal = new Map(Object.entries(val));\n    }\n    const str = new StringViewModel(mapVal);\n    return str;\n  }\n\n  __asTileData() {\n    return this._value;\n  }\n}\n\nclass SemanticViewModel implements IStringKeyedObject, IViewModel {\n  [key: string | symbol]: any;\n  _: IViewModel | Promise<IViewModel> | undefined = undefined;\n  then: undefined;\n  [Symbol.toPrimitive]: undefined;\n\n  __parentPseudo: PseudoValue<any> | undefined;\n  __childValues: Map<string, any>;\n  __parentWkri: IRIVM<any> | null;\n  __childNodes: Map<string, StaticNode>;\n  __tile: StaticTile | null;\n  __node: StaticNode;\n\n  __forJsonCache(): null {\n    return null;\n  }\n\n  constructor(\n    parentWkri: IRIVM<any> | null,\n    childNodes: Map<string, StaticNode>,\n    tile: StaticTile | null,\n    node: StaticNode,\n  ) {\n    this.__childValues = new Map<string, any>();\n    this.__parentWkri = parentWkri;\n    this.__tile = tile;\n    this.__node = node;\n    this.__childNodes = childNodes;\n    return new Proxy(this, {\n      set: (object, key, value) => {\n        const k: string = typeof key === 'symbol' ? key.description || '' : key;\n        if (key in object) {\n          object[key] = value;\n        } else if (k.startsWith(\"__\") || k in object) {\n          object[k] = value;\n        } else {\n          object.__set(k, value);\n        }\n        return true;\n      },\n      get: (object, key) => {\n        const k: string = typeof key === 'symbol' ? key.description || '' : key;\n        if (key in object) {\n          return object[key];\n        } else if (k.startsWith(\"__\") || k in object) {\n          return object[k];\n        }\n        if (k == \"length\") {\n          return object.__childNodes.size;\n        }\n        return new AttrPromise((resolve) => {\n          object.__get(k).then(resolve);\n        });\n      },\n    });\n  }\n\n  async toString(): Promise<string> {\n    const entries = [...this.__childValues.entries()].map(([k, v]) => `${k}: ${v}`);\n    return `[[${entries.join(\",\")}]]`;\n  }\n\n  async toObject() {\n    const entries = [...(await this.__getChildValues()).entries()];\n    return Object.fromEntries(await Promise.all(entries.map(async ([k, vl]) => {\n        return [k, (await vl).getValue()];\n    })));\n  }\n\n  async forJson() {\n    async function _forJson(v: IPseudo | IViewModel | null) {\n      v = await v;\n      if (!v) {\n        return null;\n      }\n      return await v.forJson();\n    };\n    const entries = [...(await this.__getChildValues()).entries()];\n    return Object.fromEntries(await Promise.all(entries.map(async ([k, vl]) => {\n        return [k, vl ? await _forJson(vl) : vl];\n    })));\n  }\n\n  async __update(map: Map<string, any>) {\n    return Promise.all(\n      [...map.entries()].map(([k, v]) => {\n        this.__set(k, v);\n      }),\n    );\n  }\n\n  async __get(key: string) {\n    const childValue = await this.__getChildValue(key);\n    return childValue.getValue();\n  }\n\n  async __set(key: string, value: any) {\n  // async __set(key: string, value: any) {\n    if (!this.__childNodes.has(key)) {\n      throw Error(\n        `Semantic node does not have this key: ${key} (${[...this.__childNodes.keys()]})`,\n      );\n    }\n\n    throw Error(`Setting semantic keys (${key} = ${value}) is not implemented yet in Javascript`);\n    // const child = await this.__getChildValue(key, true);\n    // child.value = value;\n  }\n\n  __has(key: string) {\n    return this.__childNodes.has(key);\n  }\n\n  async __getChildTypes() {\n    const promises = [...this.__childNodes.keys()].map(async (key): Promise<[string, IPseudo]> => [\n      key,\n      await this.__getChildValue(key),\n    ]);\n    const entries: Array<[string, IPseudo]> = await Promise.all(promises);\n    return new Map<string, any>([...entries]);\n  }\n\n  async __getChildren(direct: null | boolean = null) {\n    const items = new Map<string, any>();\n    for (const [key, value] of [...(await this.__getChildValues()).entries()]) {\n      items.set(key, value);\n    }\n    const children = [...items.entries()]\n      .filter((entry) => {\n        const child = this.__childNodes.get(entry[0]);\n        if (!child) {\n          throw Error(\"Child key is not in child nodes\");\n        }\n        return (\n          (direct === null || direct === !child.is_collector) &&\n          entry[1] !== null\n        );\n      })\n      .map((entry) => entry[1]);\n    return children;\n  }\n\n  async __getChildValue(key: string, setDefault: boolean = false): Promise<IPseudo> {\n    if (!this.__childNodes.has(key)) {\n      throw Error(\n        `Semantic node does not have this key: ${key} (${[...this.__childNodes.keys()]})`,\n      );\n    }\n\n    let child;\n    if (!this.__childValues.has(key)) {\n      const children = await this.__getChildValues();\n      child = children.get(key) || null;\n\n      let set = true;\n      if (child === null) {\n        child = this.__makePseudo(key);\n        set = setDefault;\n      }\n      if (set) {\n        // This ensures that we do not set a default value in our\n        // local cache simply because the node is not loaded yet.\n        this.__childValues.set(key, child);\n      }\n      child.parentNode = this.__parentPseudo || null;\n    } else {\n      child = this.__childValues.get(key);\n    }\n    return child;\n  }\n\n  __makePseudo(key: string): IPseudo {\n    const childNode = this.__childNodes.get(key);\n\n    if (!childNode) {\n      throw Error(`Child node key ${key} missing`);\n    }\n\n    if (!this.__parentWkri) {\n      throw Error(\"This semantic node is currently parentless (no WKRI)\");\n    }\n\n    if (!this.__parentWkri.$) {\n      // Could autoretreive?\n      throw Error(\"This semantic node is currently on an unloaded WKRI\");\n    }\n\n    const child = this.__parentWkri.$.addPseudo(childNode, this.__tile, this.__node);\n    child.parentNode = this.__parentPseudo || null;\n    return child;\n  }\n\n  static async __create(\n    tile: StaticTile,\n    node: StaticNode,\n    value: any,\n    parent: IRIVM<any> | null,\n    childNodes: Map<string, StaticNode>,\n  ): Promise<SemanticViewModel> {\n    const svm = new SemanticViewModel(parent, childNodes, tile, node);\n    if (value) {\n      try {\n        await svm.__update(value);\n      } catch (e) {\n        tileLoadingError(\n          `\n          Suppressed a tile loading error: ${e}: ${typeof e} (tile: ${tile}; node: ${node}) - ${value}\n        `,\n          e,\n        );\n      }\n    }\n    // await svm.__getChildren();\n    return svm;\n  }\n\n  async __asTileData() {\n    // Ensure all nodes have populated the tile\n    const relationships: any[] = [];\n    for (const value of [...await this.__getChildren(true)]) {\n      // We do not use tile, because a child node will ignore its tile reference.\n      const [, subrelationships] = await value.getTile();\n      relationships.push(...subrelationships);\n    }\n    // This is none because the semantic type has no nodal value,\n    // only its children have nodal values, and the nodal value of this nodeid should\n    // not exist.\n    return [null, relationships];\n  }\n\n  async __getChildValues(): Promise<Map<string, IPseudo>> {\n    const parent = this.__parentWkri;\n    const childNodes = this.__childNodes;\n    const tile = this.__tile;\n    const node = this.__node;\n    if (!parent || !parent.$) {\n      return new Map();\n    }\n\n    // Ensure lazy-loading done.\n    // TODO check this does not go deeper than necessary.\n    await parent.$.loadNodes([...childNodes.keys()]);\n\n    // TODO: Why not just use edges?\n    const children: Map<string, any> = new Map();\n    for (const entry of [...parent.$.allEntries()]) {\n      const key = entry[0];\n      let values = entry[1];\n      if (values instanceof Promise) {\n        values = await values;\n      }\n      if (values === false || values === null || values === undefined) {\n        continue;\n      }\n      const childNode = childNodes.get(key);\n      if (childNode) {\n        for (let value of values) {\n          if (\n            value !== null &&\n            value.node &&\n            (!(value.parentNode) ||\n              value.parentNode === this.__parentPseudo)\n          ) {\n            // It is possible that this value has already\n            // been requested, but the tile is in-flight.\n            value = await value;\n            if (!value.node) {\n              throw Error(`Node ${childNode.alias} (${childNode.nodeid}) is unavailable`);\n            }\n            if (\n              // value.node.nodegroup_id == node.nodeid in all cases for first possibility?\n              (value.node.nodegroup_id != node.nodegroup_id && tile && value.tile && (!(value.tile.parenttile_id) || value.tile.parenttile_id == tile.tileid)) ||\n              (value.node.nodegroup_id == node.nodegroup_id &&\n                tile &&\n                value.tile == tile &&\n                !childNode.is_collector) //  # It shares a tile\n              // it feels like this should be necessary, but area_assignments->area_assignment fails with null parenttile_id\n              // (tile && value.tile && value.tile.parenttile_id == tile.tileid) ||\n              // (value.node.nodegroup_id == node.nodegroup_id &&\n              //   tile &&\n              //   value.tile == tile &&\n              //   !childNode.is_collector) //  # It shares a tile\n            ) {\n              children.set(key, value);\n            } else if (\n              node.nodegroup_id != value.node.nodegroup_id &&\n              childNode.is_collector // It does not share a tile\n            ) {\n              // This avoids list types that have their own tiles (like resource or concept lists)\n              // from appearing doubly-nested\n              const childValue = value instanceof PseudoList ? value : (value.isIterable() ? await value.getValue() : null);\n              let listValue: PseudoList | Array<any> | null;\n              if (childValue && Array.isArray(childValue)) {\n                listValue = childValue;\n              } else {\n                listValue = null;\n              }\n              if (listValue !== null) {\n                if (children.has(key)) {\n                  children.get(key).push(...listValue);\n                } else {\n                  children.set(key, listValue);\n                }\n              } else {\n                // In this case, we have a value, but the wrapper logic did not make it a PseudoList, so\n                // we should treat it as singular.\n                children.set(key, value);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (const [key, value] of [...children.entries()]) {\n      value.parentNode = this.__parentPseudo;\n      this.__childValues.set(key, value);\n    }\n\n    return children;\n  }\n}\n\nconst CUSTOM_DATATYPES: Map<string, string | IViewModel> = new Map();\n\nasync function getViewModel<RIVM extends IRIVM<RIVM>>(\n  parentPseudo: PseudoValue<any>,\n  tile: StaticTile,\n  node: StaticNode,\n  data: any,\n  parent: IRIVM<RIVM> | null,\n  childNodes: Map<string, StaticNode>,\n  isInner: boolean = false\n): Promise<IViewModel | null> {\n  let vm;\n  // TODO: should parentPseudo.parent.$ trigger a retrieve if missing?\n  const cacheEntries: {[tileId: string]: {[nodeId: string]: IStringKeyedObject}} | undefined = parentPseudo.parent && parentPseudo.parent.$ ? await parentPseudo.parent.$.getValueCache(false, undefined) : undefined;\n  let cacheEntry: IStringKeyedObject | null = null;\n  if (cacheEntries) {\n    cacheEntry = (tile.tileid ? (cacheEntries[tile.tileid] ?? {}) : {})[node.nodeid]\n  };\n  const datatype = isInner ? \"semantic\" : CUSTOM_DATATYPES.get(node.datatype) ?? node.datatype;\n\n  // TODO: find a neater way.\n  let conceptCacheEntry: ConceptListCacheEntry | null;\n  let conceptValueCacheEntry: ConceptValueCacheEntry | null;\n  let resourceInstanceCacheEntry: ResourceInstanceCacheEntry | null;\n  let resourceInstanceListCacheEntry: ResourceInstanceListCacheEntry | null;\n\n  if (!(typeof datatype == \"string\")) {\n    // @ts-expect-error Cannot make a static member part of the interface\n    vm = await datatype.__create(tile, node, data, cacheEntry);\n  } else {\n    switch (datatype) {\n      case \"semantic\":\n        vm = await SemanticViewModel.__create(\n          tile,\n          node,\n          data,\n          parent,\n          childNodes,\n        );\n        break;\n      case \"domain-value\":\n        vm = await DomainValueViewModel.__create(tile, node, data);\n        break;\n      case \"domain-value-list\":\n        vm = await DomainValueListViewModel.__create(tile, node, data);\n        break;\n      case \"concept\":\n        if (cacheEntry && typeof cacheEntry === \"object\" && !(cacheEntry instanceof ConceptValueCacheEntry)) {\n          // @ts-expect-error We do not know the cache entry is structured correctly, and any such checks are in the constructor.\n          conceptValueCacheEntry = new ConceptValueCacheEntry(cacheEntry);\n        } else {\n          conceptValueCacheEntry = cacheEntry;\n        }\n        vm = await ConceptValueViewModel.__create(tile, node, data, conceptValueCacheEntry);\n        break;\n      case \"resource-instance\":\n        if (cacheEntry && typeof cacheEntry === \"object\" && !(cacheEntry instanceof ResourceInstanceCacheEntry)) {\n          // @ts-expect-error We do not know the cache entry is structured correctly, and any such checks are in the constructor.\n          resourceInstanceCacheEntry = new ResourceInstanceCacheEntry(cacheEntry);\n        } else {\n          resourceInstanceCacheEntry = cacheEntry;\n        }\n        vm = await ResourceInstanceViewModel.__create(tile, node, data, resourceInstanceCacheEntry);\n        break;\n      case \"resource-instance-list\":\n        if (cacheEntry && typeof cacheEntry === \"object\" && !(cacheEntry instanceof ResourceInstanceListCacheEntry)) {\n          // @ts-expect-error We do not know the cache entry is structured correctly, and any such checks are in the constructor.\n          resourceInstanceListCacheEntry = new ResourceInstanceListCacheEntry(cacheEntry);\n        } else {\n          resourceInstanceListCacheEntry = cacheEntry;\n        }\n        vm = await ResourceInstanceListViewModel.__create(tile, node, data, resourceInstanceListCacheEntry);\n        break;\n      case \"concept-list\":\n        if (cacheEntry && typeof cacheEntry === \"object\" && !(cacheEntry instanceof ConceptListCacheEntry)) {\n          // @ts-expect-error We do not know the cache entry is structured correctly, and any such checks are in the constructor.\n          conceptCacheEntry = new ConceptListCacheEntry(cacheEntry);\n        } else {\n          conceptCacheEntry = cacheEntry;\n        }\n        vm = await ConceptListViewModel.__create(tile, node, data, conceptCacheEntry);\n        break;\n      case \"date\":\n        vm = await DateViewModel.__create(tile, node, data);\n        break;\n      case \"geojson-feature-collection\":\n        vm = await GeoJSONViewModel.__create(tile, node, data);\n        break;\n      case \"boolean\":\n        vm = await BooleanViewModel.__create(tile, node, data);\n        break;\n      case \"string\":\n        vm = await StringViewModel.__create(tile, node, data);\n        break\n      case \"number\":\n        vm = await NumberViewModel.__create(tile, node, data);\n        break\n      case \"file-list\":\n        vm = await FileListViewModel.__create(tile, node, data);\n        break;\n      case \"edtf\":\n        vm = await EDTFViewModel.__create(tile, node, data);\n        break;\n      case \"url\":\n        vm = await UrlViewModel.__create(tile, node, data);\n        break;\n      case \"non-localized-string\":\n        vm = await NonLocalizedStringViewModel.__create(tile, node, data);\n        break;\n      default:\n        console.warn(\"Missing type for tile\", tile.tileid, \"on node\", node.alias, \"with type\", node.datatype);\n        vm = await NonLocalizedStringViewModel.__create(tile, node, data);\n    }\n  }\n\n  if (vm === null) {\n    return null;\n  }\n\n  vm.__parentPseudo = parentPseudo;\n  if (vm instanceof Array) {\n    for (const vme of vm) {\n      if (vme instanceof Promise) {\n        vme.then(vmep => { if (vmep !== null) vmep.__parentPseudo = parentPseudo; });\n      } else {\n        vme.__parentPseudo = parentPseudo;\n      }\n    }\n  }\n\n  return vm;\n}\n\nexport { ResourceInstanceCacheEntry, DEFAULT_LANGUAGE, ResourceInstanceViewModel, ValueList, getViewModel, DomainValueViewModel, SemanticViewModel, StringViewModel, DateViewModel, GeoJSONViewModel, ConceptValueViewModel, viewContext, NonLocalizedStringViewModel, CUSTOM_DATATYPES, BooleanViewModel, NumberViewModel, UrlViewModel };\n","import { StaticTile, StaticNode } from \"./static-types\";\nimport { ISemantic, IViewModel, IPseudo, IRIVM, IModelWrapper } from \"./interfaces\";\nimport { getViewModel } from \"./viewModels\";\nimport { AttrPromise } from \"./utils\";\n\nclass PseudoUnavailable implements IPseudo {\n  parentNode: PseudoValue<any> | null = null;\n  tile: null = null;\n  node: StaticNode;\n  isOuter: boolean = false;\n\n  constructor(node: StaticNode) {\n    this.node = node;\n  }\n\n  async forJson(): Promise<{[key: string]: any}[] | null> {\n    return null;\n  }\n\n  describeField() {\n    return \"Unavailable field\";\n  }\n\n  describeFieldGroup() {\n    return \"Unavailable field\";\n  }\n\n  public getValue(): AttrPromise<null> {\n    return new AttrPromise(resolve => resolve(null));\n  }\n\n  getLength() {\n    return 0;\n  }\n\n  getChildren(_: boolean = false) {\n    return [];\n  }\n\n  isIterable(): boolean {\n    return false\n  }\n}\n\nconst ITERABLE_DATATYPES = [\n  \"concept-list\",\n  \"resource-instance-list\",\n  \"domain-value-list\"\n];\n\nclass PseudoValue<VM extends IViewModel> implements IPseudo {\n  node: StaticNode;\n  tile: StaticTile | null;\n  value: any;\n  parent: IRIVM<any> | null;\n  parentNode: PseudoValue<any> | null;\n  valueLoaded: boolean | undefined = false;\n  datatype: string | null = null;\n  originalTile: StaticTile | null;\n  accessed: boolean;\n  childNodes: Map<string, StaticNode>;\n  isOuter: boolean = false;\n  isInner: boolean = false;\n  inner: PseudoValue<ISemantic> | null = null;\n  independent: boolean;\n\n  isIterable(): boolean {\n    return this.datatype !== null && ITERABLE_DATATYPES.includes(this.datatype);\n  }\n\n  describeField() {\n    let fieldName = this.node.name;\n    if (this.parent && this.parent.__) {\n      fieldName = `${this.parent.__.wkrm.modelName} - ${fieldName}`;\n    }\n    return fieldName;\n  }\n\n  describeFieldGroup() {\n    let fieldName = this.node.name;\n    if (this.parent && this.node.nodegroup_id && this.parent.$) {\n      const nodegroup = this.parent.$.model.getNodeObjects().get(this.node.nodegroup_id);\n      if (nodegroup && this.parent.__) {\n        fieldName = `${this.parent.__.wkrm.modelName} - ${nodegroup.name}`;\n      }\n    }\n    return fieldName;\n  }\n\n  constructor(\n    node: StaticNode,\n    tile: StaticTile | null,\n    value: any,\n    parent: IRIVM<any> | null,\n    childNodes: Map<string, StaticNode>,\n    inner: boolean | PseudoValue<ISemantic>,\n  ) {\n    this.node = node;\n    this.tile = tile;\n    this.independent = tile === null;\n    if (!parent) {\n      throw Error(\"Must have a parent or parent class for a pseudo-node\");\n    }\n    this.parent = parent;\n    this.parentNode = null;\n    this.childNodes = childNodes;\n    this.value = value;\n    this.accessed = false;\n    this.originalTile = tile;\n    this.datatype = node.datatype;\n    if (inner instanceof PseudoValue) {\n      this.isOuter = true;\n      this.inner = inner;\n    }\n    if (inner === true) {\n      this.isInner = true;\n      this.datatype = 'semantic';\n    }\n  }\n\n  // TODO deepcopy\n  //\n\n  getParentTileId() {\n    return this.tile ? this.tile.parenttile_id : null;\n  }\n\n  async getTile(): Promise<[StaticTile | null, any[]]> {\n    await this.updateValue();\n\n    let relationships: Array<any> = [];\n\n    if (this.inner) {\n      [this.tile, relationships] = await this.inner.getTile();\n    }\n\n    let tileValue;\n    if (this.value !== null) {\n      // It may be better to make this fully async if there's a performance benefit.\n      const [newTileValue, ownRelationships] = await (await this.value).__asTileData();\n      tileValue = newTileValue;\n      relationships = [...relationships, ...ownRelationships];\n    } else {\n      tileValue = null;\n    }\n    // if isinstance(tile_value, tuple):\n    //     relationships = [\n    //         relationship\n    //         if isinstance(relationship, tuple)\n    //         else (self.tile.nodegroup_id, self.node.nodeid, relationship)\n    //         for relationship in tile_value[1]\n    //     ]\n    //     tile_value = tile_value[0]\n    if (!this.tile) {\n      throw Error();\n    }\n    this.tile.data = this.tile.data || {};\n    if (tileValue === null) {\n      if (this.tile.data.get(this.node.nodeid)) {\n        this.tile.data.delete(this.node.nodeid);\n      }\n    } else {\n      this.tile.data.set(this.node.nodeid, tileValue);\n    }\n    const tile = this.independent ? this.tile : null;\n\n    // TODO relationships\n    return [tile, relationships];\n  }\n\n  clear() {\n    this.value = null;\n    if (this.tile && this.tile.data && this.tile.data.has(this.node.nodeid)) {\n      this.tile.data.delete(this.node.nodeid);\n    }\n  }\n\n  updateValue(tile?: StaticTile | null): AttrPromise<VM> {\n    if (tile) {\n      this.tile = tile;\n    }\n    this.accessed = true;\n    if (this.inner) {\n      this.inner.accessed = true;\n    }\n    if (!this.tile) {\n      if (!this.node) {\n        throw Error(\"Empty tile\");\n      }\n      if (this.inner) {\n        return new AttrPromise(async (resolve) => {\n          const tile = await this.inner?.getTile();\n          resolve(this.updateValue(tile ? tile[0] : undefined));\n        });\n      }\n      if (!this.tile) {\n        // NB: You may see issues where the nodegroup is null because it is the root node,\n        // and a node below is not marked as a collector, so tries to fill its tile in\n        // A cardinality n node below the root should be a collector.\n        this.tile = new StaticTile({\n          nodegroup_id: this.node.nodegroup_id || \"\",\n          tileid: null,\n          data: new Map<string, any>(),\n          sortorder: this.node.sortorder,\n          resourceinstance_id: \"\",\n          parenttile_id: null,\n          provisionaledits: null,\n          ensureId: () => \"\"\n        });\n        // this.relationships = [];\n      }\n    }\n    if (this.valueLoaded === false) {\n      this.valueLoaded = undefined;\n      let data: any;\n      if (\n        this.value === null &&\n        this.tile.data !== null &&\n        this.tile.data.has(this.node.nodeid) &&\n        this.datatype !== 'semantic' // Semantic nodes only have placeholder data\n      ) {\n        data = this.tile.data.get(this.node.nodeid);\n      } else {\n        data = this.value;\n      }\n\n      if (this.isOuter && typeof data === 'object' && this.inner && data) {\n        let outerData = undefined;\n        if (\"_\" in data && !data.constructor) {\n          outerData = data[\"_\"];\n          delete data[\"_\"];\n          this.inner.getValue().then((v: ISemantic | null) => v && v.update(data));\n          data = outerData;\n        } else if (data instanceof Map && data.has(\"_\")) {\n          outerData = data.get(\"_\");\n          data.delete(\"_\");\n          this.inner.getValue().then((v: ISemantic | null) => v && v.update(data));\n          data = outerData;\n        }\n      }\n      const vm = getViewModel(\n        this,\n        this.tile,\n        this.node,\n        data,\n        this.parent,\n        this.childNodes,\n        this.isInner\n      );\n\n      const resolveAttr = (vm: IViewModel) => {\n        if (vm !== null && vm instanceof Object) {\n          vm.__parentPseudo = this;\n          if (this.isOuter && this.inner) {\n            vm._ = this.inner.getValue();\n          }\n\n          this.valueLoaded = true;\n        }\n        return vm;\n      };\n      this.value = new AttrPromise((resolve) => {\n        vm.then((vm) => resolve(vm ? resolveAttr(vm) : vm));\n      });\n    }\n\n    return this.value;\n  }\n\n  public getValue(): AttrPromise<VM | null> {\n    return this.updateValue();\n  }\n\n  // @value.setter\n  // def value(this, value):\n\n  getLength() {\n    return this.getChildren().length;\n  }\n\n  async getChildTypes() {\n    await this.updateValue();\n    let childTypes = {};\n    if (this.value && this.value instanceof Object && 'getChildTypes' in this.value && typeof this.value.getChildTypes === 'function') {\n      childTypes = this.value.getChildTypes();\n    }\n    if (this.inner) {\n      Object.assign(childTypes, this.inner.getChildTypes());\n    }\n    return childTypes;\n  }\n\n  getChildren(direct = null): IPseudo[] {\n    let children = [];\n    if (this.value && this.value instanceof Object && 'getChildren' in this.value && typeof this.value.getChildren === 'function') {\n      children = this.value.getChildren(direct);\n    }\n    if (this.inner) {\n      children = [...children, ...this.inner.getChildren(direct)];\n    }\n    return children;\n  }\n\n  async forJson(): Promise<{[key: string]: any} | {[key: string]: any}[] | string | number | boolean | null> {\n    const value = (await this.getValue());\n    return value instanceof Object ? value.forJson() : value;\n  }\n}\n\nclass PseudoList extends Array implements IPseudo {\n  node: StaticNode | undefined = undefined;\n  parent: IRIVM<any> | null | undefined = undefined;\n  parentNode: PseudoValue<any> | null = null;\n  tile: StaticTile | undefined;\n  parenttileId: string | undefined;\n  ghostChildren: Set<PseudoValue<any>> | null = null;\n  isOuter: boolean = false;\n\n  isIterable(): boolean {\n    return true;\n  }\n\n  async sorted() {\n    const resolved = await Promise.all(this.map(async (pn) => await pn));\n    const test = [];\n    const sorted = resolved.sort((a, b) => {\n      const vals = [a, b].map(val => {\n        if (val && a.__parentPseudo && a.__parentPseudo.tile) {\n          if (val.__parentPseudo.tile.sortorder > 0) {\n            // RMV\n            test.push(1);\n          }\n          return val.__parentPseudo.tile.sortorder;\n        } else {\n          return 0;\n        }\n      });\n      return vals[0] - vals[1];\n    });\n    return sorted;\n  }\n\n  describeField() {\n    if (!this.node) {\n      return \"[(uninitialized node)]\";\n    }\n\n    let fieldName = this.node.name;\n    if (this.parent && this.parent.__) {\n      fieldName = `${this.parent.__.wkrm.modelName} - ${fieldName}`;\n    }\n    return `[${fieldName}]`;\n  }\n\n  describeFieldGroup() {\n    if (!this.node) {\n      return \"[(uninitialized node)]\";\n    }\n\n    let fieldName = this.node.name;\n    if (this.parent && this.node.nodegroup_id && this.parent.$) {\n      const nodegroup = this.parent.$.model.getNodeObjects().get(this.node.nodegroup_id);\n      if (nodegroup && this.parent.__) {\n        fieldName = `${this.parent.__.wkrm.modelName} - ${nodegroup.name}`;\n      }\n    }\n    return `[${fieldName}]`;\n  }\n\n  // Otherwise interferes with Array methods;\n  initialize(node: StaticNode, parent: IRIVM<any> | null) {\n    this.node = node;\n    if (Array.isArray(this.node)) {\n      throw Error(\"Cannot make a list of lists\");\n    }\n    if (!parent) {\n      throw Error(\"Must have a parent or parent class for a pseudo-node\");\n    }\n    this.parent = parent;\n    this.tile = undefined;\n    this.parenttileId = undefined;\n    this.ghostChildren = new Set();\n  }\n\n  async forJson(): Promise<{[key: string]: any}[]> {\n    const array: {[key: string]: any}[] = Array.from(\n      (await this.sorted()).map(\n        async (entry: Promise<IViewModel> | IViewModel) => {\n          const value = await entry;\n          return (value && value instanceof Object && value.forJson) ? value.forJson() : value;\n        }\n      )\n    );\n    return Promise.all(array);\n  }\n\n  getValue(): AttrPromise<PseudoList> {\n    return new AttrPromise(resolve => resolve(this));\n  }\n\n  toString() {\n    return `<PL: ${this.length}>`;\n  }\n}\n\n// Fix wkri type.\nfunction makePseudoCls(\n  model: IModelWrapper<any>,\n  key: string,\n  single: boolean,\n  tile: StaticTile | null = null,\n  wkri: any | null = null,\n): PseudoList | PseudoValue<any> | PseudoUnavailable {\n  const nodeObjs = model.getNodeObjectsByAlias();\n  const nodeObj = nodeObjs.get(key);\n  if (!nodeObj) {\n    throw Error(\"Could not find node by alias\");\n  }\n\n  const nodegroups = model.getNodegroupObjects();\n  const nodegroup = nodegroups.get(nodeObj.nodegroup_id || \"\");\n\n  let value = null;\n  if (\n    nodeObj.nodegroup_id &&\n    nodeObj.is_collector &&\n    nodegroup &&\n    nodegroup.cardinality == \"n\" &&\n    !single\n  ) {\n    value = new PseudoList();\n    value.initialize(nodeObj, wkri);\n  }\n  if (value === null || tile) {\n    let nodeValue;\n    const isPermitted = model.isNodegroupPermitted(nodeObj.nodegroup_id || '', tile, nodeObjs);\n    if (isPermitted) {\n      const childNodes: Map<string, StaticNode> = model.getChildNodes(nodeObj.nodeid);\n      let inner: boolean | PseudoValue<any> = false;\n      if (childNodes && childNodes.size && nodeObj.datatype !== 'semantic') {\n        inner = new PseudoValue(nodeObj, tile, null, wkri, childNodes, true);\n      }\n      nodeValue = new PseudoValue(nodeObj, tile, null, wkri, inner !== false ? new Map() : childNodes, inner);\n    } else {\n      nodeValue = new PseudoUnavailable(nodeObj);\n    }\n    // If we have a tile in a list, add it\n    if (value) {\n      value.push(nodeValue.getValue());\n    } else {\n      value = nodeValue;\n    }\n  }\n\n  return value;\n}\n\nexport { PseudoValue, PseudoList, PseudoUnavailable, makePseudoCls };\n","import { GraphResult, archesClient, ArchesClient, ArchesClientRemote } from './client';\nimport { staticStore } from './staticStore';\nimport { CardComponent, DEFAULT_CARD_COMPONENT, Widget, getDefaultWidgetForNode } from './cards';\nimport {\n  StaticTranslatableString,\n  StaticCollection,\n  StaticConstraint,\n  StaticCard,\n  StaticEdge,\n  StaticCardsXNodesXWidgets,\n  StaticFunctionsXGraphs,\n  StaticTile,\n  StaticGraph,\n  StaticNode,\n  StaticNodegroup,\n  StaticResource,\n  StaticResourceDescriptors,\n  StaticGraphMeta,\n  IStaticDescriptorConfig\n} from \"./static-types\";\nimport { makePseudoCls, PseudoList } from \"./pseudos.ts\";\nimport { DEFAULT_LANGUAGE, ResourceInstanceViewModel, ValueList, viewContext, SemanticViewModel } from \"./viewModels.ts\";\nimport { CheckPermission, GetMeta, IRIVM, IStringKeyedObject, IPseudo, IInstanceWrapper, IViewModel, ResourceInstanceViewModelConstructor } from \"./interfaces\";\nimport { } from \"./nodeConfig.ts\";\nimport { generateUuidv5, AttrPromise } from \"./utils\";\n\nconst MAX_GRAPH_DEPTH = 100;\nconst DESCRIPTOR_FUNCTION_ID = \"60000000-0000-0000-0000-000000000001\";\n\nclass WKRM {\n  modelName: string;\n  modelClassName: string;\n  graphId: string;\n  meta: StaticGraphMeta;\n\n  constructor(meta: StaticGraphMeta) {\n    let name: {[lang: string]: string} | string | undefined;\n    if (meta.name instanceof Object) {\n      name = meta.name[DEFAULT_LANGUAGE].toString();\n    } else {\n      name = meta.name;\n    }\n    this.modelName = name || \"Unnamed\";\n    this.graphId = meta.graphid;\n    this.modelClassName = (meta.slug || this.modelName)\n      .replace(/[_-]/g, \" \")\n      .replace(/\\s(.)/g, (c: string) => c.toUpperCase())\n      .replace(/\\s/g, \"\");\n    this.modelClassName = this.modelClassName[0].toUpperCase() + this.modelClassName.slice(1);\n    this.meta = meta;\n  }\n}\n\nclass ConfigurationOptions {\n  graphs: Array<string> | null | boolean;\n  eagerLoadGraphs: boolean = false;\n\n  constructor() {\n    this.graphs = null;\n  }\n}\n\nclass ResourceInstanceWrapper<RIVM extends IRIVM<RIVM>> implements IInstanceWrapper<RIVM> {\n  wkri: RIVM;\n  model: ResourceModelWrapper<RIVM>;\n\n  resource: StaticResource | null | false ;\n  valueList: ValueList<RIVM>;\n  cache: {[tileId: string]: {[nodeId: string]: IStringKeyedObject}} | undefined;\n  scopes?: string[];\n  metadata?: {[key: string]: string};\n\n  constructor(\n    wkri: RIVM,\n    model: ResourceModelWrapper<RIVM>,\n    resource: StaticResource | null | false, // False to disable dynamic resource-loading\n    pruneTiles: boolean = true\n  ) {\n    this.wkri = wkri;\n    this.model = model;\n    if (resource) {\n      this.model.stripTiles(resource);\n    }\n    this.resource = resource;\n    this.valueList = new ValueList(new Map<string, any>(), new Map<string, boolean>(), this, []);\n    this.cache = resource ? resource.__cache : undefined;\n    this.scopes = resource ? resource.__scopes : undefined;\n    this.metadata = resource ? resource.metadata : undefined;\n    if (pruneTiles && this.resource) {\n      this.pruneResourceTiles()\n    }\n  }\n\n  pruneResourceTiles(): undefined {\n    if (!this.resource) {\n      console.warn(\"Trying to prune tiles for an empty resource\", this.wkri.modelClassName);\n      return;\n    }\n    this.resource.tiles = (this.resource.tiles || []).filter((tile: StaticTile) => {\n      return this.model.isNodegroupPermitted(tile.nodegroup_id || '', tile);\n    });\n  }\n\n  async loadNodes(aliases: Array<string>): Promise<void> {\n    for (const key of aliases) {\n      await this.valueList.retrieve(key);\n    }\n  }\n\n  async getName(update: boolean = false) {\n    let resourceName = this.resource && this.resource.resourceinstance.name;\n    if (update || !resourceName) {\n      const descriptors = await this.getDescriptors(update);\n      resourceName = (descriptors && descriptors.name) || resourceName || '<Unnamed>';\n      if (this.resource && this.resource.resourceinstance) {\n        this.resource.resourceinstance.name = resourceName;\n      }\n    }\n    return resourceName;\n  }\n\n  async getDescriptors(update: boolean = false) {\n    let descriptors = this.resource && this.resource.resourceinstance.descriptors;\n    if (update || !descriptors || descriptors.isEmpty()) {\n      descriptors = new StaticResourceDescriptors();\n      let descriptorConfig: IStaticDescriptorConfig | undefined = undefined;\n      if (this.model.graph.functions_x_graphs) {\n        const descriptorNode = this.model.graph.functions_x_graphs.find(node => node.function_id === DESCRIPTOR_FUNCTION_ID);\n        if (descriptorNode) {\n          descriptorConfig = descriptorNode.config;\n        }\n      }\n      const nodes = this.model.getNodeObjects();\n      if (descriptorConfig) {\n        for (const [descriptor, config] of Object.entries(descriptorConfig.descriptor_types)) {\n          const semanticNode = nodes.get(config.nodegroup_id);\n          let description = config.string_template;\n          if (!description) {\n            continue;\n          }\n          let requestedNodes = description.match(/<[A-Za-z _-]*>/g) || [];\n          const relevantNodes = [...nodes.values()].filter(node => node.nodegroup_id === config.nodegroup_id && [...requestedNodes].includes(`<${node.name}>`)).map(node => [node.name, node.alias || '']);\n          let relevantValues: [string, string | undefined][] = [];\n          // First try and see if we can find all of these on one tile, for consistency.\n          if (semanticNode) {\n            let semanticValue = await (await this.valueList.retrieve(semanticNode.alias || ''))[0];\n            if (semanticValue instanceof PseudoList) {\n              semanticValue = await semanticValue[0];\n            } else if (semanticValue.inner) {\n              // TODO: Do we need to re-add the e.g. stringviewmodel as a <...> variable?\n              relevantValues.push([semanticNode.name || '', await semanticValue.getValue()]);\n              semanticValue = await semanticValue.inner.getValue();\n            } else {\n              semanticValue = await semanticValue.getValue();\n            }\n            if (semanticValue) {\n              relevantValues = [...relevantValues, ...await Promise.all(relevantNodes.filter(([_, alias]) => semanticValue.__has(alias)).map(([name, alias]) => semanticValue[alias].then((value: IViewModel) => [name, value])))];\n            }\n          }\n          if (relevantValues) {\n            description = relevantValues.reduce((desc, [name, value]) => value ? desc.replace(`<${name}>`, value) : desc, description);\n          }\n          requestedNodes = description.match(/<[A-Za-z _-]*>/g) || [];\n          if (requestedNodes.length) {\n            relevantValues = await Promise.all(relevantNodes.map(([name, alias]) => this.valueList.retrieve(alias).then((values: string[]): [string, string | undefined] => [name, values ? values[0] : undefined])));\n            if (relevantValues) {\n              description = relevantValues.reduce((desc, [name, value]) => value ? desc.replace(`<${name}>`, value) : desc, description);\n            }\n          }\n          descriptors[descriptor] = description;\n        }\n      }\n    }\n    if (this.resource && this.resource.resourceinstance) {\n      this.resource.resourceinstance.descriptors = descriptors;\n      if (descriptors.name) {\n        this.resource.resourceinstance.descriptors.name = descriptors.name;\n      }\n    }\n    return descriptors;\n  }\n\n  addPseudo(childNode: StaticNode, tile: StaticTile | null, node: StaticNode): IPseudo {\n    const key = childNode.alias;\n    if (!key) {\n      throw Error(`Cannot add a pseudo node with no alias ${childNode.nodeid}`);\n    }\n    const child = makePseudoCls(\n      this.model,\n      key,\n      false,\n      (!childNode.is_collector && childNode.nodegroup_id === node.nodegroup_id) ? tile : null, // Does it share a tile\n      this.wkri,\n    );\n\n    const valueList: ValueList<any> = this.valueList;\n    valueList.setDefault(key, []).then((val: Array<any>) => val.push(child));\n    return child;\n  }\n\n  allEntries(): MapIterator<[string, Array<IPseudo> | false | null]> {\n    return this.valueList.values.entries()\n  }\n\n  async keys() {\n    return (await this.getRootViewModel()).keys();\n  }\n\n  async values() {\n    return (await this.getRootViewModel()).values();\n  }\n\n  async entries() {\n    return (await this.getRootViewModel()).entries();\n  }\n\n  async getRootViewModel(): Promise<SemanticViewModel> {\n    const root = await this.getRoot();\n    let value: IViewModel | null = null;\n    if (root) {\n      const rootValue = await root.getValue();\n      if (!Array.isArray(rootValue)) {\n        value = rootValue;\n      }\n    }\n    if (!value || !(value instanceof SemanticViewModel)) {\n      throw Error(`Tried to get root on ${this.model.wkrm.modelClassName}, which has no root`);\n    }\n    return value;\n  }\n\n  getOrmAttribute(key: string): AttrPromise<IViewModel> {\n    let promise: Promise<void>;\n    if (this.resource === null) {\n      promise = this.model.findStatic(this.wkri.id).then(resource => {\n        this.resource = resource;\n      }).then(() => this.populate(true));\n    } else {\n      promise = new Promise((resolve) => { resolve(); });\n    }\n\n    // TODO remapping\n    return new AttrPromise(resolve => {\n      promise.then(() => this.getRootViewModel()).then(root => resolve(root[key]));\n    });\n  }\n\n  async getRoot(): Promise<IPseudo | undefined> {\n    const values = this.valueList;\n    const node = this.model.getRootNode();\n    if (node) {\n      let value;\n      const alias = node.alias;\n      if (!(typeof alias == 'string')) {\n        throw Error(`Alias missing for node ${node.nodeid}`);\n      }\n      await values.setDefault(alias, []);\n      const nodeValues = await values.get(alias);\n\n      if (nodeValues.length > 1) {\n        throw Error(\"Cannot have multiple root tiles\");\n      } else if (nodeValues.length == 1) {\n        value = nodeValues[0];\n      } else {\n        value = makePseudoCls(this.model, alias, false, null, this.wkri);\n        values.set(alias, [value]);\n      }\n      return value;\n    }\n  }\n\n  setOrmAttribute(key: string, value: any) {\n    // TODO remapping\n    return this.getRootViewModel().then((root) => {\n      if (root) {\n        root[key] = value;\n      } else {\n        throw Error(`Tried to set ${key} on ${self}, which has no root`);\n      }\n    });\n  }\n\n  async ensureNodegroup(\n    allValues: Map<string, any>,\n    allNodegroups: Map<string, boolean | Promise<any>>,\n    nodegroupId: string,\n    nodeObjs: Map<string, StaticNode>,\n    nodegroupObjs: Map<string, StaticNodegroup>,\n    edges: Map<string, string[]>,\n    addIfMissing: boolean,\n    tiles: StaticTile[] | null,\n    doImpliedNodegroups: boolean = true\n  ): Promise<[Map<string, any>, Set<string>]> {\n    const impliedNodegroups: Set<string> = new Set();\n    const sentinel = allNodegroups.get(nodegroupId); // no action required if pending\n    let newValues = new Map();\n\n    if (sentinel === false || (addIfMissing && sentinel === undefined)) {\n      [...nodeObjs.values()].filter((node: StaticNode) => {\n        return node.nodegroup_id === nodegroupId;\n      }).forEach((node: StaticNode) => allValues.delete(node.alias || ''));\n      let nodegroupTiles: (StaticTile | null)[];\n      if (tiles === null) {\n        nodegroupTiles = [];\n        console.error(\"Tiles must be provided and cannot be lazy-loaded yet\");\n      } else {\n        nodegroupTiles = tiles.filter(\n          (tile) => tile.nodegroup_id == nodegroupId && this.model.isNodegroupPermitted(nodegroupId, tile)\n        );\n        if (nodegroupTiles.length == 0 && addIfMissing) {\n          nodegroupTiles = [null];\n        }\n        const rgValues = await this.valuesFromResourceNodegroup(\n          allValues,\n          nodegroupTiles,\n          nodegroupId,\n          nodeObjs,\n          edges,\n        );\n        newValues = rgValues[0];\n        const newImpliedNodegroups: Set<string> = rgValues[1];\n\n        [...newValues.entries()].forEach((entry) => {\n          if (entry[1] !== undefined) {\n            allValues.set(entry[0], entry[1]);\n          }\n        });\n        [...newImpliedNodegroups].forEach((v) => {\n          impliedNodegroups.add(v);\n        });\n        allNodegroups.set(nodegroupId, true);\n      }\n    }\n\n    // RMV double-check against Python logic\n    if (doImpliedNodegroups) {\n      for (const nodegroupId of [...impliedNodegroups]) {\n        // TODO: why are we not keeping implied nodegroups?\n        const [impliedValues] = await this.ensureNodegroup(\n          allValues,\n          allNodegroups,\n          nodegroupId,\n          nodeObjs,\n          nodegroupObjs,\n          edges,\n          true,\n          tiles, // RMV different from Python\n          true\n        );\n        for (const [key, value] of impliedValues) {\n          newValues.set(key, value);\n        }\n      }\n      impliedNodegroups.clear();\n    }\n\n    return [newValues, impliedNodegroups];\n  }\n\n  async populate(lazy: boolean): Promise<void> {\n    const nodeObjs = this.model.getNodeObjects();\n    const nodegroupObjs = this.model.getNodegroupObjects();\n    const edges = this.model.getEdges();\n    // FIXME: this needs to be nodeObjs to ensure tiles\n    // whose nodegroup node is in a different nodegroup\n    // (e.g. children of designation_and_protection_timespan)\n    // get loaded - however, just doing that drops performance\n    // by half or two-thirds, so a less wasteful approach is needed.\n    const allValues: Map<string, any> = new Map();\n    const allNodegroups: Map<string, any> = new Map([...nodegroupObjs.keys()].map((id: string) => {\n      return [id || \"\", false];\n    }));\n    //[...nodegroupObjs.keys()].map((id: string) => {\n    //  const node = nodeObjs.get(id);\n    //  if (!node) {\n    //    throw Error(`Could not find node for nodegroup ${id}`);\n    //  }\n    //  allValues.set(node.alias || \"\", false);\n    //});\n    const rootNode = this.model.getRootNode();\n\n    if (rootNode.alias === null) {\n      throw Error(\"Cannot populate a model with no proper root node\");\n    }\n\n    allValues.set(rootNode.alias, false);\n\n    let tiles = null;\n    if (!lazy && this.resource) {\n      tiles = this.resource.tiles;\n      let impliedNodegroups = new Set<string>();\n      for (const [ng] of nodegroupObjs) {\n        const [_, newImpliedNodegroups] = await this.ensureNodegroup(\n          allValues,\n          allNodegroups,\n          ng,\n          nodeObjs,\n          nodegroupObjs,\n          edges,\n          true, // RMV: check vs python\n          tiles,\n          false\n        );\n\n        for (const impliedNodegroup of [...newImpliedNodegroups]) {\n          impliedNodegroups.add(impliedNodegroup);\n        }\n        impliedNodegroups.delete(ng);\n      }\n\n      while (impliedNodegroups.size) {\n        const newImpliedNodegroups = new Set<string>();\n        for (const nodegroupId of [...impliedNodegroups]) {\n          const currentValue = allNodegroups.get(nodegroupId);\n          if (currentValue === false || currentValue === undefined) {\n            const [_, newImpliedNodegroups] = await this.ensureNodegroup(\n              allValues,\n              allNodegroups,\n              nodegroupId,\n              nodeObjs,\n              nodegroupObjs,\n              edges,\n              true,\n              tiles, // RMV different from Python\n              true\n            );\n            for (const impliedNodegroup of [...newImpliedNodegroups]) {\n              newImpliedNodegroups.add(impliedNodegroup);\n            }\n          }\n        }\n        impliedNodegroups = newImpliedNodegroups;\n      }\n    } else if (this.resource) {\n      this.model.stripTiles(this.resource);\n    }\n\n    this.valueList = new ValueList(\n      allValues,\n      allNodegroups,\n      this,\n      this.resource ? this.resource.tiles : null,\n    );\n  }\n\n  async getValueCache(build: boolean = true, getMeta: GetMeta = undefined): Promise<{[tileId: string]: {[nodeId: string]: IStringKeyedObject}} | undefined> {\n    if (build) {\n      this.cache = await this.buildValueCache(getMeta);\n    }\n    return this.cache;\n  }\n\n  async buildValueCache(getMeta: GetMeta): Promise<{[tileId: string]: {[nodeId: string]: IStringKeyedObject}}> {\n    const cacheByTile: {[tileId: string]: {[nodeId: string]: IStringKeyedObject}} = {};\n    for (let pseudos of this.valueList.values.values()) {\n      pseudos = await pseudos;\n      if (pseudos) {\n        await Promise.all(pseudos.map(async (pseudo: IPseudo) => {\n          const value = await pseudo.getValue();\n          // We do not try to cache pseudolists\n          if (pseudo.tile && value && (!Array.isArray(pseudo))) {\n            // @ts-expect-error this can be IViewModel[] while using a pseudolist\n            const cacheJson = await value.__forJsonCache(getMeta); // caching JSON\n            if (cacheJson) {\n              const tileId = pseudo.tile.ensureId();\n              const nodeId = pseudo.node.nodeid;\n              if (!(tileId in cacheByTile)) {\n                cacheByTile[tileId] = {};\n              }\n              if (!(nodeId in cacheByTile[tileId])) {\n                cacheByTile[tileId][nodeId] = {};\n              }\n              cacheByTile[tileId][nodeId] = cacheJson;\n            }\n          }\n        }));\n      }\n    }\n    return cacheByTile;\n  }\n\n  async valuesFromResourceNodegroup(\n    existingValues: Map<string, any>,\n    nodegroupTiles: (StaticTile | null)[],\n    nodegroupId: string,\n    nodeObjs: Map<string, StaticNode>,\n    edges: Map<string, string[]>,\n  ): Promise<[Map<string, any>, Set<string>]> {\n    const allValues = new Map<string, any>();\n\n    const impliedNodegroups = new Set<string>();\n    const impliedNodes: Map<string, [StaticNode, StaticTile]> = new Map();\n\n    const nodesUnseen = new Set(\n      [...nodeObjs.values()]\n        .filter((node) => node.nodegroup_id == nodegroupId)\n        .map((node) => node.alias),\n    );\n    const tileNodesSeen: Set<[string, string]> = new Set();\n    const _addPseudo = async (node: StaticNode, tile: StaticTile | null) => {\n      const key = node.alias || \"\";\n      nodesUnseen.delete(node.alias);\n      const tileid = tile && tile.tileid;\n      if (tileid) {\n        tileNodesSeen.add([node.nodeid, tileid]);\n      }\n      let existing = existingValues.get(key);\n      if (existing instanceof Promise) {\n        existing = await existing;\n      }\n      if (existing !== false && existing !== undefined) {\n        // This might be correct - confirm.\n        // console.warn(`Tried to load node twice: ${key} (${node.nodeid}<${node.nodegroup_id})`, nodegroupId);\n        allValues.set(key, existing);\n      }\n      if (!allValues.has(key)) {\n        allValues.set(key, []);\n      }\n      const pseudoNode = makePseudoCls(this.model, key, false, tile, this.wkri);\n      // We shouldn't have to take care of this case, as it should already\n      // be included below.\n      // if tile.parenttile_id:\n      for (const [domain, ranges] of edges) {\n        if (ranges.includes(node.nodeid)) {\n          const domainNode = nodeObjs.get(domain);\n          if (!domainNode) {\n            throw Error(\"Edge error in graph\");\n          }\n          const toAdd = domainNode.nodegroup_id\n            ? domainNode.nodegroup_id\n            : '';\n          if (toAdd && toAdd !== nodegroupId) {\n            impliedNodegroups.add(toAdd);\n          }\n          if (domainNode.nodegroup_id && tile && domainNode.nodegroup_id === tile.nodegroup_id && domainNode.nodegroup_id !== domainNode.nodeid && tileid && !impliedNodes.has(domainNode.nodeid + tileid)) {\n            impliedNodes.set(domainNode.nodeid + tileid, [domainNode, tile]);\n          }\n          break;\n        }\n      }\n      if (Array.isArray(pseudoNode)) {\n        const value = allValues.get(key);\n        if (value !== undefined && value !== false) {\n          for (const pseudoList of allValues.get(key)) {\n            if (!(pseudoList instanceof PseudoList) || !(pseudoNode instanceof PseudoList)) {\n              throw Error(`Should be all lists not ${typeof pseudoList} and ${typeof pseudoNode}`);\n            }\n\n            if (pseudoList.parentNode == pseudoNode.parentNode) {\n              for (const ps of pseudoNode) {\n                pseudoList.push(ps);\n              }\n              return;\n            }\n          }\n        }\n      }\n      allValues.get(key).push(pseudoNode);\n    };\n\n    for (const tile of nodegroupTiles) {\n      const parentNode = nodeObjs.get(nodegroupId);\n      if (parentNode === undefined) {\n        continue;\n      }\n      if (!parentNode.nodegroup_id || parentNode.nodegroup_id == nodegroupId) {\n        await _addPseudo(parentNode, tile);\n      }\n\n      if (tile) {\n        const tileNodes = new Map();\n        for (const [key, value] of [...tile.data.entries()]) {\n          tileNodes.set(key, value);\n        }\n\n        // Semantic nodes in this tile should always have a pseudo-node\n        [...nodeObjs.values()].filter((node: StaticNode) => {\n          return node.nodegroup_id === nodegroupId && !tileNodes.get(node.nodeid) && node.datatype === 'semantic';\n        }).forEach((node: StaticNode) => tileNodes.set(node.nodeid, {}));\n\n        if (!tileNodes.has(tile.nodegroup_id)) {\n          tileNodes.set(tile.nodegroup_id, {});\n        }\n        for (const [nodeid, nodeValue] of [...tileNodes.entries()]) {\n          if (nodeid == nodegroupId) {\n            // RMV is this correct?\n            continue;\n          }\n          const node = nodeObjs.get(nodeid);\n          if (!node) {\n            throw Error(`Unknown node in nodegroup: ${nodeid} in ${nodegroupId}`);\n          }\n          if (nodeValue !== null) {\n            await _addPseudo(node, tile);\n          }\n        }\n      }\n    }\n    while (impliedNodes.size > 0) {\n      const value = impliedNodes.entries().next().value;\n      if (value) {\n        const [node, tile] = value[1];\n        // If nodeid!=nodegroup_id, then it has its own tile.\n        if (tile.tileid && !tileNodesSeen.has([node.nodeid, tile.tileid])) {\n          await _addPseudo(node, tile);\n        }\n        impliedNodes.delete(value[0]);\n      }\n    }\n    // Remove any \"unloaded\" sentinel values so we do not try and\n    // reload this nodegroup.\n    [...nodesUnseen.keys()].forEach((nodeUnseen) => {\n      // if (allValues.get(nodeUnseen) === false) { // TODO: work out why this is not necessary\n      if (nodeUnseen) {\n        allValues.set(nodeUnseen, undefined);\n      }\n      // }\n    });\n    return [allValues, impliedNodegroups];\n  }\n}\n\ntype GraphMutation = (baseGraph: StaticGraph) => StaticGraph;\n\nclass GraphMutator {\n  baseGraph: StaticGraph;\n  mutations: GraphMutation[];\n\n  autocreateCard: boolean;\n\n  constructor(baseGraph: StaticGraph, options: {\n    autocreateCard?: boolean\n  } = {}) {\n    this.baseGraph = baseGraph;\n    this.mutations = [];\n    this.autocreateCard = options.autocreateCard === undefined || options.autocreateCard;\n  }\n\n  _generateUuidv5(key: string) {\n    return generateUuidv5(['graph', this.baseGraph.graphid], key);\n  }\n\n  _generateEdge(fromNode: string, toNode: string, ontologyProperty: string, name?: string, description?: string) {\n    const edgeId = this._generateUuidv5(`node-${fromNode}-${toNode}`);\n    return new StaticEdge({\n      description: description || null,\n      domainnode_id: fromNode,\n      edgeid: edgeId,\n      graph_id: this.baseGraph.graphid,\n      name: name || null,\n      rangenode_id: toNode,\n      ontologyproperty: ontologyProperty,\n    });\n  }\n\n  addSemanticNode(parentAlias: string | null, alias: string, name: string, cardinality: 'n' | '1', ontologyClass: string, parentProperty: string, description?: string, options: {\n    exportable?: boolean,\n    fieldname?: string,\n    hascustomalias?: boolean;\n    is_collector?: boolean;\n    isrequired?: boolean;\n    issearchable?: boolean;\n    istopnode?: boolean;\n    sortorder?: number;\n  } = {}, config?: {[key: string]: any}) {\n    return this._addGenericNode(\n      parentAlias,\n      alias,\n      name,\n      cardinality,\n      \"semantic\",\n      ontologyClass,\n      parentProperty,\n      description,\n      options,\n      config\n    );\n  }\n\n  addConceptNode(parentAlias: string | null, alias: string, name: string, collection: StaticCollection, cardinality: 'n' | '1', ontologyClass: string, parentProperty: string, description?: string, options: {\n    is_list?: boolean,\n    exportable?: boolean,\n    fieldname?: string,\n    hascustomalias?: boolean;\n    is_collector?: boolean;\n    isrequired?: boolean;\n    issearchable?: boolean;\n    istopnode?: boolean;\n    sortorder?: number;\n  } = {}, config?: {[key: string]: any}) {\n    config = config || {};\n    if (collection?.id) {\n      config['rdmCollection'] = collection.id\n    }\n    return this._addGenericNode(\n      parentAlias,\n      alias,\n      name,\n      cardinality,\n      options.is_list ? \"concept-list\" : \"concept\",\n      ontologyClass,\n      parentProperty,\n      description,\n      options,\n      config\n    );\n  }\n\n  addCard(nodegroup: string | StaticNodegroup, name: string | StaticTranslatableString, component?: CardComponent, options: {\n    active?: boolean,\n    constraints?: Array<StaticConstraint>,\n    cssclass?: string | null,\n    helpenabled?: boolean,\n    helptext?: string | null | StaticTranslatableString,\n    helptitle?: string | null | StaticTranslatableString,\n    instructions?: string | null | StaticTranslatableString,\n    is_editable?: boolean,\n    description?: string | null,\n    sortorder?: number | null,\n    visible?: boolean\n  } = {}, config?: {[key: string]: any}) {\n    const nodegroupId = typeof nodegroup === 'string' ? nodegroup : nodegroup.nodegroupid;\n    const cardName = name instanceof StaticTranslatableString ? name : new StaticTranslatableString(name);\n    const cardComponent = component || DEFAULT_CARD_COMPONENT;\n    const helptext = options?.helptext && (\n      options.helptext instanceof StaticTranslatableString ?\n        options.helptext : new StaticTranslatableString(options.helptext)\n    );\n    const helptitle = (options?.helptitle && (\n      options.helptitle instanceof StaticTranslatableString ?\n        options.helptitle : new StaticTranslatableString(options.helptitle)\n    ));\n    const instructions = (options?.instructions && (\n      options.instructions instanceof StaticTranslatableString ?\n        options.instructions : new StaticTranslatableString(options.instructions)\n    ));\n    this.mutations.push((graph: StaticGraph) => {\n      graph.cards = graph.cards || [];\n      if (graph.cards.filter(card => card.nodegroup_id === nodegroup).length > 0) {\n        throw Error(`This nodegroup, ${nodegroupId}, already has a card`);\n      }\n      const cardId = this._generateUuidv5(`card-ng-${nodegroupId}`);\n      const card = new StaticCard({\n        active: options.active === undefined ? true : options.active,\n        cardid: cardId,\n        component_id: cardComponent.id,\n        config: config || null,\n        constraints: options.constraints || [],\n        cssclass: options.cssclass || null,\n        description: options.description || null,\n        graph_id: graph.graphid,\n        helpenabled: !!(options.helpenabled || (options.helpenabled === undefined && (helptext || helptitle))),\n        helptext: helptext || new StaticTranslatableString(''),\n        helptitle: helptitle || new StaticTranslatableString(''),\n        instructions: instructions || new StaticTranslatableString(''),\n        is_editable: options.is_editable === undefined ? true : options.is_editable,\n        name: cardName,\n        nodegroup_id: nodegroupId,\n        sortorder: options.sortorder || null,\n        visible: options.visible === undefined ? true : options.visible\n      });\n      graph.cards.push(card);\n      return graph;\n    });\n  }\n\n  addStringNode(parentAlias: string | null, alias: string, name: string, cardinality: 'n' | '1', ontologyClass: string, parentProperty: string, description?: string, options: {\n    exportable?: boolean,\n    fieldname?: string,\n    hascustomalias?: boolean;\n    is_collector?: boolean;\n    isrequired?: boolean;\n    issearchable?: boolean;\n    istopnode?: boolean;\n    sortorder?: number;\n  } = {}, config?: {[key: string]: any}) {\n    return this._addGenericNode(\n      parentAlias,\n      alias,\n      name,\n      cardinality,\n      \"string\",\n      ontologyClass,\n      parentProperty,\n      description,\n      options,\n      config\n    );\n  }\n\n  _addNodegroup(parentAlias: string | null, nodegroupId: string, cardinality: 'n' | '1', name?: StaticTranslatableString) {\n    this.mutations.push((graph: StaticGraph) => {\n      const prnt = parentAlias === null ? graph.root : graph.nodes.find(node => node.alias === parentAlias);\n      if (!prnt) {\n        throw Error(`Missing parent for nodegroup: ${parentAlias}`);\n      }\n      const nodegroup = new StaticNodegroup({\n        cardinality: cardinality,\n        legacygroupid: null,\n        nodegroupid: nodegroupId,\n        parentnodegroup_id: prnt.nodegroup_id\n      });\n      graph.nodegroups.push(nodegroup);\n      return graph;\n    });\n    if (this.autocreateCard) {\n      this.addCard(nodegroupId, name || '(unnamed)');\n    }\n    return this;\n  }\n\n  _addGenericNode(parentAlias: string | null, alias: string, name: string, cardinality: 'n' | '1', datatype: string, ontologyClass: string, parentProperty: string, description?: string, options: {\n    exportable?: boolean,\n    fieldname?: string,\n    hascustomalias?: boolean;\n    is_collector?: boolean;\n    isrequired?: boolean;\n    issearchable?: boolean;\n    istopnode?: boolean;\n    sortorder?: number;\n  } = {}, config?: {[key: string]: any}) {\n    const nodeId = this._generateUuidv5(`node-${alias}`);\n    const node = {\n      alias: alias,\n      config: config || null,\n      datatype: datatype,\n      description: description || null,\n      exportable: options.exportable || false,\n      fieldname: options.fieldname || null,\n      graph_id: this.baseGraph.graphid,\n      hascustomalias: options.hascustomalias || false,\n      is_collector: options.is_collector || false,\n      isrequired: options.isrequired || false,\n      issearchable: options.issearchable || true, // This is the default in Arches I believe\n      istopnode: options.istopnode || false,\n      name: name,\n      nodegroup_id: '',\n      nodeid: nodeId,\n      parentproperty: parentProperty,\n      sortorder: options.sortorder || 0,\n      ontologyclass: ontologyClass,\n      sourcebranchpublication_id: null,\n    };\n    if (cardinality === 'n' || parentAlias === null) {\n      node.nodegroup_id = nodeId;\n      this._addNodegroup(parentAlias, node.nodegroup_id, cardinality, new StaticTranslatableString(name));\n    }\n    this.mutations.push((graph: StaticGraph) => {\n      const prnt = parentAlias === null ? graph.root : graph.nodes.find(node => node.alias === parentAlias);\n      if (!prnt) {\n        throw Error(`Parent node does not exist: ${parentAlias}`);\n      }\n      // FIXME: we assume we are not adding a root node, but nowhere do we say this.\n      node.nodegroup_id = node.nodegroup_id !== '' ? node.nodegroup_id : prnt.nodegroup_id || '';\n      const newNode = new StaticNode(node);\n      graph.nodes.push(newNode);\n      const edge = this._generateEdge(prnt.nodeid, nodeId, parentProperty);\n      graph.edges.push(edge);\n      return graph;\n    });\n\n    if (this.autocreateCard && datatype !== 'semantic') {\n      const widget = getDefaultWidgetForNode(node);\n      const config = widget.getDefaultConfig();\n      config.label = name;\n      this.addWidgetToCard(\n        nodeId,\n        widget,\n        name,\n        config,\n        {\n          sortorder: node.sortorder,\n          silentSkip: true // if, for some reason, the card is not present (i.e. was removed), we should not worry\n        }\n      );\n    }\n    return this;\n  }\n\n  addWidgetToCard(\n    nodeId: string,\n    widget: Widget,\n    name: string,\n    config: {[key: string]: any},\n    options: {\n      sortorder?: number | null,\n      silentSkip?: boolean,\n      visible?: boolean\n    } = {}\n  ): GraphMutator {\n    this.mutations.push((graph: StaticGraph) => {\n      const node = graph.nodes.find(node => node.nodeid === nodeId);\n      if (!node) {\n        throw Error(`Tried to add card to graph ${graph.graphid} for node ${nodeId} but it was not found.`);\n      }\n      const card = graph.cards?.find(card => card.nodegroup_id === node.nodegroup_id);\n\n      if (card) {\n        const cardXNodeXWidgetId = this._generateUuidv5(`cxnxw-${nodeId}-${widget.id}`);\n\n        const cardXNodeXWidget = new StaticCardsXNodesXWidgets({\n          card_id: card.cardid,\n          config: config,\n          id: cardXNodeXWidgetId,\n          label: new StaticTranslatableString(name),\n          node_id: nodeId,\n          sortorder: options.sortorder || 0,\n          visible: options.visible === undefined || options.visible,\n          widget_id: widget.id\n        });\n        graph.cards_x_nodes_x_widgets = graph.cards_x_nodes_x_widgets || [];\n        graph.cards_x_nodes_x_widgets.push(cardXNodeXWidget);\n      } else if (!options.silentSkip) {\n        throw Error(`Failed adding widget for ${nodeId} to card for ${node.nodegroup_id} on graph ${graph.graphid}, as no card for this nodegroup (yet?)`);\n      }\n      return graph;\n    });\n    return this;\n  }\n\n  apply() {\n    if (!this.baseGraph.copy) {\n      throw Error(\"Attempt to build a mutator without a proper StaticGraph base graph\");\n    }\n    // TODO: complete deepcopies\n    const graph = this.baseGraph.copy();\n    return this.mutations.reduce((graph, mutation) => mutation(graph), graph);\n  }\n}\n\nclass ResourceModelWrapper<RIVM extends IRIVM<RIVM>> {\n  wkrm: WKRM;\n  graph: StaticGraph;\n  viewModelClass?: ResourceInstanceViewModelConstructor<RIVM>;\n  permittedNodegroups?: Map<string | null, boolean | CheckPermission>;\n\n  constructor(wkrm: WKRM, graph: StaticGraph, viewModelClass?: ResourceInstanceViewModelConstructor<RIVM>) {\n    this.wkrm = wkrm;\n    this.graph = graph;\n    this.viewModelClass = viewModelClass;\n  }\n\n  // TODO: Switch to getBranches\n  getBranchPublicationIds(accessible?: boolean): string[] {\n    const accessibleOnly = accessible || false;\n    const nodes = [...this.graph.nodes.values()];\n    return [...nodes.reduce(\n      (acc: Set<string>, node: StaticNode): Set<string> => {\n        if (node.sourcebranchpublication_id) {\n          if (accessibleOnly) {\n            if (this.isNodegroupPermitted(node.nodegroup_id || '', null)) {\n              acc.add(node.sourcebranchpublication_id);\n            }\n          } else {\n            acc.add(node.sourcebranchpublication_id);\n          }\n        }\n        return acc;\n      }, new Set()\n    )];\n  }\n\n  getCollections(accessible?: boolean): string[] {\n    const accessibleOnly = accessible || false;\n    const nodes = [...this.graph.nodes.values()];\n    return [...nodes.reduce(\n      (acc: Set<string>, node: StaticNode): Set<string> => {\n        if (['concept', 'concept-list'].includes(node.datatype) && node.config?.rdmCollection) {\n          if (accessibleOnly) {\n            if (this.isNodegroupPermitted(node.nodegroup_id || '', null)) {\n              acc.add(node.config.rdmCollection);\n            }\n          } else {\n            acc.add(node.config.rdmCollection);\n          }\n        }\n        return acc;\n      }, new Set()\n    )];\n  }\n\n  pruneGraph(keepFunctions?: string[]): undefined {\n    const allNodegroups = this.getNodegroupObjects();\n    const root = this.graph.root.nodeid;\n    // Strictly, this ultimately also contains nodes, but not all allowed nodes - the key point is that\n    // it has only and all nodegroups that we will keep.\n    const allowedNodegroups = new Map([...allNodegroups.values()].filter((nodegroup: StaticNodegroup) => {\n      return this.isNodegroupPermitted(nodegroup.nodegroupid || '', null);\n    }).map((nodegroup: StaticNodegroup) => [nodegroup.nodegroupid, nodegroup.nodegroupid === null || nodegroup.nodegroupid === '' || nodegroup.nodegroupid === root]));\n    const backedges: Map<string, string> = new Map();\n    for (const [d, rs] of this.getEdges()) {\n      for (const r of rs) {\n        if (backedges.has(r)) {\n          throw Error(`Graph is malformed, node ${r} has multiple parents, ${backedges.get(r)} and ${d} at least`);\n        }\n        backedges.set(r, d);\n      }\n    }\n\n    let loops = 0;\n    // This is not a fast approach, but it's simple enough. Optimize if needed.\n    allowedNodegroups.set(root, true);\n    while (loops < MAX_GRAPH_DEPTH) {\n      const unrooted = [...allowedNodegroups.entries()].filter(([_, rooted]: [string, boolean]) => !rooted);\n      if (unrooted.length === 0) {\n        break;\n      }\n      for (const [ng] of unrooted) {\n        if (ng === root) {\n          continue;\n        }\n        const next = backedges.get(ng);\n        if (!next) {\n          throw Error(`Graph does not have a parent for ${ng}`);\n        }\n        allowedNodegroups.set(ng, true);\n        if (!allowedNodegroups.has(next)) {\n          allowedNodegroups.set(next, false);\n        }\n      }\n      loops += 1;\n    }\n\n    if (loops >= MAX_GRAPH_DEPTH) {\n      throw Error(\"Hit edge traversal limit when pruning, is the graph well-formed without cycles?\")\n    }\n\n    const allowedNodes = new Set([...this.getNodeObjects().values()].filter((node: StaticNode) => {\n      return (node.nodegroup_id && allowedNodegroups.get(node.nodegroup_id)) || node.nodeid === root;\n    }).map((node: StaticNode) => node.nodeid));\n\n    this.graph.cards = (this.graph.cards || []).filter((card: StaticCard) => allowedNodegroups.get(card.nodegroup_id));\n    this.graph.cards_x_nodes_x_widgets = (this.graph.cards_x_nodes_x_widgets || []).filter((card: StaticCardsXNodesXWidgets) => allowedNodes.has(card.node_id));\n    this.graph.edges = (this.graph.edges || []).filter((edge: StaticEdge) => (edge.domainnode_id === root || allowedNodes.has(edge.domainnode_id)) && allowedNodes.has(edge.rangenode_id));\n    this.graph.nodegroups = (this.graph.nodegroups || []).filter((ng: StaticNodegroup) => allowedNodegroups.has(ng.nodegroupid));\n    this.graph.nodes = (this.graph.nodes || []).filter((node: StaticNode) => allowedNodes.has(node.nodeid));\n\n    // At this point, every originally-allowed nodegroup has an allowed parent, up to the root.\n    if (Array.isArray(keepFunctions) && this.graph.functions_x_graphs) {\n      this.graph.functions_x_graphs = this.graph.functions_x_graphs.filter((fxg: StaticFunctionsXGraphs) => keepFunctions.includes(fxg.function_id));\n    } else {\n      this.graph.functions_x_graphs = [];\n    }\n  }\n\n  exportGraph(): StaticGraph {\n    const graph = this.graph;\n    return new StaticGraph({\n      author: graph.author,\n      cards: graph.cards,\n      cards_x_nodes_x_widgets: graph.cards_x_nodes_x_widgets,\n      color: graph.color,\n      config: graph.config,\n      deploymentdate: graph.deploymentdate,\n      deploymentfile: graph.deploymentfile,\n      description: graph.description,\n      edges: graph.edges,\n      functions_x_graphs: graph.functions_x_graphs,\n      graphid: graph.graphid,\n      iconclass: graph.iconclass,\n      is_editable: graph.is_editable,\n      isresource: graph.isresource,\n      jsonldcontext: graph.jsonldcontext,\n      name: graph.name,\n      nodegroups: graph.nodegroups,\n      nodes: graph.nodes,\n      ontology_id: graph.ontology_id,\n      publication: graph.publication,\n      relatable_resource_model_ids: graph.relatable_resource_model_ids,\n      resource_2_resource_constraints: graph.resource_2_resource_constraints,\n      root: graph.root,\n      slug: graph.slug,\n      subtitle: graph.subtitle,\n      template_id: graph.template_id,\n      version: graph.version,\n    });\n  }\n\n  async all(params: { limit?: number; lazy?: boolean } | undefined = undefined): Promise<Array<RIVM>> {\n    const paramObj = params || { limit: undefined, lazy: undefined };\n    const promises = [];\n    for await (const resource of this.iterAll(paramObj)) {\n      promises.push(resource);\n    }\n    return Promise.all(promises);\n  }\n\n  stripTiles(resource: StaticResource) {\n    if (resource.tiles) {\n      const nodes = this.getNodeObjects();\n      resource.tiles = resource.tiles.filter(tile => {\n        const node = nodes.get(tile.nodegroup_id);\n        if (!node) {\n          throw Error(`Tile ${tile.tileid} has nodegroup ${tile.nodegroup_id} that is not on the model ${this.graph.graphid}`);\n        }\n        return this.isNodegroupPermitted(tile.nodegroup_id || '', tile);\n      });\n    }\n  }\n\n  async* resourceGenerator(staticResources: AsyncIterable<StaticResource, RIVM, unknown>, lazy: boolean=false, pruneTiles: boolean = true) {\n    for await (const staticResource of staticResources) {\n      yield this.fromStaticResource(staticResource, lazy, pruneTiles);\n    }\n  }\n\n  async* iterAll(params: { limit?: number; lazy?: boolean }): AsyncGenerator<RIVM> {\n    yield* this.resourceGenerator(staticStore.loadAll(this.wkrm.graphId, params.limit), params.lazy);\n  }\n\n  async findStatic(id: string): Promise<StaticResource> {\n    return await staticStore.loadOne(id);\n  }\n\n  async find(id: string, lazy: boolean = true, pruneTiles: boolean = true): Promise<RIVM> {\n    const rivm = await this.findStatic(id);\n    return this.fromStaticResource(rivm, lazy, pruneTiles);\n  }\n\n  setPermittedNodegroups(permissions: Map<string | null, boolean | CheckPermission>) {\n    const nodegroups = this.getNodegroupObjects();\n    const nodes = this.getNodeObjectsByAlias();\n    this.permittedNodegroups = new Map([...permissions].map(([key, value]): [key: string | null, value: boolean | CheckPermission] => {\n      const k = key || '';\n      if (nodegroups.has(k) || k === '') {\n        return [key, value];\n      } else {\n        const node = nodes.get(k);\n        if (node) {\n          // The nodeid is the nodegroup ID of the children, but may not be the nodegroup ID of\n          // the semantic node itself.\n          return [node.nodeid, value];\n        } else {\n          throw Error(`Could not find ${key} in nodegroups for permissions`);\n        }\n      }\n    }));\n  }\n\n  // Defaults to visible, which helps reduce the risk of false sense of security\n  // from front-end filtering masking the presence of data transferred to it.\n  getPermittedNodegroups(): Map<string | null, boolean | CheckPermission> {\n    if (!this.permittedNodegroups) {\n      const permissions = new Map([...this.getNodegroupObjects()].map(\n        ([k, _]: [k: string, _: StaticNodegroup]) => [k, true]\n      ));\n      permissions.set(\"\", true); // Have to have access to root node.\n      this.setPermittedNodegroups(permissions);\n    }\n    const permittedNodegroups = this.permittedNodegroups;\n    if (permittedNodegroups === undefined) {\n      throw Error(\"Could not set permitted nodegroups\");\n    }\n    // TODO allow reducing\n    return permittedNodegroups;\n  }\n\n  isNodegroupPermitted(nodegroupId: string, tile: StaticTile | null): boolean {\n    let permitted: boolean | CheckPermission | undefined = this.getPermittedNodegroups().get(nodegroupId);\n    if (permitted && typeof permitted == 'function') {\n      const nodes = this.getNodeObjectsByAlias();\n      permitted = permitted(nodegroupId, tile, nodes);\n    }\n    if (!permitted) {\n      return false;\n    }\n    if (permitted === true) {\n      return true;\n    }\n    throw Error(`Ambiguous permission state: ${permitted} for nodegroup ${nodegroupId}`);\n  }\n\n  makeInstance(id: string, resource: StaticResource | null, pruneTiles: boolean = true): RIVM {\n    if (!this.viewModelClass) {\n      throw Error(`Cannot instantiate without a viewModelClass in ${this.wkrm.modelClassName}`);\n    }\n    // TODO: This line needs fixed.\n    const instance: RIVM = new this.viewModelClass(\n      id,\n      this.viewModelClass.prototype.__,\n      (rivm: RIVM) =>\n        new ResourceInstanceWrapper(rivm, this, resource, pruneTiles),\n      null\n    );\n    return instance;\n  }\n\n  edges: Map<string, string[]> | undefined;\n  nodes: Map<string, StaticNode> | undefined;\n  nodegroups: Map<string, StaticNodegroup> | undefined;\n  nodesByAlias: Map<string, StaticNode> | undefined;\n\n  getChildNodes(nodeId: string): Map<string, StaticNode> {\n    const childNodes = new Map<string, StaticNode>();\n    const edges = this.getEdges().get(nodeId);\n    if (edges) {\n      for (const [, n] of this.getNodeObjects()) {\n        if (edges.includes(n.nodeid)) {\n          if (n.alias) {\n            childNodes.set(n.alias, n);\n          }\n        }\n      }\n    }\n    return childNodes;\n  }\n\n  buildNodes() {\n    if (this.nodes || this.nodegroups) {\n      throw Error(\"Cache should never try and rebuild nodes when non-empty\");\n    }\n\n    this.edges = new Map<string, string[]>();\n    this.nodes = new Map<string, StaticNode>();\n    this.nodegroups = new Map<string, StaticNodegroup>();\n\n    const graph = this.graph ?? graphManager.getGraph(this.wkrm.graphId);\n    if (!graph) {\n      throw Error(`Could not find graph ${this.wkrm.graphId} for resource`);\n    }\n    const nodes = new Map(graph.nodes.map((node) => [node.nodeid, node]));\n    const nodegroups = new Map(\n      graph.nodes\n        .filter((node) => node.nodegroup_id)\n        .map((node) => [\n          node.nodegroup_id || \"\",\n          new StaticNodegroup({\n            cardinality: \"n\",\n            legacygroupid: null,\n            nodegroupid: node.nodegroup_id || \"\",\n            parentnodegroup_id: null,\n          }),\n        ]),\n    );\n    for (const nodegroup of graph.nodegroups) {\n      nodegroups.set(nodegroup.nodegroupid, nodegroup);\n    }\n\n    const edgePairs = graph.edges.map((edge) => [\n      edge.domainnode_id,\n      edge.rangenode_id,\n    ]);\n    const edges: Map<string, string[]> = edgePairs.reduce((edges, dr) => {\n      const range = edges.get(dr[0]) || [];\n      range.push(dr[1]);\n      edges.set(dr[0], range);\n      return edges;\n    }, new Map<string, string[]>());\n\n    this.nodes = nodes;\n    this.nodegroups = nodegroups;\n    this.edges = edges;\n    this.nodesByAlias = new Map(\n      [...nodes.values()].map((node) => [node.alias || \"\", node]),\n    );\n  }\n\n  getNodeObjectsByAlias(): Map<string, StaticNode> {\n    if (!this.nodesByAlias) {\n      this.buildNodes();\n    }\n    if (!this.nodesByAlias) {\n      throw Error(\"Could not build nodes\");\n    }\n    return this.nodesByAlias;\n  }\n\n  getEdges(): Map<string, string[]> {\n    if (!this.edges) {\n      this.buildNodes();\n    }\n    if (!this.edges) {\n      throw Error(\"Could not build edges\");\n    }\n    return this.edges;\n  }\n\n  getNodeObjects(): Map<string, StaticNode> {\n    if (!this.nodes) {\n      this.buildNodes();\n    }\n    if (!this.nodes) {\n      throw Error(\"Could not build nodes\");\n    }\n    return this.nodes;\n  }\n\n  getNodegroupObjects(): Map<string, StaticNodegroup> {\n    if (!this.nodegroups) {\n      this.buildNodes();\n    }\n    if (!this.nodegroups) {\n      throw Error(\"Could not build nodegroups\");\n    }\n    return this.nodegroups;\n  }\n\n  getRootNode(): StaticNode {\n    const nodes = this.getNodeObjects();\n    const rootNode = [...nodes.values()].find((n) => !n.nodegroup_id);\n    if (!rootNode) {\n      throw Error(\n        `COULD NOT FIND ROOT NODE FOR ${this.wkrm.modelClassName}. Does the graph ${this.graph.graphid} still exist?`,\n      );\n    }\n    rootNode.alias = rootNode.alias || '';\n    return rootNode;\n  }\n\n  fromStaticResource(\n    resource: StaticResource,\n    lazy: boolean = false,\n    pruneTiles: boolean = true\n  ): Promise<RIVM> {\n    // TODO: implement lazy\n    const wkri: RIVM = this.makeInstance(\n      resource.resourceinstance.resourceinstanceid,\n      resource,\n      pruneTiles\n    );\n\n    if (!wkri.$) {\n      throw Error(\"Could not load resource from static definition\");\n    }\n\n    return wkri.$.populate(lazy).then(() => wkri);\n  }\n}\n\nfunction makeResourceModelWrapper<T extends IRIVM<T>>(\n  viewModelClass: ResourceInstanceViewModelConstructor<T> | undefined,\n  wkrm: WKRM,\n  graph: StaticGraph,\n): ResourceInstanceViewModelConstructor<T> {\n  let vmc: ResourceInstanceViewModelConstructor<T>;\n  if (!viewModelClass) {\n    // @ts-expect-error It may be possible to correct this, but TS does not know that\n    // the dynamically-defined class meets the IRIVM interface.\n    const viewModelClassObj: {[name: string]: ResourceInstanceViewModelConstructor<T>} = {\n      [wkrm.modelClassName]: class extends ResourceInstanceViewModel<T> {\n        static _: ResourceInstanceWrapper<T> | null;\n        static __: ResourceModelWrapper<T> | null;\n      },\n    };\n    vmc = viewModelClassObj[wkrm.modelClassName];\n  } else {\n    vmc = viewModelClass;\n  }\n\n  const wrapper = new ResourceModelWrapper<T>(wkrm, graph, vmc);\n  vmc.prototype.__ = wrapper;\n  return vmc;\n}\n\nclass GraphManager {\n  _initialized: boolean = false;\n  archesClient: ArchesClient;\n  graphs: Map<string, ResourceModelWrapper<any>>;\n  wkrms: Map<string, WKRM>;\n\n  constructor(archesClient: ArchesClient) {\n    this.archesClient = archesClient;\n    this.graphs = new Map<string, ResourceModelWrapper<any>>();\n    this.wkrms = new Map<string, WKRM>();\n  }\n\n  async initialize(configurationOptions: ConfigurationOptions | undefined = undefined) {\n    if (this._initialized) {\n      return;\n    }\n    if (configurationOptions === undefined) {\n      configurationOptions = new ConfigurationOptions();\n    }\n    const graphJsons: GraphResult = await this.archesClient.getGraphs();\n\n    let graphs: Array<[string, StaticGraphMeta]> = Object.entries(graphJsons[\"models\"]);\n    const allowedGraphs = configurationOptions.graphs;\n    if (allowedGraphs !== null) {\n      if (allowedGraphs === false) {\n        throw Error(\"No current meaning of allowedGraphs === false\");\n      } else if (allowedGraphs !== true) {\n        graphs = graphs.filter(\n          ([graphId, _]: [string, StaticGraphMeta]) => allowedGraphs.includes(graphId),\n        );\n      }\n    }\n    graphs.forEach(([graphId, meta]: [string, StaticGraphMeta]) => {\n      meta.graphid = meta.graphid || graphId;\n      const wkrm = new WKRM(meta);\n      this.wkrms.set(wkrm.modelClassName, wkrm);\n    });\n    if (configurationOptions.eagerLoadGraphs) {\n      await Promise.all(graphs.map(([g]) => this.loadGraph(g)));\n    }\n\n    this._initialized = true;\n  }\n\n  async loadGraph<RIVM extends IRIVM<RIVM>>(modelClass: ResourceInstanceViewModelConstructor<RIVM> | string): Promise<ResourceModelWrapper<RIVM>> {\n    let modelClassName: string;\n    if (typeof modelClass == 'string') {\n      modelClassName = modelClass;\n    } else {\n      modelClassName = modelClass.name;\n    }\n\n    let wkrm = this.wkrms.get(modelClassName);\n    if (wkrm === undefined) {\n      wkrm = [...this.wkrms.values()].find(wkrm => wkrm.graphId === modelClassName);\n      if (wkrm === undefined) {\n        throw Error(`Only loading graphs for which metadata is present, not ${modelClassName}`);\n      }\n      modelClass = wkrm.modelClassName;\n    }\n\n    const wrapper = this.graphs.get(wkrm.graphId);\n    if (wrapper !== undefined) {\n      return wrapper;\n    }\n\n    const bodyJson = await this.archesClient.getGraph(wkrm.meta);\n    if (!bodyJson) {\n      throw Error(`Could not load graph ${wkrm.graphId}`);\n    }\n\n    const graph = new StaticGraph(bodyJson);\n\n    let model: ResourceInstanceViewModelConstructor<RIVM>;\n    if (typeof modelClass == 'string') {\n      modelClassName = modelClass;\n      model = makeResourceModelWrapper<RIVM>(undefined, wkrm, graph);\n    } else {\n      modelClassName = modelClass.name;\n      model = makeResourceModelWrapper<RIVM>(modelClass, wkrm, graph);\n    }\n\n    this.graphs.set(graph.graphid, model.prototype.__);\n    return model.prototype.__;\n  }\n\n  async get<RIVM extends IRIVM<RIVM>>(modelClass: ResourceInstanceViewModelConstructor<RIVM> | string): Promise<ResourceModelWrapper<RIVM>> {\n    let modelClassName: string;\n    if (typeof modelClass == 'string') {\n      modelClassName = modelClass;\n    } else {\n      modelClassName = modelClass.name;\n    }\n\n    // Initialize as a fallback\n    this.initialize(undefined);\n    let wkrm = this.wkrms.get(modelClassName);\n    if (wkrm === undefined) {\n      wkrm = [...this.wkrms.values()].find(w => w.graphId === modelClassName);\n      if (wkrm === undefined) {\n        throw Error(`Cannot find model requested: ${modelClassName}`);\n      }\n    }\n\n    const wrapper = this.graphs.get(wkrm.graphId);\n    if (wrapper === undefined) {\n      return this.loadGraph(modelClass);\n    }\n    return wrapper;\n  }\n\n  async getResource<T extends IRIVM<T>>(resourceId: string, lazy: boolean = true, pruneTiles: boolean = true): Promise<T> {\n    const rivm = await staticStore.loadOne(resourceId);\n    let graph = this.graphs.get(rivm.resourceinstance.graph_id);\n    if (!graph) {\n      graph = await this.loadGraph(rivm.resourceinstance.graph_id);\n      if (!graph) {\n        throw Error(`Graph not found for resource ${resourceId}`);\n      }\n    }\n    return graph.fromStaticResource(rivm, lazy, pruneTiles);\n  }\n\n  getGraph(graphId: string): StaticGraph {\n    const wrapper = this.graphs.get(graphId);\n    if (wrapper === undefined) {\n      throw Error(`Cannot find graph requested: ${graphId}`);\n    }\n    return wrapper.graph;\n  }\n}\n\nconst graphManager = new GraphManager(archesClient);\nviewContext.graphManager = graphManager;\n\nexport { GraphManager, graphManager, ArchesClientRemote, staticStore, WKRM, ResourceModelWrapper, GraphMutator };\n","import { staticStore } from \"./staticStore.ts\"\nimport { PseudoList } from \"./pseudos.ts\"\nimport { UrlViewModel, DateViewModel, ResourceInstanceViewModel, DomainValueViewModel, ConceptValueViewModel, NonLocalizedStringViewModel, StringViewModel, SemanticViewModel, GeoJSONViewModel, BooleanViewModel, NumberViewModel } from './viewModels';\n\nclass Cleanable extends String {\n  __clean: string | undefined\n}\n\nabstract class BaseRenderer {\n  async render(asset: ResourceInstanceViewModel<any>) {\n    if (!asset.$) {\n      throw Error(\"Cannot render unloaded asset - do you want to await asset.retrieve()?\");\n    }\n    const root = await (await asset.$.getRootViewModel());\n    return this.renderValue(root, 0);\n  }\n\n  abstract renderDomainValue(value: DomainValueViewModel, _depth: number): Promise<any>;\n  abstract renderDate(value: DateViewModel, _depth: number): Promise<any>;\n  abstract renderConceptValue(value: ConceptValueViewModel, _depth: number): Promise<any>;\n  abstract renderResourceReference(value: ResourceInstanceViewModel<any>, _depth: number): Promise<any>;\n  abstract renderSemantic(value: SemanticViewModel, depth: number): Promise<any>;\n  abstract renderBlock(block: {[key: string]: string} | {[key: string]: string}[], depth: number): any;\n  abstract renderArray(value: any[], depth: number): Promise<any>;\n  abstract renderString(value: string | StringViewModel | NonLocalizedStringViewModel, _depth: number): Promise<any>;\n  abstract renderBoolean(value: boolean | BooleanViewModel, _depth: number): Promise<any>;\n  abstract renderNumber(value: number | NumberViewModel, _depth: number): Promise<any>;\n  abstract renderUrl(value: UrlViewModel, _depth: number): Promise<any>;\n\n  async renderValue(value: any, depth: number): Promise<any> {\n    let newValue;\n    if (value instanceof Promise) {\n      value = await value;\n    }\n    if (value instanceof DomainValueViewModel) {\n      newValue = this.renderDomainValue(value, depth);\n    } else if (value instanceof DateViewModel) {\n      newValue = this.renderDate(value, depth);\n    } else if (value instanceof ConceptValueViewModel) {\n      newValue = this.renderConceptValue(value, depth);\n    } else if (value instanceof ResourceInstanceViewModel) {\n      newValue = this.renderResourceReference(value, depth);\n    } else if (value instanceof SemanticViewModel) {\n      newValue = this.renderSemantic(value, depth);\n    } else if (value instanceof Array) {\n      newValue = this.renderArray(value, depth);\n    } else if (value instanceof StringViewModel || value instanceof NonLocalizedStringViewModel || typeof value === 'string') {\n      newValue = this.renderString(value, depth);\n    } else if (value instanceof BooleanViewModel) {\n      newValue = this.renderBoolean(value, depth);\n    } else if (value instanceof NumberViewModel) {\n      newValue = this.renderNumber(value, depth);\n    } else if (value instanceof GeoJSONViewModel) {\n      newValue = this.renderBlock(await value.forJson(), depth);\n    } else if (value instanceof UrlViewModel) {\n      newValue = this.renderUrl(await value, depth);\n    } else if (value instanceof Object) {\n      newValue = this.renderBlock(value, depth);\n    } else {\n      newValue = value;\n    }\n    return newValue;\n  }\n}\n\nclass Renderer extends BaseRenderer {\n  async renderDomainValue(value: DomainValueViewModel, _depth: number): Promise<any> {\n    return value;\n  }\n\n  async renderString(value: string | StringViewModel | NonLocalizedStringViewModel, _depth: number): Promise<any> {\n    return `${value}`;\n  }\n\n  async renderNumber(value: number | NumberViewModel, _depth: number): Promise<any> {\n    return `${value}`;\n  }\n\n  async renderBoolean(value: boolean | BooleanViewModel, _depth: number): Promise<any> {\n    return value.toString();\n  }\n\n  async renderDate(value: DateViewModel, _depth: number): Promise<any> {\n    return value;\n  }\n\n  async renderConceptValue(value: ConceptValueViewModel, _depth: number): Promise<any> {\n    return value;\n  }\n\n  async renderResourceReference(value: ResourceInstanceViewModel<any>, _depth: number): Promise<any> {\n    return value;\n  }\n\n  async renderSemantic(value: SemanticViewModel, depth: number): Promise<any> {\n    return this.renderBlock(await value.toObject(), depth);\n  }\n\n  async renderUrl(value: UrlViewModel, _depth: number): Promise<any> {\n    return value;\n  }\n\n  renderBlock(block: {[key: string]: string} | {[key: string]: string}[], depth: number): any {\n    const renderedBlock: {[key: string]: any} = {};\n    const promises: Promise<void>[] = [];\n    for (const [key, value] of Object.entries(block)) {\n      promises.push(\n        this.renderValue(value, depth + 1).then((val: any) => { renderedBlock[key] = val; })\n      );\n    }\n    return Promise.all(promises).then(() => renderedBlock);\n  }\n\n  async renderArray(value: any, depth: number): Promise<any> {\n      return Promise.all(value.map((val: any) => this.renderValue(val, depth + 1)));\n  }\n\n}\n\nclass MarkdownRenderer extends Renderer {\n  conceptValueToUrl: ((value: ConceptValueViewModel) => string) | undefined\n  dateToText: ((value: DateViewModel) => string) | undefined\n  domainValueToUrl: ((value: DomainValueViewModel) => string) | undefined\n  resourceReferenceToUrl: ((value: ResourceInstanceViewModel<any>) => string) | undefined\n  nodeToUrl: ((value: string) => string) | undefined\n\n  constructor(callbacks: {\n    conceptValueToUrl: ((value: ConceptValueViewModel) => string) | undefined,\n    dateToText: ((value: DateViewModel) => string) | undefined,\n    domainValueToUrl: ((value: DomainValueViewModel) => string) | undefined,\n    resourceReferenceToUrl: ((value: ResourceInstanceViewModel<any>) => string) | undefined,\n    nodeToUrl: ((value: string) => string) | undefined,\n  }) {\n    super();\n    this.conceptValueToUrl = callbacks.conceptValueToUrl;\n    this.dateToText = callbacks.dateToText;\n    this.domainValueToUrl = callbacks.domainValueToUrl;\n    this.resourceReferenceToUrl = callbacks.resourceReferenceToUrl;\n    this.nodeToUrl = callbacks.nodeToUrl;\n  }\n\n  async renderUrl(value: UrlViewModel, _depth: number): Promise<any> {\n    const text = `[${value}](${value})`;\n    const wrapper = new Cleanable(text);\n    wrapper.__clean = value.href();\n    return wrapper;\n  }\n\n  override async renderDomainValue(domainValue: DomainValueViewModel, _: number): Promise<any> {\n    const value = await domainValue.getValue();\n    const url = this.domainValueToUrl ? await this.domainValueToUrl(domainValue): null;\n    const text = url ? `[${value.toString()}](${url.trim()})` : value.toString();\n    const wrapper = new Cleanable(`\n    <span\n      class='alizarin-domain-value' data-id='${value.id}'\n    >\n      ${text}\n    </span>`.replace(/\\n/g, ' ').trim());\n    wrapper.__clean = domainValue.toString();\n    return wrapper;\n  }\n\n  override async renderDate(date: DateViewModel, _: number): Promise<any> {\n    const value = await date;\n    const text = this.dateToText ? await this.dateToText(value): value.toISOString();\n    const wrapper = new Cleanable(`\n    <time datetime='${text}'>\n      ${text}\n    </time>`.replace(/\\n/g, ' ').trim());\n    wrapper.__clean = text;\n    return wrapper;\n  }\n\n  override async renderConceptValue(conceptValue: ConceptValueViewModel, _: number): Promise<any> {\n    const value = await conceptValue.getValue();\n    const url = this.conceptValueToUrl ? await this.conceptValueToUrl(conceptValue): null;\n    const text = url ? `[${value.value}](${url.trim()})` : value.value;\n    const wrapper = new Cleanable(`\n    <span\n      class='alizarin-concept-value' data-id='${value.id}'\n      data-concept-id='${value.__concept ? value.__concept.id : \"\"}'\n      data-concept-ref='$${value.__concept ? value.__concept.source : \"\"}'\n    >\n      ${text}\n    </span>`.replace(/\\n/g, ' ').trim());\n    wrapper.__clean = conceptValue.toString();\n    return wrapper;\n  }\n\n  override async renderResourceReference(rivm: ResourceInstanceViewModel<any>, _: number): Promise<any> {\n    const value = await rivm.forJson(false);\n    const url = this.resourceReferenceToUrl ? await this.resourceReferenceToUrl(rivm): null;\n    let title = value.title || value.type || 'Resource';\n    const text = url ? `[${title}](${url.trim()})` : title;\n    const resourceMetadata = await staticStore.getMeta(value.id);\n    if (resourceMetadata) {\n      title = resourceMetadata.name;\n    }\n    const wrapper = new Cleanable(`\n    <span\n      class='alizarin-resource-instance alizarin-related-resource' data-id='${value.id}'\n      data-graph-id='${value.graphId}'\n    >\n      ${text}\n    </span>`.replace(/\\n/g, ' ').trim());\n    wrapper.__clean = rivm.toString();\n    return wrapper;\n  }\n}\n\nclass FlatMarkdownRenderer extends MarkdownRenderer {\n  override async renderSemantic(vm: SemanticViewModel, depth: number): Promise<any> {\n    const children = [...(await vm.__getChildValues()).entries()].map(([_, v]) => [v.node.alias, v.node]);\n    const nodes = Object.fromEntries(await Promise.all(children));\n    return super.renderSemantic(vm, depth).then(async block => {\n      const text = [\n        `* <span class='node-type'>${vm.__node.name}</span> &rarr;`,\n        ...Object.entries(await block).map(([key, value]) => {\n          const node = nodes[key];\n          let nodeName = node.name;\n          if (this.nodeToUrl) {\n            nodeName = `[${node.name}](${this.nodeToUrl(node)})`;\n          }\n          if ((typeof value == 'string' || value instanceof String) && value.indexOf('\\n') != -1) {\n            return `  * <span class='node-name'>${nodeName}</span> <span class='node-alias'>[*${node.alias}*]</span>:<span class='node-value'>\\n${value.split('\\n').map(x => `    ${x}`).join('\\n')}\\n    </span>`;\n          } else {\n            return `  * <span class='node-name'>${nodeName}</span> <span class='node-alias'>[*${node.alias}*]</span>: <span class='node-value'>${value}</span>`;\n          }\n        }).join('\\n').split('\\n')\n      ];\n      if (text[1] == '') {\n        text[0] += `<span class='node-empty'>&lt;empty&gt;</span>`;\n        text.pop();\n      }\n      return text.map(line => `  ${line}`).join('\\n');\n    });\n  }\n\n  override async renderArray(value: any, depth: number): Promise<any> {\n      const rows = await super.renderArray(value, depth);\n      if (value instanceof PseudoList || value.indexOf('\\n') != -1) {\n        return rows.map((x: any) => `${x}`).join('\\n');\n      } else {\n        return rows.join(\", \");\n      }\n  }\n\n  async renderString(value: string | StringViewModel | NonLocalizedStringViewModel, _depth: number): Promise<any> {\n    if (value.indexOf('\\n') != -1) {\n      value = '\\n    ' + value.split('\\n').join('\\n    ');\n    }\n    return value;\n  }\n}\n\nclass JsonRenderer extends Renderer {\n  async renderDate(value: DateViewModel, _depth: number): Promise<any> {\n    return value.forJson();\n  }\n\n  async renderBoolean(value: boolean | BooleanViewModel, _depth: number): Promise<any> {\n    return typeof value === \"boolean\" ? value : value.forJson();\n  }\n\n  async renderConceptValue(value: ConceptValueViewModel, _depth: number): Promise<any> {\n    return value.forJson();\n  }\n\n  async renderDomainValue(value: DomainValueViewModel, _depth: number): Promise<any> {\n    return value.forJson();\n  }\n\n  async renderResourceReference(value: ResourceInstanceViewModel<any>, _depth: number): Promise<any> {\n    // TODO: decide if this makes sense: await value.retrieve();\n    const val = value.forJson();\n    return val;\n  }\n}\n\nexport { MarkdownRenderer, JsonRenderer, Cleanable, FlatMarkdownRenderer };\n","import * as client from \"./client\";\nimport * as interfaces from \"./interfaces\";\nimport { RDM } from \"./rdm\";\nimport { ResourceModelWrapper, WKRM, graphManager, staticStore, GraphManager, GraphMutator } from \"./graphManager\";\nimport * as staticTypes from \"./static-types\";\nimport * as utils from \"./utils\";\nimport * as viewModels from \"./viewModels\";\nimport * as renderers from \"./renderers\";\nimport * as nodeConfig from \"./nodeConfig\";\n\nconst AlizarinModel = viewModels.ResourceInstanceViewModel;\nconst setCurrentLanguage = utils.setCurrentLanguage;\nconst getCurrentLanguage = utils.getCurrentLanguage;\nexport {\n  AlizarinModel,\n  client,\n  graphManager,\n  GraphManager,\n  staticTypes,\n  utils,\n  viewModels,\n  staticStore,\n  RDM,\n  renderers,\n  interfaces,\n  WKRM,\n  nodeConfig,\n  ResourceModelWrapper,\n  GraphMutator,\n  setCurrentLanguage,\n  getCurrentLanguage,\n};\n"],"names":["_a","DEFAULT_LANGUAGE","uuidv5","getCurrentLanguage","setCurrentLanguage","_b","_c","_d","_e","uuidv4","response","archesClient","resource","nodeConfig","node","promise","value","val","ids","collection","str","tile","vm","nodegroupId","newImpliedNodegroups","card","config","graph","edges","wkrm","viewModels.ResourceInstanceViewModel","utils.setCurrentLanguage","utils.getCurrentLanguage"],"mappings":";;;AAAA;AAAA,MAAA,QAAe;ACCf,SAAS,SAAS,MAAM;AACpB,SAAO,OAAO,SAAS,YAAY,MAAM,KAAK,IAAI;AACtD;ACFA,SAAS,MAAM,MAAM;AACjB,MAAI,CAAC,SAAS,IAAI,GAAG;AACjB,UAAM,UAAU,cAAc;AAAA,EACtC;AACI,MAAI;AACJ,SAAO,WAAW,IAAI,IAAI,SAAS,KAAK,MAAM,GAAG,CAAC,GAAG,EAAE,OAAO,IAAK,MAAM,KAAM,KAAO,MAAM,IAAK,KAAM,IAAI,MAAO,IAAI,SAAS,KAAK,MAAM,GAAG,EAAE,GAAG,EAAE,OAAO,GAAG,IAAI,MAAO,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE,OAAO,GAAG,IAAI,MAAO,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE,OAAO,GAAG,IAAI,MAAQ,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,EAAE,KAAK,gBAAiB,KAAO,IAAI,aAAe,KAAO,MAAM,KAAM,KAAO,MAAM,KAAM,KAAO,MAAM,IAAK,KAAM,IAAI,GAAI;AACvb;ACNA,MAAM,YAAY,CAAE;AACpB,SAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC1B,YAAU,MAAM,IAAI,KAAO,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;AACpD;AACO,SAAS,gBAAgB,KAAK,SAAS,GAAG;AAC7C,UAAQ,UAAU,IAAI,SAAS,CAAC,CAAC,IAC7B,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,GAAG,YAAa;AAClD;AC1BA,IAAI;AACJ,MAAM,QAAQ,IAAI,WAAW,EAAE;AAChB,SAAS,MAAM;AAC1B,MAAI,CAAC,iBAAiB;AAClB,QAAI,OAAO,WAAW,eAAe,CAAC,OAAO,iBAAiB;AAC1D,YAAM,IAAI,MAAM,0GAA0G;AAAA,IACtI;AACQ,sBAAkB,OAAO,gBAAgB,KAAK,MAAM;AAAA,EAC5D;AACI,SAAO,gBAAgB,KAAK;AAChC;ACRO,SAAS,cAAc,KAAK;AAC/B,QAAM,SAAS,mBAAmB,GAAG,CAAC;AACtC,QAAM,QAAQ,IAAI,WAAW,IAAI,MAAM;AACvC,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACjC,UAAM,CAAC,IAAI,IAAI,WAAW,CAAC;AAAA,EACnC;AACI,SAAO;AACX;AACO,MAAM,MAAM;AACZ,MAAM,MAAM;AACJ,SAAS,IAAI,SAAS,MAAM,OAAO,WAAW,KAAK,QAAQ;AACtE,QAAM,aAAa,OAAO,UAAU,WAAW,cAAc,KAAK,IAAI;AACtE,QAAM,iBAAiB,OAAO,cAAc,WAAW,MAAM,SAAS,IAAI;AAC1E,MAAI,OAAO,cAAc,UAAU;AAC/B,gBAAY,MAAM,SAAS;AAAA,EACnC;AACI,OAAI,uCAAW,YAAW,IAAI;AAC1B,UAAM,UAAU,kEAAkE;AAAA,EAC1F;AACI,MAAI,QAAQ,IAAI,WAAW,KAAK,WAAW,MAAM;AACjD,QAAM,IAAI,cAAc;AACxB,QAAM,IAAI,YAAY,eAAe,MAAM;AAC3C,UAAQ,KAAK,KAAK;AAClB,QAAM,CAAC,IAAK,MAAM,CAAC,IAAI,KAAQ;AAC/B,QAAM,CAAC,IAAK,MAAM,CAAC,IAAI,KAAQ;AAQ/B,SAAO,gBAAgB,KAAK;AAChC;ACnCA,MAAM,aAAa,OAAO,WAAW,eAAe,OAAO,cAAc,OAAO,WAAW,KAAK,MAAM;AACtG,MAAe,SAAA,EAAE,WAAY;ACE7B,SAAS,GAAG,SAAS,KAAK,QAAQ;APHlC,MAAAA;AOII,MAAI,OAAO,cAAc,QAAQ,CAAC,SAAS;AACvC,WAAO,OAAO,WAAY;AAAA,EAClC;AACI,YAAU,WAAW,CAAE;AACvB,QAAM,OAAO,QAAQ,YAAUA,MAAA,QAAQ,QAAR,gBAAAA,IAAA,kBAAmB,IAAK;AACvD,MAAI,KAAK,SAAS,IAAI;AAClB,UAAM,IAAI,MAAM,mCAAmC;AAAA,EAC3D;AACI,OAAK,CAAC,IAAK,KAAK,CAAC,IAAI,KAAQ;AAC7B,OAAK,CAAC,IAAK,KAAK,CAAC,IAAI,KAAQ;AAW7B,SAAO,gBAAgB,IAAI;AAC/B;ACzBA,SAAS,EAAE,GAAG,GAAG,GAAG,GAAG;AACnB,UAAQ,GAAC;AAAA,IACL,KAAK;AACD,aAAQ,IAAI,IAAM,CAAC,IAAI;AAAA,IAC3B,KAAK;AACD,aAAO,IAAI,IAAI;AAAA,IACnB,KAAK;AACD,aAAQ,IAAI,IAAM,IAAI,IAAM,IAAI;AAAA,IACpC,KAAK;AACD,aAAO,IAAI,IAAI;AAAA,EAC3B;AACA;AACA,SAAS,KAAK,GAAG,GAAG;AAChB,SAAQ,KAAK,IAAM,MAAO,KAAK;AACnC;AACA,SAAS,KAAK,OAAO;AACjB,QAAM,IAAI,CAAC,YAAY,YAAY,YAAY,UAAU;AACzD,QAAM,IAAI,CAAC,YAAY,YAAY,YAAY,WAAY,UAAU;AACrE,QAAM,WAAW,IAAI,WAAW,MAAM,SAAS,CAAC;AAChD,WAAS,IAAI,KAAK;AAClB,WAAS,MAAM,MAAM,IAAI;AACzB,UAAQ;AACR,QAAM,IAAI,MAAM,SAAS,IAAI;AAC7B,QAAM,IAAI,KAAK,KAAK,IAAI,EAAE;AAC1B,QAAM,IAAI,IAAI,MAAM,CAAC;AACrB,WAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACxB,UAAM,MAAM,IAAI,YAAY,EAAE;AAC9B,aAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AACzB,UAAI,CAAC,IACA,MAAM,IAAI,KAAK,IAAI,CAAC,KAAK,KACrB,MAAM,IAAI,KAAK,IAAI,IAAI,CAAC,KAAK,KAC7B,MAAM,IAAI,KAAK,IAAI,IAAI,CAAC,KAAK,IAC9B,MAAM,IAAI,KAAK,IAAI,IAAI,CAAC;AAAA,IAC5C;AACQ,MAAE,CAAC,IAAI;AAAA,EACf;AACI,IAAE,IAAI,CAAC,EAAE,EAAE,KAAM,MAAM,SAAS,KAAK,IAAK,KAAK,IAAI,GAAG,EAAE;AACxD,IAAE,IAAI,CAAC,EAAE,EAAE,IAAI,KAAK,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC;AACtC,IAAE,IAAI,CAAC,EAAE,EAAE,KAAM,MAAM,SAAS,KAAK,IAAK;AAC1C,WAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACxB,UAAM,IAAI,IAAI,YAAY,EAAE;AAC5B,aAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AACzB,QAAE,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC;AAAA,IACzB;AACQ,aAAS,IAAI,IAAI,IAAI,IAAI,EAAE,GAAG;AAC1B,QAAE,CAAC,IAAI,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC;AAAA,IACtE;AACQ,QAAI,IAAI,EAAE,CAAC;AACX,QAAI,IAAI,EAAE,CAAC;AACX,QAAI,IAAI,EAAE,CAAC;AACX,QAAI,IAAI,EAAE,CAAC;AACX,QAAI,IAAI,EAAE,CAAC;AACX,aAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AACzB,YAAM,IAAI,KAAK,MAAM,IAAI,EAAE;AAC3B,YAAM,IAAK,KAAK,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,MAAO;AAC7D,UAAI;AACJ,UAAI;AACJ,UAAI,KAAK,GAAG,EAAE,MAAM;AACpB,UAAI;AACJ,UAAI;AAAA,IAChB;AACQ,MAAE,CAAC,IAAK,EAAE,CAAC,IAAI,MAAO;AACtB,MAAE,CAAC,IAAK,EAAE,CAAC,IAAI,MAAO;AACtB,MAAE,CAAC,IAAK,EAAE,CAAC,IAAI,MAAO;AACtB,MAAE,CAAC,IAAK,EAAE,CAAC,IAAI,MAAO;AACtB,MAAE,CAAC,IAAK,EAAE,CAAC,IAAI,MAAO;AAAA,EAC9B;AACI,SAAO,WAAW,GAAG,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;AACpO;ACjEA,SAAS,GAAG,OAAO,WAAW,KAAK,QAAQ;AACvC,SAAO,IAAI,IAAM,MAAM,OAAO,SAAsB;AACxD;AACA,GAAG,MAAM;AACT,GAAG,MAAM;ACHT,MAAMC,qBAAmB;AACzB,MAAM,cAAc;AACpB,MAAM,iBAAiB;AACvB,MAAM,6BAA6BC,GAAO,eAAe,sCAAsC;AAE/F,IAAI;AAEJ,SAAS,QAAQ,UAAuB;AAC7B,SAAA,GAAG,QAAQ,GAAG,WAAW,kBAAkB,EAAE,EAAE,MAAM,GAAG,WAAW;AAC9E;AAEA,SAASC,uBAA6B;AAC7B,SAAA,oBAAqB,OAAO,aAAa,eAAe,UAAU,YAAaF,oBAAkB,MAAM,GAAG,CAAC;AACpH;AAEA,SAASG,qBAAmB,MAAc;AACtB,oBAAA;AACpB;AAEA,MAAM,qBAAuB,cAE1B,YAAO,aAFmB,IAAyC;AAAA,EAGpE,YACE,UAIA;AACA,UAAM,QAAQ;AAPhB,wBAAC;AAQO,UAAA,QAAQ,IAAI,MAAM,MAAM;AAAA,MAC5B,KAAK,CAAC,QAAwB,QAAQ,UAAU;AACvC,eAAA,KAAK,CAAC,QAAa;AACxB,cAAI,MAAM,IAAI;AACP,iBAAA;AAAA,QAAA,CACR;AACM,eAAA;AAAA,MACT;AAAA,MACA,KAAK,CAAC,QAAwB,WAA4B;AACxD,YAAI,UAAU,QAAQ;AACd,gBAAA,QAAa,OAAO,MAAM;AAC5B,cAAA,OAAO,UAAU,YAAY;AACxB,mBAAA,MAAM,KAAK,MAAM;AAAA,UAAA;AAEnB,iBAAA;AAAA,QAAA;AAEH,cAAA,MAAM,OAAO,SAAS;AAC5B,YAAI,OAAO,QAAQ;AACX,gBAAA,QAAa,OAAO,GAAG;AACzB,cAAA,OAAO,UAAU,YAAY;AACxB,mBAAA,MAAM,KAAK,MAAM;AAAA,UAAA;AAEnB,iBAAA;AAAA,QAAA;AAET,YAAI,kBAAkB,SAAS;AACtB,iBAAA,OAAO,KAAK,CAAC,QAAa;AACxB,mBAAA,MAAM,IAAI,MAAM,IAAI;AAAA,UAAA,CAC5B;AAAA,QAAA;AAEH,eAAO,OAAO,MAAM;AAAA,MAAA;AAAA,IACtB,CACD;AACM,WAAA;AAAA,EAAA;AAEX;AAEA,MAAM,yBAAyB;AAC/B,SAAS,eAAe,OAAoC,KAAwB;AAC9E,MAAA,MAAM,QAAQ,GAAG,GAAG;AACtB,QAAI,WAAW;AACf,QAAI,aAAa;AACjB,QAAI,QAAQ,CAAK,MAAA;AACf,UAAI,WAAW,SAAS,EAAE,SAAS,IAAI,wBAAwB;AAC7D,mBAAWF,GAAO,WAAW,MAAM,YAAY,0BAA0B;AAC5D,qBAAA;AAAA,MAAA,OACR;AACL,sBAAc,MAAM;AAAA,MAAA;AAAA,IACtB,CACD;AAAA,EAAA;AAEH,SAAOA,GAAO,GAAG,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,IAAI,GAAG,IAAI,cAAc;AAChE;;;;;;;;;AC/EA,MAAM,gBAAgB;AAAA,EAyBpB,YAAY,UAA2B;AAvBvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAyC,CAAC;AAC1C,2DAAyC,CAAC;AAC1C;AACA;AACA;AACA;AAGE,SAAK,UAAU,SAAS;AACjB,WAAA,OAAO,MAAM,QAAQ;AAAA,EAAA;AAEhC;AAEA,MAAM,iCAAiC,OAAO;AAAA,EAI5C,YACE,GACA,OAA2B,QAC3B;AACI,QAAA;AACA,QAAA;AACJ,QAAI,aAAa,0BAA0B;AAC1B,qBAAA,IAAI,IAAI,EAAE,YAAY;AACrC,UAAI,SAAS,QAAW;AACtB,oBAAY,EAAE;AAAA,MAAA,OACT;AACO,oBAAA;AAAA,MAAA;AAAA,IACd,WACS,OAAO,MAAM,UAAU;AAChC,qBAAe,IAAI,IAAI,OAAO,QAAQ,CAAC,CAAC;AACxC,UAAI,SAAS,UAAa,CAAC,aAAa,IAAI,IAAI,GAAG;AACjD,cAAM,kBAAkBC,qBAAmB;AAC3C,YAAI,CAAC,gBAAgB,aAAa,IAAI,eAAe,GAAG;AAC1C,sBAAA;AAAA,QAAA,OACP;AACL,sBAAY,OAAO,KAAK,CAAC,EAAE,CAAC;AAAA,QAAA;AAAA,MAC9B,OACK;AACO,oBAAA;AAAA,MAAA;AAAA,IACd,OACK;AACL,yCAAmB,IAAI;AACvB,kBAAY,QAAQA,qBAAmB;AAC1B,mBAAA,IAAI,WAAW,CAAC;AAAA,IAAA;AAE3B,QAAA,aAAa,IAAI,SAAS,KAAK;AACnC,UAAM,CAAC;AAlCT;AACA;AAkCE,SAAK,eAAe;AACpB,SAAK,OAAO;AAAA,EAAA;AAAA,EAGd,OAAQ;AACN,WAAO,IAAI,yBAAyB,MAAM,KAAK,IAAI;AAAA,EAAA;AAAA,EAGrD,WAAmB;AACX,UAAA,UAAU,KAAK,QAAQA,qBAAmB;AAC5C,QAAA;AACA,QAAA,KAAK,aAAa,MAAM;AACf,iBAAA,KAAK,aAAa,IAAI,OAAO,KAAK,KAAK,aAAa,SAAS,KAAO,EAAA;AAAA,IAAA;AAEjF,WAAO,GAAG,QAAQ;AAAA,EAAA;AAAA,EAGpB,SAAkC;AACzB,WAAA,OAAO,YAAY,KAAK,YAAY;AAAA,EAAA;AAE/C;AAEA,MAAM,gBAAgB;AAAA,EAMpB,YAAY,UAA2B;AALvC;AACA;AACA;AACA;AAGE,SAAK,gBAAgB,SAAS;AAC9B,SAAK,cAAc,SAAS;AAC5B,SAAK,qBAAqB,SAAS;AACnC,SAAK,cAAc,SAAS;AAAA,EAAA;AAAA,EAG9B,OAAyB;AAChB,WAAA,IAAI,gBAAgB,IAAI;AAAA,EAAA;AAEnC;AAEA,MAAM,WAAW;AAAA,EAqBf,YAAY,UAAsB;AApBlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAA+B;AAC/B,0CAAgC;AAChC;AACA,sDAA4C;AAG1C,SAAK,QAAQ,SAAS;AACtB,SAAK,SAAS,SAAS;AACvB,SAAK,WAAW,SAAS;AACzB,SAAK,cAAc,SAAS;AAC5B,SAAK,aAAa,SAAS;AAC3B,SAAK,YAAY,SAAS;AAC1B,SAAK,WAAW,SAAS;AACzB,SAAK,iBAAiB,SAAS;AAC/B,SAAK,eAAe,SAAS;AAC7B,SAAK,aAAa,SAAS;AAC3B,SAAK,eAAe,SAAS;AAC7B,SAAK,YAAY,SAAS;AAC1B,SAAK,OAAO,SAAS;AACrB,SAAK,eAAe,SAAS;AAC7B,SAAK,SAAS,SAAS;AACvB,SAAK,iBAAiB,SAAS;AAC/B,SAAK,YAAY,SAAS;AAC1B,SAAK,gBAAgB,SAAS;AAC9B,SAAK,6BAA6B,SAAS;AAAA,EAAA;AAAA,EAG7C,OAAoB;AAEX,WAAA,IAAI,WAAW,IAAI;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAY5B,OAAO,QAAQ,OAA0C,OAA4D;AACnH,QAAI,UAAU,OAAO;AACZ,aAAA;AAAA,IAAA;AAET,UAAM,OAAO,CAAC,GAAG,OAAO,KAAK,KAAK,GAAG,GAAG,OAAO,KAAK,KAAK,CAAC,EAAE,OAAO,SAAO,CAAC;AAAA,MACzE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA,EACA,SAAS,GAAG,CAAC;AAEN,aAAA,eAAe,UAA2B,UAA2B;AAC5E,YAAM,aAAmC,CAAC;AAC/B,iBAAA,CAAC,KAAK,KAAK,KAAK,CAAC,GAAG,UAAU,GAAG,QAAQ,GAAG;AACrD,mBAAW,GAAG,IAAI,WAAW,GAAG,KAAK,CAAC;AAC3B,mBAAA,GAAG,EAAE,KAAK,KAAK;AAAA,MAAA;AAEjB,iBAAA,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,KAAK,OAAO,QAAQ,UAAU,GAAG;AAC1D,YAAI,QAAQ,QAAQ,OAAO,SAAS,YAAY,OAAO,SAAS,UAAU;AACpE,cAAA,CAAC,eAAe,OAAO,QAAQ,IAAI,GAAG,OAAO,QAAQ,IAAI,CAAC,GAAG;AACxD,mBAAA;AAAA,UAAA;AAAA,QACT;AAEF,YAAI,MAAM,QAAQ,IAAI,KAAK,MAAM,QAAQ,IAAI,GAAG;AAC1C,cAAA,CAAC,eAAe,OAAO,QAAQ,IAAI,GAAG,OAAO,QAAQ,IAAI,CAAC,GAAG;AACxD,mBAAA;AAAA,UAAA;AAAA,QACT;AAEF,YAAI,SAAS,MAAM;AACV,iBAAA;AAAA,QAAA;AAAA,MACT;AAEK,aAAA;AAAA,IAAA;AAET,QAAI,CAAC;AAAA;AAAA,MAEH,KAAK,IAAI,CAAC,MAA+B,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;AAAA;AAAA,MAEtD,KAAK,IAAI,CAAC,MAA+B,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;AAAA,IAAA,GACrD;AACM,aAAA;AAAA,IAAA;AAIT,QAAI,MAAM,YAAY,MAAM,YAAY,MAAM,aAAa,MAAM,UAAU;AAClE,aAAA;AAAA,IAAA;AAET,QAAI,MAAM,gBAAgB,MAAM,gBAAgB,MAAM,iBAAiB,MAAM,cAAc;AAClF,aAAA;AAAA,IAAA;AAET,QAAI,MAAM,UAAU,MAAM,UAAU,MAAM,WAAW,MAAM,QAAQ;AAC1D,aAAA;AAAA,IAAA;AAGN,SAAA,MAAM,YAAY,MAAM,YAAY,MAAM,aAAa,MAAM,cAC7D,MAAM,gBAAgB,MAAM,gBAAgB,MAAM,iBAAiB,MAAM,kBACzE,MAAM,UAAU,MAAM,UAAU,MAAM,WAAW,MAAM,SACxD;AACO,aAAA;AAAA,IAAA;AAEF,WAAA;AAAA,EAAA;AAEX;AAEA,MAAM,iBAAiB;AAAA,EAMrB,YAAY,UAA4B;AALxC;AACA;AACA;AACA;AAGE,SAAK,UAAU,SAAS;AACxB,SAAK,eAAe,SAAS;AAC7B,SAAK,QAAQ,SAAS;AACtB,SAAK,uBAAuB,SAAS;AAAA,EAAA;AAEzC;AAEA,MAAM,WAAW;AAAA,EAmBf,YAAY,UAAsB;AAlBlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGE,SAAK,SAAS,SAAS;AACvB,SAAK,SAAS,SAAS;AACvB,SAAK,eAAe,SAAS;AAC7B,SAAK,SAAS,SAAS;AAClB,SAAA,cAAc,SAAS,YAAY;AAAA,MACtC,CAAC,eAAe,IAAI,iBAAiB,UAAU;AAAA,IACjD;AACA,SAAK,WAAW,SAAS;AACzB,SAAK,cAAc,SAAS;AAC5B,SAAK,WAAW,SAAS;AACzB,SAAK,cAAc,SAAS;AAC5B,SAAK,WAAW,IAAI,yBAAyB,SAAS,QAAQ;AAC9D,SAAK,YAAY,IAAI,yBAAyB,SAAS,SAAS;AAChE,SAAK,eAAe,IAAI,yBAAyB,SAAS,YAAY;AACtE,SAAK,cAAc,SAAS;AAC5B,SAAK,OAAO,IAAI,yBAAyB,SAAS,IAAI;AACtD,SAAK,eAAe,SAAS;AAC7B,SAAK,YAAY,SAAS;AAC1B,SAAK,UAAU,SAAS;AAAA,EAAA;AAE5B;AAEA,MAAM,0BAA0B;AAAA,EAU9B,YAAY,UAAqC;AATjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGE,SAAK,UAAU,SAAS;AACxB,SAAK,SAAS,SAAS;AACvB,SAAK,KAAK,SAAS;AACnB,SAAK,QAAQ,IAAI,yBAAyB,SAAS,KAAK;AACxD,SAAK,UAAU,SAAS;AACxB,SAAK,YAAY,SAAS;AAC1B,SAAK,UAAU,SAAS;AACxB,SAAK,YAAY,SAAS;AAAA,EAAA;AAE9B;AAEA,MAAM,WAAW;AAAA,EASf,YAAY,UAAsB;AARlC;AACA;AACA;AACA;AACA;AACA,4CAAkC;AAClC;AAGE,SAAK,cAAc,SAAS;AAC5B,SAAK,gBAAgB,SAAS;AAC9B,SAAK,SAAS,SAAS;AACvB,SAAK,WAAW,SAAS;AACzB,SAAK,OAAO,SAAS;AACrB,SAAK,eAAe,SAAS;AAC7B,SAAK,mBAAmB,SAAS;AAAA,EAAA;AAAA,EAGnC,OAAoB;AACX,WAAA,IAAI,WAAW,IAAI;AAAA,EAAA;AAE9B;AASA,MAAM,uBAAuB;AAAA,EAM3B,YAAY,UAAkC;AAL9C;AACA;AACA;AACA;AAGE,SAAK,SAAS,SAAS;AACvB,SAAK,cAAc,SAAS;AAC5B,SAAK,WAAW,SAAS;AACzB,SAAK,KAAK,SAAS;AAAA,EAAA;AAAA,EAGrB,OAA+B;AACtB,WAAA,IAAI,uBAAuB,IAAI;AAAA,EAAA;AAE1C;AAEA,MAAM,kBAAkB;AAAA,EAMtB,YAAY,UAA6B;AALzC;AACA;AACA;AACA;AAGE,SAAK,WAAW,SAAS;AACzB,SAAK,QAAQ,SAAS;AACtB,SAAK,gBAAgB,SAAS;AAC9B,SAAK,iBAAiB,SAAS;AAAA,EAAA;AAAA,EAGjC,OAA2B;AAClB,WAAA,IAAI,kBAAkB,IAAI;AAAA,EAAA;AAErC;AAEA,MAAM,YAAY;AAAA,EA6BhB,YAAY,UAAuB;AA5BnC;AACA,iCAAkC;AAClC,mDAAmE;AACnE;AACA;AACA,0CAAgC;AAChC,0CAAgC;AAChC;AACA;AACA,8CAA2D;AAC3D;AACA;AACA,uCAA8B;AAC9B;AACA,yCAA+B;AAC/B;AACA;AACA;AACA,uCAA6B;AAC7B,uCAAwC;AACxC;AACA,2DAAqD;AACrD;AACA,gCAAsB;AACtB;AACA;AACA;AAGE,SAAK,SAAS,SAAS;AAClB,SAAA,QACH,SAAS,SAAS,SAAS,MAAM,IAAI,CAAC,SAAS,IAAI,WAAW,IAAI,CAAC;AACrE,SAAK,0BACH,SAAS,2BACT,SAAS,wBAAwB;AAAA,MAC/B,CAAC,yBACC,IAAI,0BAA0B,oBAAoB;AAAA,IACtD;AACF,SAAK,QAAQ,SAAS;AACtB,SAAK,SAAS,SAAS;AACvB,SAAK,iBAAiB,SAAS;AAC/B,SAAK,iBAAiB,SAAS;AAC/B,SAAK,cAAc,IAAI,yBAAyB,SAAS,WAAW;AAC/D,SAAA,QAAQ,SAAS,MAAM,IAAI,CAAC,SAAS,IAAI,WAAW,IAAI,CAAC;AAC9D,SAAK,qBACH,SAAS,sBACT,SAAS,mBAAmB;AAAA,MAC1B,CAAC,uBAAuB,IAAI,uBAAuB,kBAAkB;AAAA,IACvE;AACF,SAAK,UAAU,SAAS;AACxB,SAAK,YAAY,SAAS;AAC1B,SAAK,cAAc,SAAS;AAC5B,SAAK,aAAa,SAAS;AAC3B,SAAK,gBAAgB,SAAS;AAC9B,SAAK,OAAO,IAAI,yBAAyB,SAAS,IAAI;AACjD,SAAA,aAAa,SAAS,WAAW;AAAA,MACpC,CAAC,cAAc,IAAI,gBAAgB,SAAS;AAAA,IAC9C;AACK,SAAA,QAAQ,SAAS,MAAM,IAAI,CAAC,SAAS,IAAI,WAAW,IAAI,CAAC;AAC9D,SAAK,cAAc,SAAS;AAC5B,SAAK,cACH,SAAS,eAAe,IAAI,kBAAkB,SAAS,WAAW;AACpE,SAAK,+BAA+B,SAAS;AAC7C,SAAK,kCACH,SAAS;AACX,SAAK,OAAO,SAAS;AACrB,SAAK,OAAO,SAAS;AACrB,SAAK,WAAW,IAAI,yBAAyB,SAAS,QAAQ;AAC9D,SAAK,cAAc,SAAS;AAC5B,SAAK,UAAU,SAAS;AAAA,EAAA;AAAA;AAAA,EAI1B,OAAqB;AXrcvB,QAAAH,KAAAK,KAAAC,KAAAC,KAAAC,KAAA;AWscU,UAAA,WAAW,IAAI,YAAY,IAAI;AACrC,WAAO,OAAO,UAAU;AAAA,MACtB,QAAQ,KAAK;AAAA,MACb,SAAOR,MAAA,KAAK,UAAL,gBAAAA,IAAY,IAAI,CAAA,SAAQ,IAAI,WAAW,IAAI,OAAM,CAAC;AAAA,MACzD,2BAAyBK,MAAA,KAAK,4BAAL,gBAAAA,IAA8B,IAAI,CAAA,QAAO,IAAI,0BAA0B,GAAG,OAAM,CAAC;AAAA,MAC1G,OAAO,KAAK;AAAA,MACZ,QAAQ,OAAO,OAAO,CAAA,GAAI,KAAK,MAAM;AAAA;AAAA,MACrC,gBAAgB,KAAK;AAAA,MACrB,gBAAgB,KAAK;AAAA,MACrB,aAAa,KAAK,YAAY,QAAQ,KAAK,YAAY,UAAU,KAAK;AAAA,MACtE,OAAO,KAAK,MAAM,IAAI,CAAA,SAAQ,KAAK,QAAQ,KAAK,KAAK,KAAK,IAAI;AAAA,MAC9D,sBAAoBC,MAAA,KAAK,uBAAL,gBAAAA,IAAyB,IAAI,SAAO,IAAI,KAAM,OAAK,CAAC;AAAA,MACxE,SAAS,KAAK;AAAA,MACd,WAAW,KAAK;AAAA,MAChB,aAAa,KAAK;AAAA,MAClB,YAAY,KAAK;AAAA,MACjB,eAAe,KAAK;AAAA,MACpB,MAAM,KAAK,KAAK,QAAQ,KAAK,KAAK,UAAU,KAAK;AAAA,MACjD,aAAYC,MAAA,KAAK,eAAL,gBAAAA,IAAiB,IAAI,CAAA,OAAM,GAAG,QAAQ,GAAG,KAAK,KAAK;AAAA,MAC/D,QAAOC,MAAA,KAAK,UAAL,gBAAAA,IAAY,IAAI,CAAA,MAAK,EAAE,QAAQ,EAAE,KAAK,KAAK;AAAA,MAClD,aAAa,KAAK;AAAA,MAClB,eAAa,UAAK,gBAAL,mBAAkB,SAAQ,KAAK,YAAY,UAAU;AAAA,MAClE,8BAA8B,CAAC,GAAG,KAAK,gCAAgC,CAAA,CAAE;AAAA,MACzE,iCAAiC,CAAC,GAAG,KAAK,mCAAmC,CAAA,CAAE;AAAA,MAC/E,MAAM,KAAK,KAAK,QAAQ,KAAK,KAAK,UAAU,KAAK;AAAA,MACjD,MAAM,KAAK;AAAA,MACX,UAAU,KAAK,SAAS,QAAQ,KAAK,SAAS,KAAK;AAAA,MACnD,aAAa,KAAK;AAAA,MAClB,SAAS,KAAK;AAAA,IAAA,CACf;AACM,WAAA;AAAA,EAAA;AAAA,EAGT,OAAO,OAAO,OAoBX,YAAmB,MAAmB;AACjC,UAAA,UAAU,MAAM,WAAWC,GAAO;AAClC,UAAA,cAAc,YAAY,IAAI,kBAAkB;AAAA,MACpD,UAAU;AAAA,MACV,OAAO;AAAA,MACP,eAAeA,GAAO;AAAA,MACtB,iBAAiB,oBAAI,KAAK,GAAG,YAAY;AAAA,IAC1C,CAAA,IAAI;AAEL,UAAM,OAAO,MAAM,OACjB,MAAM,gBAAgB,2BACtB,MAAM,OAAO,IAAI,yBAAyB,MAAM,IAAI,IAClD,IAAI,yBAAyB,EAAE;AAC7B,UAAA,QAAQ,QAAQ,IAAI;AACpB,UAAA,OAAO,IAAI,WAAW;AAAA,MAC1B,SAAS;AAAA,MACT,UAAU,CAAC;AAAA,MACX,YAAY;AAAA,MACZ,eAAe;AAAA,MACf,cAAc;AAAA,MACd,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,kBAAkB;AAAA,MAClB,gBAAgB;AAAA,MAChB,cAAc;AAAA,MACd,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,QAAQ,KAAK,SAAS;AAAA,MACtB,gBAAgB;AAAA,MAChB,UAAU;AAAA,MACV,iBAAiB,MAAM,eAAe;AAAA,MACtC,kBAAkB;AAAA,MAClB,aAAa;AAAA,MACb,8BAA8B;AAAA,IAAA,CAC/B;AACD,WAAO,IAAI,YAAY;AAAA,MACrB,QAAQ,MAAM;AAAA,MACd,OAAO;AAAA,MACP,yBAAyB;AAAA,MACzB,OAAO,MAAM,SAAS;AAAA,MACtB,QAAQ,MAAM,UAAU,CAAC;AAAA,MACzB,gBAAgB,MAAM,kBAAkB;AAAA,MACxC,gBAAgB,MAAM,kBAAkB;AAAA,MACxC,aAAa,MAAM,cACjB,MAAM,uBAAuB,2BAC7B,MAAM,cAAc,IAAI,yBAAyB,MAAM,WAAW,IAChE;AAAA,MACJ,OAAO,CAAC;AAAA,MACR,oBAAoB,CAAC;AAAA,MACrB;AAAA,MACA,WAAW,MAAM,aAAa;AAAA,MAC9B,aAAa,MAAM,eAAe;AAAA,MAClC,YAAY,MAAM,cAAc;AAAA,MAChC,eAAe,MAAM,iBAAiB;AAAA,MACtC;AAAA,MACA,YAAY,CAAC;AAAA,MACb,OAAO,CAAC,KAAK,MAAM;AAAA,MACnB,aAAa,MAAM,eAAe;AAAA,MAClC;AAAA,MACA,8BAA8B,MAAM,gCAAgC,CAAC;AAAA,MACrE,iCAAiC,MAAM,mCAAmC;AAAA,MAC1E;AAAA,MACA,MAAM,MAAM,QAAQ;AAAA,MACpB,UAAU,MAAM,WACd,MAAM,oBAAoB,2BAC1B,MAAM,WAAW,IAAI,yBAAyB,MAAM,QAAQ,IAC1D,IAAI,yBAAyB,EAAE;AAAA,MACnC,aAAa,MAAM,eAAe;AAAA,MAClC,SAAS,MAAM,WAAW;AAAA,IAAA,CAC3B;AAAA,EAAA;AAEL;AAMA,MAAM,YAAY;AAAA,EAMhB,YAAY,UAAuB,UAAyC,MAAM;AALlF;AACA;AACA;AACA;AAGE,SAAK,KAAK,SAAS;AACnB,SAAK,QAAQ,SAAS;AACtB,QAAI,mBAAmB,eAAe;AACpC,WAAK,YAAY;AACZ,WAAA,cAAc,UAAU,QAAQ,KAAK;AAAA,IAAA,OACrC;AACL,WAAK,YAAY;AACjB,WAAK,cAAc;AAAA,IAAA;AAAA,EACrB;AAAA,EAGF,WAAW;AACT,WAAO,KAAK;AAAA,EAAA;AAAA,EAGd,OAAO,OAAO,UAAkC,WAAmB,OAAe,UAAmB;AAC7F,UAAA,OAAO,YAAYN,qBAAmB;AAC5C,UAAM,aAAa,oBAAoB,gBAAgB,SAAS,KAAK;AAE/D,UAAA,UAAU,oBAAoB,gBAAgB,WAAW;AAC/D,UAAM,KAAK;AAAA,MACT,CAAC,OAAO;AAAA,MACR,GAAG,UAAU,IAAI,SAAS,IAAI,KAAK,IAAI,IAAI;AAAA,IAC7C;AACA,WAAO,IAAI;AAAA,MACT;AAAA,QACE;AAAA,QACA;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAEJ;AAEA,MAAM,cAAc;AAAA,EAOlB,YAAY,UAAyB;AANrC;AACA;AACA;AACA;AACA;AAGE,SAAK,KAAK,SAAS;AACnB,SAAK,aAAa,SAAS;AAChB,eAAA,CAAC,MAAM,KAAK,KAAK,OAAO,QAAQ,KAAK,UAAU,GAAG;AACvD,UAAA,EAAE,iBAAiB,cAAc;AACnC,aAAK,WAAW,IAAI,IAAI,IAAI,YAAY,OAAO,IAAI;AAAA,MAAA;AAAA,IACrD;AAEF,SAAK,SAAS,SAAS;AACvB,SAAK,YAAY,SAAS;AAC1B,SAAK,WAAW,SAAS;AACzB,QAAI,KAAK,UAAU;AACjB,WAAK,WAAW,KAAK,SAAS,IAAI,CAAC,UAAU;AAC3C,eAAO,iBAAiB,gBACpB,QACA,IAAI,cAAc,KAAK;AAAA,MAAA,CAC5B;AAAA,IAAA;AAAA,EACH;AAAA,EAGF,eAA6B;AAEzB,WAAA,KAAK,WAAWA,sBAAoB,KAAK,OAAO,OAAO,KAAK,UAAU,EAAE,CAAC;AAAA,EAAA;AAAA,EAI7E,WAAW;AACL,QAAA,CAAC,KAAK,cAAc;AACtB,aAAO,KAAK,YAAY,IAAI,EAAE,aAAe,EAAA;AAAA,IAAA;AAExC,WAAA,KAAK,eAAe;AAAA,EAAA;AAAA;AAAA,EAI7B,OAAO,UAAU,eAAqC,OAA+D,UAAqD,SAAqF,CAAA,GAAmB;AAE5Q,QAAA,QAAO,iCAAQ,iBAAgBA,qBAAmB;AAClD,QAAA;AACA,QAAA;AACA,QAAA,OAAO,UAAU,UAAU;AAClB,iBAAA;AACX,mBAAa,EAAC,CAAC,IAAI,GAAG,IAAI,YAAY,EAAC,IAAI,IAAI,OAAO,SAAQ,CAAC,EAAC;AAAA,IAAA,WACvD,iBAAiB,aAAa;AACvC,iBAAW,MAAM;AACjB,mBAAa,EAAC,CAAC,IAAI,GAAG,MAAK;AAAA,IAAA,WAClB,QAAQ,OAAO;AACb,iBAAA,MAAM,IAAI,EAAE;AACV,mBAAA;AAAA,IAAA,OACR;AACL,YAAM,aAAa,OAAO,QAAQ,KAAK,EAAE,OAAO,CAAC;AACjD,UAAI,eAAe,QAAW;AAC5B,cAAM,MAAM,+DAA+D;AAAA,MAAA;AAE7E,aAAO,WAAW,CAAC;AACR,iBAAA,WAAW,CAAC,EAAE;AACZ,mBAAA;AAAA,IAAA;AAEf,UAAM,YAAY;AAAA,MAChB,CAAC,SAAS;AAAA,MACV,IAAG,+CAAe,OAAM,QAAQ,IAAI,QAAQ;AAAA,IAC9C;AACA,UAAM,iBAAiB,YAAY,CAAC,GAAG,IAAI,CAAS,UAAA;AAC9C,UAAA,EAAE,iBAAiB,gBAAgB;AAC9B,eAAA,cAAc,UAAU,eAAe,OAAO,IAAI,EAAC,cAAc,OAAO,cAAa;AAAA,MAAA;AAEvF,aAAA;AAAA,IAAA,CACR;AACD,WAAO,IAAI,cAAc;AAAA,MACvB,IAAI;AAAA,MACJ;AAAA,MACA,QAAQ,OAAO,UAAU;AAAA,MACzB,WAAW,OAAO,aAAa;AAAA,MAC/B,UAAU;AAAA,IAAA,CACX;AAAA,EAAA;AAEL;AAGA,MAAM,iBAAiB;AAAA,EAkErB,YAAY,UAA4B;AAjExC;AACA;AACA;AACA;AACA;AA8DE,SAAK,KAAK,SAAS;AACnB,SAAK,aAAa,SAAS;AAC3B,SAAK,WAAW,SAAS;AACzB,SAAK,gBAAgB,CAAC;AACtB,SAAK,WAAW,CAAC;AACX,UAAA,YAAY,CAAC,YAA2B;AACvC,WAAA,cAAc,QAAQ,EAAE,IAAI;AACtB,iBAAA,CAAG,EAAA,KAAK,KAAK,OAAO,QAAQ,QAAQ,UAAU,GAAG;AACrD,aAAA,SAAS,MAAM,EAAE,IAAI;AAAA,MAAA;AAE5B,UAAI,QAAQ,UAAU;AACX,iBAAA,SAAS,QAAQ,UAAU;AAC9B,cAAA,EAAE,iBAAiB,gBAAgB;AAC7B,oBAAA,IAAI,cAAc,KAAK;AAAA,UAAA;AAEjC,oBAAU,KAAK;AAAA,QAAA;AAAA,MACjB;AAAA,IAEJ;AACW,eAAA,CAAC,IAAI,OAAO,KAAK,OAAO,QAAQ,KAAK,QAAQ,GAAG;AACrD,UAAA,EAAE,mBAAmB,gBAAgB;AACvC,aAAK,SAAS,EAAE,IAAI,IAAI,cAAc,OAAO;AAAA,MAAA;AAErC,gBAAA,KAAK,SAAS,EAAE,CAAC;AAAA,IAAA;AAAA,EAC7B;AAAA,EApFF,OAAO,kBAAkB,OAIJ;AACnB,UAAM,iBAAiB,MAAM,QAAQ,MAAM,cAAc,SAAS;AAClE,WAAO,iBAAiB,OAAO;AAAA,MAC7B,MAAM;AAAA,MACN,UAAU,MAAM,cAAc,YAAY,CAAA;AAAA,IAAC,CAC5C;AAAA,EAAA;AAAA,EAGH,OAAO,OAAO,OAIO;AACnB,QAAI,WAAW,MAAM;AACjB,QAAA,MAAM,QAAQ,QAAQ,GAAG;AAC3B,iBAAW,SAAS;AAAA,QAClB,CAAC,KAA6C,MAAqB;AAC7D,cAAA,EAAE,EAAE,IAAI;AACL,iBAAA;AAAA,QACT;AAAA,QACF,CAAA;AAAA,MAAE;AAAA,IAAA;AAEJ,UAAM,OACJ,OAAO,MAAM,SAAS,WACpB,YAAY,OAAO,IAAI,aAAa,MAAM,IAAI,IAC9C,MAAM;AAEV,QAAI,eAAe,MAAM;AACzB,QAAI,CAAC,cAAc;AACb,UAAA,OAAO,SAAS,UAAU;AACb,uBAAA;AAAA,UACb,CAAC,YAAY;AAAA,UACb;AAAA,QACF;AAAA,MAAA,WACS,gBAAgB,aAAa;AACvB,uBAAA;AAAA,UACb,CAAC,YAAY;AAAA,UACb,KAAK;AAAA,QACP;AAAA,MAAA,OACK;AACL,cAAM,MAAM,mDAAmD;AAAA,MAAA;AAAA,IACjE;AAEI,UAAA,aAA8C,gBAAgB,cAAc;AAAA,MAChF,CAACA,qBAAmB,CAAC,GAAG;AAAA,IAAA,IACtB;AACJ,WAAO,IAAI,iBAAiB;AAAA,MAC1B,IAAI;AAAA,MACJ;AAAA,MACA;AAAA,MACA,eAAe,CAAC;AAAA,MAChB,UAAU,CAAA;AAAA,IAAC,CACZ;AAAA,EAAA;AAAA,EA+BH,gBAAiB,SAAiB;AACzB,WAAA,KAAK,SAAS,OAAO;AAAA,EAAA;AAAA,EAG9B,kBAAmB,OAAe;AXxyBpC,QAAAH;AWyyBW,YAAAA,MAAA,OAAO,OAAO,KAAK,QAAQ,EAAE,KAAK,CAAS,UAAA,MAAM,SAAS,KAAK,MAA/D,gBAAAA,IAAkE;AAAA,EAAA;AAAA,EAG3E,WAAmB;AACjB,YAAQ,KAAK,WAAWG,qBAAmB,CAAC,KAAK,OAAO,OAAO,KAAK,UAAU,EAAE,CAAC,KAAK,IAAI,SAAS;AAAA,EAAA;AAEvG;AAEA,MAAM,WAAW;AAAA,EAYf,YAAY,UAAsB;AAXlC;AAIA;AACA;AACA;AACA,yCAA+B;AAC/B,4CAAwD;AACxD,qCAA2B;AAGzB,SAAK,OAAO,SAAS;AACrB,QAAI,OAAO,KAAK,SAAS,YAAY,EAAE,KAAK,gBAAgB,MAAM;AAChE,WAAK,OAAO,IAAI,IAAI,OAAO,QAAQ,KAAK,IAAI,CAAC;AAAA,IAAA;AAE/C,SAAK,eAAe,SAAS;AAC7B,SAAK,sBAAsB,SAAS;AACpC,SAAK,SAAS,SAAS;AACvB,SAAK,gBAAgB,SAAS;AAC9B,SAAK,mBAAmB,SAAS;AACjC,SAAK,YAAY,SAAS;AAAA,EAAA;AAAA,EAG5B,WAAmB;AACb,QAAA,CAAC,KAAK,QAAQ;AACX,WAAA,SAAS,OAAO,WAAW;AAAA,IAAA;AAElC,WAAO,KAAK;AAAA,EAAA;AAEhB;AAEA,MAAM,0BAA0B;AAAA,EAM9B,YAAY,UAAsC;AAJlD;AACA;AACA;AAGE,QAAI,UAAU;AACZ,WAAK,OAAO,SAAS;AACrB,WAAK,YAAY,SAAS;AAC1B,WAAK,cAAc,SAAS;AAAA,IAAA;AAAA,EAC9B;AAAA,EAGF,UAAmB;AACjB,WAAO,EAAE,KAAK,QAAQ,KAAK,aAAa,KAAK;AAAA,EAAA;AAEjD;AAEA,MAAM,uBAAuB;AAAA,EAU3B,YAAY,UAAkC;AAT9C;AACA;AACA;AACA;AACA,0CAAgC;AAChC,4CAAkC;AAClC,oCAA0B;AAC1B,gDAAsC;AAGpC,SAAK,cAAc,SAAS;AACxB,QAAA,EAAE,KAAK,uBAAuB,4BAA4B;AACxD,UAAA,SAAS,uBAAuB,KAAK;AAClC,aAAA,cAAc,IAAI,0BAA0B,OAAO,YAAY,SAAS,YAAY,QAAQ,CAAC,CAAC;AAAA,MAAA,OAC9F;AACL,aAAK,cAAc,IAAI,0BAA0B,KAAK,WAAW;AAAA,MAAA;AAAA,IACnE;AAEF,SAAK,WAAW,SAAS;AACzB,SAAK,OAAO,SAAS;AACrB,SAAK,qBAAqB,SAAS;AACnC,SAAK,iBAAiB,SAAS;AAC/B,SAAK,mBAAmB,SAAS;AACjC,SAAK,WAAW,SAAS;AACzB,SAAK,uBAAuB,SAAS;AAAA,EAAA;AAEzC;AAEA,MAAM,kBAAkB;AAAA,EAKtB,YAAY,UAA6B;AAJzC;AACA;AACA;AAGE,SAAK,KAAK,SAAS;AACnB,SAAK,WAAW,SAAS;AACzB,SAAK,OAAO,SAAS;AAAA,EAAA;AAAA,EAGvB,WAAW;AACT,UAAM,OAAOA,qBAAmB;AAC5B,QAAA,YAAY,KAAK,KAAK,IAAI;AAC1B,QAAA,OAAO,cAAc,UAAU;AACjC,kBAAY,OAAO,OAAO,KAAK,IAAI,EAAE,CAAC;AAAA,IAAA;AAExC,QAAI,CAAC,WAAW;AACd,YAAM,MAAM,iCAAiC,KAAK,EAAE,gBAAgB,IAAI,EAAE;AAAA,IAAA;AAErE,WAAA;AAAA,EAAA;AAAA,EAGT,KAAK,MAAkC;AAC9B,WAAA,KAAK,KAAK,IAAI;AAAA,EAAA;AAAA,EAGvB,MAAM,UAAU;AACP,WAAA;AAAA,MACL,IAAI,KAAK;AAAA,MACT,UAAU,KAAK;AAAA,MACf,MAAM,KAAK;AAAA,IACb;AAAA,EAAA;AAEJ;AAEA,MAAM,wBAAwB;AAAA,EAQ5B,YAAY,UAAmC;AAP/C;AACA;AACA;AACA;AACA;AACA;AAGE,SAAK,KAAK,SAAS;AACnB,SAAK,OAAO,SAAS;AACrB,SAAK,UAAU,SAAS;AACxB,SAAK,OAAO,SAAS;AACrB,SAAK,QAAQ,SAAS;AACtB,QAAI,SAAS,MAAM;AACjB,WAAK,OAAO,SAAS;AAAA,IAAA;AAAA,EACvB;AAEJ;AAEA,MAAM,eAAe;AAAA,EAQnB,YAAY,UAA0B;AAPtC;AACA,iCAAkC;AAClC;AACA;AACA;AACA;AAGE,SAAK,mBAAmB,IAAI;AAAA,MAC1B,SAAS;AAAA,IACX;AACK,SAAA,QACH,SAAS,SAAS,SAAS,MAAM,IAAI,CAAC,SAAS,IAAI,WAAW,IAAI,CAAC;AAChE,SAAA,WAAW,SAAS,YAAY,CAAC;AACtC,SAAK,UAAU,SAAS;AACxB,SAAK,WAAW,SAAS;AAAA,EAAA;AAE7B;;;;;;;;;;;;;;;;;;;;;;;ACz8BA,MAAM,YAAY;AAAA,EAGhB,YAAY,UAAuB;AAFnC;AAGE,SAAK,SAAS,OAAO;AAAA,MACnB,OAAO,QAAQ,SAAS,MAAM,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,gBAAgB,CAAC,CAAC,CAAC;AAAA,IAC7E;AAAA,EAAA;AAEJ;AAEA,MAAe,aAAa;AAe5B;AAEA,MAAM,2BAA2B,aAAa;AAAA,EAG5C,YAAY,WAAmB;AACvB,UAAA;AAHR;AAIE,SAAK,YAAY;AAAA,EAAA;AAAA,EAGnB,MAAM,YAAkC;AACtC,UAAM,WAAW,MAAM;AAAA,MACrB,GAAG,KAAK,SAAS;AAAA,IACnB;AACO,WAAA,MAAM,SAAS,KAAK;AAAA,EAAA;AAAA,EAG7B,MAAM,SAAS,OAA8C;AACpD,WAAA,KAAK,iBAAiB,MAAM,OAAO;AAAA,EAAA;AAAA,EAG5C,MAAM,iBAAiB,SAAuC;AAC5D,UAAM,WAAW,MAAM;AAAA,MACrB,GAAG,KAAK,SAAS,WAAW,OAAO;AAAA,IACrC;AACO,WAAA,MAAM,SAAS,KAAK;AAAA,EAAA;AAAA,EAG7B,MAAM,YAAY,YAA6C;AACvD,UAAA,MAAM,oCAAoC,UAAU,EAAE;AAAA,EAAA;AAAA,EAG9D,MAAM,cAAc,cAAiD;AAC7D,UAAA,MAAM,sCAAsC,YAAY,EAAE;AAAA,EAAA;AAAA,EAGlE,MAAM,aACJ,SACA,OAC2B;AAC3B,UAAM,WAAW,MAAM;AAAA,MACrB,GAAG,KAAK,SAAS,yBAAyB,OAAO,kEAAkE,KAAK;AAAA,IAC1H;AACO,WAAA,MAAM,SAAS,KAAK;AAAA,EAAA;AAE/B;AAEA,MAAM,iCAAiC,aAAa;AAAA,EASlD,YACE,WACA;AAAA,IACE;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAOI,IACJ;AACM,UAAA;AA1BR;AACA;AACA;AACA;AACA;AACA;AACA;AAqBE,SAAK,YAAY;AACZ,SAAA,eAAe,iBAAiB,MAAM;AAC3C,SAAK,mBAAmB;AACxB,SAAK,qBACH,uBACC,CAAC,YAAoB,mBAAmB,OAAO;AAClD,SAAK,0BACH,4BACC,CAAC,YAAoB,CAAC,kBAAkB,OAAO,OAAO;AACzD,SAAK,mBACH,qBACC,CAAC,eAAuB,iBAAiB,UAAU;AACtD,SAAK,qBACH,uBACC,CAAC,iBAAyB,eAAe,YAAY;AAAA,EAAA;AAAA,EAG1D,MAAM,YAAkC;AAChC,UAAA,WAAW,MAAM,MAAM,GAAG,KAAK,SAAS,IAAI,KAAK,aAAc,CAAA,EAAE;AAChE,WAAA,MAAM,SAAS,KAAK;AAAA,EAAA;AAAA,EAG7B,MAAM,SAAS,OAAqD;AAC9D,QAAA,CAAC,KAAK,kBAAkB;AACnB,aAAA,KAAK,iBAAiB,MAAM,OAAO;AAAA,IAAA;AAE5C,UAAM,WAAW,MAAM;AAAA,MACrB,GAAG,KAAK,SAAS,IAAI,KAAK,iBAAiB,KAAK,CAAC;AAAA,IACnD;AACA,YAAQ,MAAM,SAAS,KAAK,GAAG,MAAM,CAAC;AAAA,EAAA;AAAA,EAGxC,MAAM,iBAAiB,SAA8C;AACnE,UAAM,WAAW,MAAM;AAAA,MACrB,GAAG,KAAK,SAAS,IAAI,KAAK,mBAAmB,OAAO,CAAC;AAAA,IACvD;AACA,YAAQ,MAAM,SAAS,KAAK,GAAG,MAAM,CAAC;AAAA,EAAA;AAAA,EAGxC,MAAM,YAAY,YAA6C;AACvD,UAAA,SAAS,GAAG,KAAK,SAAS,IAAI,KAAK,iBAAiB,UAAU,CAAC;AAC/D,UAAA,WAAW,MAAM,MAAM,MAAM;AACnC,WAAO,SAAS,KAAA,EAAO,KAAK,CAACO,cAA6B;AACxDA,gBAAS,WAAW;AACbA,aAAAA;AAAAA,IAAA,CACR;AAAA,EAAA;AAAA,EAGH,MAAM,cAAc,cAAiD;AACnE,UAAM,WAAW,MAAM;AAAA,MACrB,GAAG,KAAK,SAAS,IAAI,KAAK,mBAAmB,YAAY,CAAC;AAAA,IAC5D;AACO,WAAA,MAAM,SAAS,KAAK;AAAA,EAAA;AAAA,EAG7B,MAAM,aACJ,SACA,OAC2B;AAC3B,UAAM,YAAY,CAAC;AACnB,eAAW,QAAQ,KAAK,wBAAwB,OAAO,GAAG;AACxD,YAAM,SAAS,GAAG,KAAK,SAAS,IAAI,IAAI;AAClC,YAAA,WAAW,MAAM,MAAM,MAAM;AACnC,YAAM,eAAiC,MAAM,SAAS,QAAQ,cAAc;AAC5E,iBAAW,YAAY,aAAa;AAClC,iBAAS,WAAW;AAAA,MAAA;AAEZ,gBAAA,KAAK,GAAI,QAAQ,YAAY,MAAM,GAAG,KAAK,IAAI,WAAY;AACjE,UAAA,SAAS,UAAU,SAAS,OAAO;AACrC;AAAA,MAAA;AAAA,IACF;AAEK,WAAA;AAAA,EAAA;AAEX;AAEA,MAAM,0BAA0B,aAAa;AAAA,EAS3C,YAAY;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAOI,IAAI;AACF,UAAA;AAvBR;AACA;AACA;AACA;AACA;AACA;AACA;AAkBO,SAAA,KAAK,OAAO,uCAAI;AAChB,SAAA,eAAe,iBAAiB,MAAM;AAC3C,SAAK,mBACH,qBACC,CAAC,UAA2B,4BAA4B,MAAM,OAAO;AACxE,SAAK,qBACH,uBACC,CAAC,YAAoB,4BAA4B,OAAO;AAC3D,SAAK,0BACH,4BACC,CAAC,YAAoB,CAAC,gCAAgC,OAAO,OAAO;AACvE,SAAK,mBACH,qBACC,CAAC,eAAuB,+BAA+B,UAAU;AACpE,SAAK,qBACH,uBACC,CAAC,iBAAyB,iCAAiC,YAAY;AAAA,EAAA;AAAA,EAG5E,MAAM,YAAkC;AAChC,UAAA,KAAK,MAAM,KAAK;AAChB,UAAA,WAAW,MAAM,GAAG,SAAS,SAAS,KAAK,gBAAgB,MAAM;AACvE,WAAO,IAAI,YAAY,MAAM,KAAK,MAAM,QAAQ,CAAC;AAAA,EAAA;AAAA,EAGnD,MAAM,SAAS,OAAqD;AAC5D,UAAA,KAAK,MAAM,KAAK;AAChB,UAAA,YAAY,KAAK,mBAAmB,KAAK,iBAAiB,KAAK,IAAI,KAAK,mBAAmB,MAAM,OAAO;AAC9G,QAAI,CAAC,WAAW;AACP,aAAA;AAAA,IAAA;AAEH,UAAA,WAAW,MAAM,GAAG,SAAS;AAAA,MACjC;AAAA,MACA;AAAA,IACF;AACA,WAAO,MAAM,KAAK,MAAM,QAAQ,EAAE,MAAM,CAAC;AAAA,EAAA;AAAA,EAG3C,MAAM,iBAAiB,SAA8C;AAC7D,UAAA,KAAK,MAAM,KAAK;AAChB,UAAA,YAAY,KAAK,mBAAmB,OAAO;AACjD,QAAI,CAAC,WAAW;AACP,aAAA;AAAA,IAAA;AAEH,UAAA,WAAW,MAAM,GAAG,SAAS;AAAA,MACjC;AAAA,MACA;AAAA,IACF;AACA,WAAO,MAAM,KAAK,MAAM,QAAQ,EAAE,MAAM,CAAC;AAAA,EAAA;AAAA,EAG3C,MAAM,YAAY,YAA6C;AACvD,UAAA,KAAK,MAAM,KAAK;AAChB,UAAA,SAAS,KAAK,iBAAiB,UAAU;AACzC,UAAA,WAAW,MAAM,GAAG,SAAS;AAAA,MACjC;AAAA,MACA;AAAA,IACF;AACA,WAAO,KAAK,MAAM,QAAQ,EAAE,KAAK,CAAC,aAA6B;AAC7D,eAAS,WAAW;AACb,aAAA;AAAA,IAAA,CACR;AAAA,EAAA;AAAA,EAGH,MAAM,cAAc,cAAiD;AAC7D,UAAA,KAAK,MAAM,KAAK;AAChB,UAAA,WAAW,MAAM,GAAG,SAAS;AAAA,MACjC,KAAK,mBAAmB,YAAY;AAAA,MACpC;AAAA,IACF;AACO,WAAA,MAAM,KAAK,MAAM,QAAQ;AAAA,EAAA;AAAA,EAGlC,MAAM,aACJ,SACA,OAC2B;AACrB,UAAA,KAAK,MAAM,KAAK;AACtB,UAAM,YAAY,CAAC;AACnB,eAAW,QAAQ,KAAK,wBAAwB,OAAO,GAAG;AAClD,YAAA,WAAW,KAAK,MAAM,MAAM,GAAG,SAAS,SAAS,MAAM,MAAM,CAAC;AACpE,YAAM,SAAS;AAmBT,YAAA,cAAgC,SAAS,cAAc,UAAU;AAAA,QACrE,CAAC,aAA6B,YAAY,SAAS,iBAAiB;AAAA,MACtE;AACA,iBAAW,YAAY,aAAa;AAClC,iBAAS,WAAW;AAAA,MAAA;AAEZ,gBAAA,KAAK,GAAI,QAAQ,YAAY,MAAM,GAAG,KAAK,IAAI,WAAY;AACjE,UAAA,SAAS,UAAU,SAAS,OAAO;AACrC;AAAA,MAAA;AAAA,IACF;AAEK,WAAA;AAAA,EAAA;AAEX;AAEA,MAAM,eAAe,IAAI,mBAAmB,uBAAuB;;;;;;;;;;;;;AC5TnE,MAAM,qBAAqB;AAAA,EAIzB,YAAYC,eAA4B;AAHxC;AACA;AAGE,SAAK,eAAeA;AACf,SAAA,kCAAkB,IAAuC;AAAA,EAAA;AAAA,EAGhE,mBAAmB,IAAuC;AACxD,QAAI,aAAa,KAAK,YAAY,IAAI,EAAE;AACxC,QAAI,eAAe,QAAW;AACrB,aAAA;AAAA,IAAA;AAEI,iBAAA,KAAK,aACf,cAAc,EAAE,EAChB,KAAK,CAAC,aAAa,IAAI,iBAAiB,QAAQ,CAAC;AAC/C,SAAA,YAAY,IAAI,IAAI,UAAU;AAC5B,WAAA;AAAA,EAAA;AAEX;AAEM,MAAA,MAAM,IAAI,qBAAqB,YAAY;ACjBjD,MAAM,YAAY;AAAA,EAKhB,YAAYA,eAA4B,oBAA6B,MAAM;AAJ3E;AACA;AACA;AAGE,SAAK,eAAeA;AACf,SAAA,4BAAY,IAAI;AACrB,SAAK,oBAAoB;AAAA,EAAA;AAAA,EAG3B,MAAM,QAAQ,IAAY,eAAwB,MAA8C;AAC9F,QAAI,KAAK,MAAM,IAAI,EAAE,GAAG;AACtB,YAAM,WAAW,KAAK,MAAM,IAAI,EAAE;AAClC,UAAI,oBAAoB,gBAAgB;AACtC,eAAO,SAAS;AAAA,MAAA;AAElB,aAAO,YAAY;AAAA,IAAA;AAGrB,QAAI,CAAC,cAAc;AACjB,YAAM,WAAW,MAAM,KAAK,QAAQ,EAAE;AACtC,aAAO,SAAS;AAAA,IAAA;AAEX,WAAA;AAAA,EAAA;AAAA,EAGT,OAAO,QACL,SACA,QAA4B,QACG;AAC/B,UAAM,gBACJ,MAAM,KAAK,aAAa,aAAa,SAAS,SAAS,CAAC;AAC/C,eAAA,gBAAgB,cAAc,UAAU;AAC3C,YAAA,WAAW,IAAI,eAAe,YAAY;AAC5C,UAAA,SAAS,iBAAiB,aAAa,SAAS;AAClD;AAAA,MAAA;AAEF,WAAK,MAAM;AAAA,QACT,SAAS,iBAAiB;AAAA,QAC1B,KAAK,oBAAoB,SAAS,mBAAmB;AAAA,MACvD;AACM,YAAA;AAAA,IAAA;AAAA,EACR;AAAA,EAGF,MAAM,QAAQ,IAAqC;AACjD,QAAI,KAAK,MAAM,IAAI,EAAE,GAAG;AACtB,YAAMC,YAAW,KAAK,MAAM,IAAI,EAAE;AAClC,UAAIA,qBAAoB,gBAAgB;AAC/BA,eAAAA;AAAAA,MAAA;AAAA,IACT;AAGF,UAAM,eACJ,MAAM,KAAK,aAAa,YAAY,EAAE;AAClC,UAAA,WAAW,IAAI,eAAe,YAAY;AAChD,QAAI,KAAK,mBAAmB;AAC1B,WAAK,MAAM,IAAI,IAAI,KAAK,oBAAoB,SAAS,mBAAmB,QAAQ;AAAA,IAAA;AAE3E,WAAA;AAAA,EAAA;AAEX;AAEM,MAAA,cAAc,IAAI,YAAY,YAAY;AClEhD,MAAM,cAAc;AAAA,EAIlB,YAAY,IAAY,MAAc;AAHtC;AACA;AAGE,SAAK,KAAK;AACV,SAAK,OAAO;AAAA,EAAA;AAEhB;AAEA,MAAM,OAAO;AAAA;AAAA,EAMX,YAAY,IAAY,MAAc,UAAkB,eAAuB;AAL/E;AACA;AACA;AACA;AAGE,SAAK,KAAK;AACV,SAAK,OAAO;AACZ,SAAK,WAAW;AAChB,SAAK,gBAAgB;AAAA,EAAA;AAAA,EAGvB,mBAAyC;AAChC,WAAA,KAAK,MAAM,KAAK,aAAa;AAAA,EAAA;AAExC;AACA,MAAM,yBAAyB,IAAI;AAAA,EACjC;AAAA,EACA;AACF;AACA,MAAM,iBAAqD;AAAA,EACvD,CAAC,wCAAwC,eAAe,UAAU,oEAAoE;AAAA,EACtI,CAAC,wCAAwC,yBAAyB,WAAW,sDAAsD;AAAA,EACnI,CAAC,wCAAwC,8BAA8B,gBAAgB,sDAAsD;AAAA,EAC7I,CAAC,wCAAwC,wBAAwB,gBAAgB,uCAAuC;AAAA,EACxH,CAAC,wCAAwC,6BAA6B,qBAAqB,uCAAuC;AAAA,EAClI,CAAC,wCAAwC,iBAAiB,WAAW,kCAAkC;AAAA,EACvG,CAAC,wCAAwC,qBAAqB,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMpE;AAAA,EACF,CAAC,wCAAwC,oBAAoB,UAAU,IAAI;AAAA,EAC3E,CAAC,wCAAwC,wBAAwB,WAAW,0CAA0C;AAAA,EACtH,CAAC,wCAAwC,cAAc,8BAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkBnF;AAAA,EACF,CAAC,wCAAwC,iBAAiB,UAAU,uEAAuE;AAAA,EAC3I,CAAC,wCAAwC,wBAAwB,WAAW,mBAAmB;AAAA,EAC/F,CAAC,wCAAwC,2BAA2B,gBAAgB,mBAAmB;AAAA,EACvG,CAAC,wCAAwC,uBAAuB,gBAAgB,IAAI;AAAA,EACpF,CAAC,wCAAwC,0BAA0B,qBAAqB,IAAI;AAAA,EAC5F,CAAC,wCAAwC,eAAe,aAAa,6CAA6C;AACtH;AACA,MAAM,UAAmC,OAAO,YAAY,eAAe,IAAI,CAAC,gBAAoE,CAAC,YAAY,CAAC,GAAG,IAAI,OAAO,GAAG,WAAW,CAAC,CAAC,CAAC;AAEjM,SAAS,wBAAwB,MAAkB,cAAuC,IAAI;AAC5F,QAAM,WAAW,KAAK;AAGtB,MAAI,YAAY,aAAa;AACpB,WAAA,QAAQ,YAAY,QAAQ,CAAC;AAAA,EAAA;AAGtC,MAAI,aAAa,YAAY;AAC3B,UAAM,MAAM,wCAAwC;AAAA,EAAA,WAC3C,aAAa,UAAU;AAChC,WAAO,QAAQ,eAAe;AAAA,EAAA,WACrB,aAAa,UAAU;AAChC,WAAO,QAAQ,aAAa;AAAA,EAAA,WACnB,aAAa,WAAW;AACjC,WAAO,QAAQ,uBAAuB;AAAA,EAAA,WAC7B,aAAa,gBAAgB;AACtC,WAAO,QAAQ,4BAA4B;AAAA,EAAA,WAClC,aAAa,gBAAgB;AACtC,WAAO,QAAQ,sBAAsB;AAAA,EAAA,WAC5B,aAAa,qBAAqB;AAC3C,WAAO,QAAQ,2BAA2B;AAAA,EAAA,WACjC,aAAa,8BAA8B;AACpD,WAAO,QAAQ,4BAA4B;AAAA,EAAA,WAClC,aAAa,WAAW;AACjC,WAAO,QAAQ,eAAe;AAAA,EAAA,WACrB,aAAa,QAAQ;AAC9B,WAAO,QAAQ,mBAAmB;AAAA,EAAA,OAC7B;AACC,UAAA,MAAM,yBAAyB,QAAQ,0DAA0D;AAAA,EAAA;AAE3G;AC9FA,MAAM,wBAAyE;AAAA,EAK7E,YAAY,UAAoC;AAJhD;AACA;AACA;AAGE,SAAK,kBAAkB,SAAS;AAChC,SAAK,aAAa,SAAS;AAC3B,SAAK,YAAY,SAAS;AAAA,EAAA;AAE9B;AAEA,MAAM,wBAAyE;AAAA,EAG7E,YAAY,UAAoC;AAFhD;AAGE,SAAK,gBAAgB,SAAS;AAAA,EAAA;AAElC;AAEA,MAAM,uBAAuE;AAAA,EAY3E,YAAY,UAAmC;AAX/C;AACA;AAWE,SAAK,cAAc,SAAS;AAC5B,SAAK,UAAU,SAAS;AACxB,QAAI,KAAK,SAAS;AAChB,WAAK,UAAU,KAAK,QAAQ,IAAI,CAAO,QAAA;AACjC,YAAA,EAAE,eAAe,oBAAoB;AAChC,iBAAA,IAAI,kBAAkB,GAAG;AAAA,QAAA;AAE3B,eAAA;AAAA,MAAA,CACR;AAAA,IAAA;AAAA,EACH;AAAA,EAlBF,cAAc;AACZ,WAAO,KAAK,QAAQ,KAAK,CAAA,WAAU,OAAO,QAAQ;AAAA,EAAA;AAAA,EAGpD,YAAY,IAAY;AACtB,WAAO,KAAK,QAAQ,KAAK,CAAU,WAAA,OAAO,MAAM,EAAE;AAAA,EAAA;AAetD;AAEA,MAAM,qBAAN,MAAM,mBAAkB;AAAA,EAItB,YAAY,QAAqD,QAAW;AAF5E;AAGE,QAAI,CAAC,OAAO;AACF,cAAA,mBAAkB,UAAU,oBAAI,IAAI;AAAA,IAAA;AAE9C,SAAK,QAAQ;AAAA,EAAA;AAAA,EAGf,SAAS,MAAkB;AACzB,QAAI,KAAK,MAAM,IAAI,KAAK,MAAM,GAAG;AAC/B,aAAO,KAAK,MAAM,IAAI,KAAK,MAAM;AAAA,IAAA;AAEnC,QAAIC,cAAa;AACjB,YAAQ,KAAK,UAAU;AAAA,MACrB,KAAK;AAEU,QAAAA,cAAA,IAAI,wBAAwB,KAAK,MAAM;AACpD;AAAA,MACF,KAAK;AAAA,MACL,KAAK;AAEU,QAAAA,cAAA,IAAI,uBAAuB,KAAK,MAAM;AACnD;AAAA,IACF;AAEF,SAAK,MAAM,IAAI,KAAK,QAAQA,WAAU;AAC/B,WAAAA;AAAA,EAAA;AAEX;AA9BE,cADI,oBACG;AADT,IAAM,oBAAN;AAiCA,MAAM,oBAAoB,IAAI,kBAAkB;;;;;;;;ACnEhD,MAAM,mBAAmB;AAEzB,MAAM,YAAY;AAAA,EAAlB;AACE;AAAA;AACF;AACA,MAAM,cAAc,IAAI,YAAY;AAEpC,SAAS,iBAAiB,QAAgB,KAAU;AACX;AAC7B,YAAA,MAAM,QAAQ,GAAG;AACe;AAChC,YAAA;AAAA,IAAA;AAAA,EACR;AAEJ;AAEA,MAAM,UAA8B;AAAA,EAOlC,YACE,QACA,eACA,SACA,OACA;AAXF;AACA;AACA;AACA;AACA;AAQE,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,YAAY;AAAA,EAAA;AAAA,EAGnB,MAAM,IAAI,KAAa;AACd,WAAA,KAAK,SAAS,KAAK,KAAK,OAAO,IAAI,GAAG,GAAG,IAAI;AAAA,EAAA;AAAA,EAGtD,IAAI,KAAa,OAAY;AACtB,SAAA,OAAO,IAAI,KAAK,KAAK;AAAA,EAAA;AAAA,EAG5B,MAAM,IAAI,KAAa;AACf,UAAA,KAAK,SAAS,KAAK,IAAI;AACtB,WAAA,KAAK,OAAO,IAAI,GAAG;AAAA,EAAA;AAAA,EAG5B,MAAM,SAAS,KAAa,OAAY,MAAM,aAAsB,OAAO;AACzE,QAAI,SAAc,KAAK,OAAO,IAAI,GAAG;AACjC,QAAA,MAAM,QAAQ,MAAM,GAAG;AAClB,aAAA;AAAA,IAAA;AAET,UAAM,OAAO,KAAK,QAAQ,MAAM,sBAAsB,EAAE,IAAI,GAAG;AAE/D,aAAS,MAAM;AAEf,QAAI,CAAC,MAAM;AACH,YAAA,MAAM,YAAY,GAAG,4BAA4B;AAAA,IAAA;AAEnD,UAAA,cAAc,KAAK,gBAAgB;AACzC,UAAM,UAAU,OAAO,MAAM,KAAK,SAAS,IAAI,WAAW,IAAI;AAW9D,QAAI,YAAY,OAAO;AAGrB,YAAM,KAAK;AACP,UAAA,KAAK,QAAQ,UAAU;AAEzB,cAAMC,QAAO,KAAK,QAAQ,MAAM,sBAAsB,EAAE,IAAI,GAAG;AAC/D,YAAIA,UAAS,QAAW;AAChB,gBAAA;AAAA,YACJ;AAAA,UACF;AAAA,QAAA;AAEI,cAAA,SAAS,IAAI,IAAI,CAAC,GAAG,KAAK,OAAO,QAAQ,CAAC,CAAC;AACjD,cAAMC,WAAyC,IAAI,QAAQ,CAAC,YAAY;AACrE,iBAAO,KAAK,QACV;AAAA,YACC;AAAA,YACA,KAAK;AAAA,YACL;AAAA,YACA,KAAK,QAAQ,MAAM,eAAe;AAAA,YAClC,KAAK,QAAQ,MAAM,oBAAoB;AAAA,YACvC,KAAK,QAAQ,MAAM,SAAS;AAAA,YAC5B;AAAA,YACA,KAAK;AAAA,YACL;AAAA,UAAA,EACA,KAAK,OAAO,CAAC,QAAQ,MAAM;AAC3B,gBAAI,WAAW;AACT,kBAAA,eAAe,CAAC,GAAW,kBAAuB;AACtD,kBAAI,QAAQ,GAAG;AAGF,2BAAA;AAAA,cAAA;AAOb,kBAAI,kBAAkB,OAAO;AACtB,qBAAA,OAAO,IAAI,GAAG,aAAa;AAAA,cAAA;AAAA,YAEpC;AACA,mBAAO,QAAQ,IAAI,CAAC,GAAG,SAAS,SAAS,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,MAAM;AAC7D,kBAAI,iBAAiB,SAAS;AAC5B,uBAAO,MAAM,KAAK,CAAC,kBAAuB,aAAa,GAAG,aAAa,CAAC;AAAA,cAAA;AAE1E,2BAAa,GAAG,KAAK;AAAA,YAAA,CACtB,CAAC,EAAE,KAAK,MAAM;AACb,sBAAQ,QAAQ;AAAA,YAAA,CACjB;AAAA,UAAA,CACF;AAAA,QAAA,CACJ;AAED,aAAK,YAAYA;AAEZ,aAAA,SAAS,IAAI,aAAaA,QAAO;AAEjC,aAAA,OAAO,IAAI,KAAKA,QAAO;AACtBA,cAAAA;AACD,aAAA,SAAS,IAAI,aAAa,IAAI;AAAA,MAAA,OAC9B;AACA,aAAA,OAAO,OAAO,GAAG;AAAA,MAAA;AAExB,eAAS,MAAM,KAAK,OAAO,IAAI,GAAG;AAAA,IAAA;AAEpC,aAAS,MAAM;AACX,QAAA,WAAW,UAAa,WAAW,OAAO;AAC5C,UAAI,YAAY;AACR,cAAA,MAAM,aAAa,GAAG,EAAE;AAAA,MAAA,OACzB;AACE,eAAA;AAAA,MAAA;AAAA,IACT;AAEK,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,WAAW,KAAa,OAAY;AACxC,UAAM,WAAW,MAAM,KAAK,SAAS,KAAK,OAAO,KAAK;AACjD,SAAA,OAAO,IAAI,KAAK,QAAQ;AACtB,WAAA;AAAA,EAAA;AAEX;AAEA,MAAM,sBAAoD;AAAA,EAMxD,YAAY,EAAC,MAAM,KAAyE;AAJ5F,oCAAmB;AACnB;AACA;AAGO,SAAA,IAAI,EAAE,IAAI,CAAY,aAAA;AACzB,UAAI,oBAAoB,wBAAwB;AACvC,eAAA;AAAA,iBACE,UAAU;AACZ,eAAA,IAAI,uBAAuB,QAAQ;AAAA,MAAA;AAErC,aAAA;AAAA,IACR,CAAA,EAAE,OAAO,CAAA,SAAQ,SAAS,IAAI;AAC1B,SAAA,OAAO,QAAQ,CAAC;AAAA,EAAA;AAEzB;AAEA,MAAM,uBAAqD;AAAA,EAQzD,YAAY,EAAC,MAAM,IAAI,OAAO,aAAyG;AANvI,oCAAmB;AACnB;AACA;AACA;AACA;AAGE,SAAK,KAAK;AACV,SAAK,QAAQ;AACb,SAAK,YAAY;AACZ,SAAA,OAAO,QAAQ,CAAC;AAAA,EAAA;AAEzB;AAEA,MAAM,+BAA6D;AAAA,EAMjE,YAAY,EAAC,MAAM,KAA6E;AAJhG,oCAAmB;AACnB;AACA;AAGO,SAAA,IAAI,EAAE,IAAI,CAAY,aAAA;AACzB,UAAI,oBAAoB,4BAA4B;AAC3C,eAAA;AAAA,MAAA;AAEF,aAAA,IAAI,2BAA2B,QAAQ;AAAA,IAAA,CAC/C;AACI,SAAA,OAAO,QAAQ,CAAC;AAAA,EAAA;AAEzB;AAEA,MAAM,2BAAyD;AAAA,EAS7D,YAAY,EAAC,MAAM,IAAI,MAAM,SAAS,SAAiH;AAPvJ,oCAAmB;AACnB;AACA;AACA;AACA;AACA;AAGE,SAAK,KAAK;AACV,SAAK,OAAO;AACZ,SAAK,UAAU;AACV,SAAA,OAAO,QAAQ,CAAC;AAChB,SAAA,QAAQ,KAAK,KAAK,SAAS;AAAA,EAAA;AAEpC;AAEA,MAAM,sCAAsC,MAA4B;AAAA,EAAxE;AAAA;AACE;AACA;AAEA,yCAAgB,MAAO,KAAK,iBAAiB,KAAK,eAAe,kBAAkB;AACnF,8CAAqB,MAAO,KAAK,iBAAiB,KAAK,eAAe,uBAAuB;AAC7F,kCAAoE;AAAA;AAAA,EAEpE,MAAM,UAAU;AACR,UAAA,QAAQ,MAAM,KAAK;AAClB,WAAA,QAAQ,MAAM,IAAI,CAAC,MAAO,IAAI,EAAE,QAAA,IAAY,IAAK,IAAI;AAAA,EAAA;AAAA,EAG9D,MAAM,eAAe,SAA2D;AAC9E,WAAO,IAAI,+BAA+B;AAAA,MACxC,MAAM,UAAU,MAAM,QAAQ,IAAI,IAAI;AAAA,MACtC,GAAG,MAAM,QAAQ,IAAI,CAAC,GAAG,KAAK,QAAQ,EAAE,IAAI,OAAO,gBAAyD;AAC1G,cAAM,OAAO,MAAM;AACZ,eAAA,MAAM,KAAK,eAAe,OAAO;AAAA,MAAA,CACzC,CAAC;AAAA,IAAA,CACH;AAAA,EAAA;AAAA,EAGH,aAAa,SACX,MACA,MACA,OACA,aAAoD,MACL;AAC/C,UAAM,SAAS,KAAK;AAChB,QAAA;AACJ,QAAI,MAAM;AACR,UAAI,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG;AACrB,aAAA,KAAK,IAAI,QAAQ,IAAI;AAAA,MAAA;AAE5B,UAAI,UAAU,MAAM;AAClB,aAAK,KAAK,IAAI,QAAQ,CAAA,CAAE;AACxB,YAAI,CAAC,MAAM,QAAQ,KAAK,GAAG;AACnB,gBAAA;AAAA,YACJ,sDAAsD,MAAM,yBAAyB,KAAK,UAAU,KAAK,CAAC;AAAA,UAC5G;AAAA,QAAA;AAEF,cAAM,MAAM,IAAI,CAAC,GAAG,MAAM;AACxB,cAAI,aAAa,2BAA2B;AACnC,mBAAA;AAAA,UAAA;AAET,iBAAO,0BAA0B,SAAS,MAAM,MAAM,GAAG,cAAc,WAAW,EAAE,CAAC,IAAI,WAAW,EAAE,CAAC,IAAI,IAAI;AAAA,QAAA,CAChH;AACO,gBAAA;AAAA,UACN,IAAI,IAAI,OAAO,MAAM;AACnB,kBAAM,IAAI,MAAM;AACT,mBAAA,KAAK,MAAM,GAAG,KAAK;AAAA,UAC3B,CAAA;AAAA,QAAA,EACD,KAAK,CAAC,QAAQ;AACd,eAAK,KAAK,IAAI,QAAQ,IAAI,IAAI,CAAM,OAAA;AAC3B,mBAAA;AAAA,cACL,YAAY;AAAA,YACd;AAAA,UAAA,CACD,CAAC;AACK,iBAAA;AAAA,QAAA,CACR;AACO,gBAAA;AAAA,MAAA;AAAA,IACV,OACK;AACL,cAAQ,CAAC;AAAA,IAAA;AAGP,QAAA,CAAC,QAAQ,CAAC,OAAO;AACZ,aAAA;AAAA,IAAA;AAET,UAAM,MAAM,IAAI,8BAA8B,GAAG,KAAK;AAC/C,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,eAAe;AACnB,WAAO,KAAK,SAAS,MAAM,KAAK,SAAS;AAAA,EAAA;AAE7C;AAWG,YAAO;AATV,MAAM,6BAAN,MAAM,2BAAkF;AAAA,EAuHtF,YACE,IACA,cACA,wBAGA,YACA;AA5HF;AACA;AACA;AACA;AACA,wCAAkD;AAClD;AACA;AACA,wBAAC;AAED;AAoHE,SAAK,KAAK;AAGV,SAAK,IAAI,yBAAyB,uBAAuB,IAAI,IAAI;AACjE,SAAK,KAAK;AACV,QAAI,sBAAsB,4BAA4B;AACpD,WAAK,eAAe;AAAA,IAAA;AAGf,WAAA,IAAI,MAAM,MAAM;AAAA;AAAA;AAAA;AAAA,MAIrB,KAAK,OAAO,QAAyC,KAAK,UAA4B;AACpF,cAAM,IAAY,OAAO,QAAQ,WAAW,IAAI,eAAe,KAAK;AACpE,YAAI,OAAO,QAAQ;AACjB,iBAAO,GAAG,IAAI;AAAA,QAAA,WACL,KAAK,UAAU,EAAE,WAAW,IAAI,GAAG;AAC5C,iBAAO,CAAC,IAAI;AAAA,QAAA,OACP;AACD,cAAA,CAAC,OAAO,GAAG;AACb,kBAAM,KAAK,SAAS;AAChB,gBAAA,CAAC,OAAO,GAAG;AACb,oBAAM,MAAM,6BAA6B;AAAA,YAAA;AAAA,UAC3C;AAEK,iBAAA,EAAE,gBAAgB,GAAG,KAAK;AAAA,QAAA;AAE5B,eAAA;AAAA,MACT;AAAA,MACA,KAAK,CAAC,QAAyC,QAAQ;AACrD,cAAM,IAAY,OAAO,QAAQ,WAAW,IAAI,eAAe,KAAK;AACpE,YAAI,OAAO,QAAQ;AACjB,iBAAO,OAAO,GAAG;AAAA,QAAA,WACR,KAAK,UAAU,EAAE,WAAW,IAAI,GAAG;AAC5C,iBAAO,OAAO,CAAC;AAAA,QAAA;AAEV,eAAA,IAAI,YAAY,OAAO,YAAY;AACpC,cAAA,CAAC,OAAO,GAAG;AACb,kBAAM,KAAK,SAAS;AAChB,gBAAA,CAAC,OAAO,GAAG;AACb,oBAAM,MAAM,6BAA6B;AAAA,YAAA;AAAA,UAC3C;AAEF,iBAAO,OAAO,EAAE,gBAAgB,CAAC,EAAE,KAAK,CAAC,MAAM;AAC7C,mBAAO,QAAQ,CAAC;AAAA,UAAA,CACjB;AAAA,QAAA,CACF;AAAA,MAAA;AAAA,IACH,CACD;AAAA,EAAA;AAAA,EAnKH,WAAmB;AACb,QAAA,CAAC,KAAK,IAAI;AACL,aAAA,aAAa,KAAK,EAAE;AAAA,IAAA;AAEtB,WAAA,IAAI,KAAK,GAAG,KAAK,cAAc,IAAI,KAAK,MAAM,GAAG;AAAA,EAAA;AAAA,EAG1D,MAAM,MAAM,KAA2C;AAGjD,QAAA,CAAC,KAAK,GAAG;AACJ,aAAA;AAAA,IAAA;AAED,YAAA,MAAM,KAAK,EAAE,sBAA0B,oBAAA,IAAA,GAAO,MAAM,GAAG;AAAA,EAAA;AAAA,EAGjE,MAAM,eAA4C;AACzC,WAAA;AAAA,MACL,YAAY,KAAK;AAAA,IACnB;AAAA,EAAA;AAAA,EAGF,MAAM,eAAe,SAAuD;AAEtE,QAAA;AACA,QAAA,CAAC,KAAK,IAAI;AACZ,UAAI,KAAK,cAAc;AACrB,eAAO,KAAK;AAAA,MAAA,OACP;AACL,SAAA,EAAG,OAAO,IAAI,MAAM,KAAK,SAAS;AAAA,MAAA;AAAA,IACpC,OACK;AACL,gBAAU,KAAK;AAAA,IAAA;AAEZ,SAAA,eAAe,IAAI,2BAA2B;AAAA,MACjD,MAAM,UAAU,MAAM,QAAQ,IAAI,IAAI;AAAA,MACtC,IAAI,KAAK;AAAA,MACT,MAAM,QAAQ,KAAK;AAAA,MACnB,SAAS,QAAQ,KAAK;AAAA,MACtB,OAAO;AAAA,IAAA,CACR;AACD,WAAO,KAAK;AAAA,EAAA;AAAA,EAGd,MAAM,QAAQ,UAAiB,OAAO;AAChC,QAAA;AACA,QAAA,CAAC,WAAW,KAAK,cAAc;AACtB,iBAAA;AAAA,QACT,MAAM,KAAK,aAAa;AAAA,QACxB,SAAS,KAAK,aAAa;AAAA,QAC3B,IAAI,KAAK,aAAa;AAAA,QACtB,OAAO,KAAK,aAAa,SAAS;AAAA,QAClC,MAAM,KAAK,aAAa,QAAQ;AAAA,QAChC,MAAM;AAAA,MACR;AAAA,IAAA,WACS,KAAK,IAAI;AACP,iBAAA;AAAA,QACT,MAAM,KAAK,GAAG,KAAK;AAAA,QACnB,SAAS,KAAK,GAAG,KAAK;AAAA,QACtB,IAAI,KAAK;AAAA,QACT,OAAO;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IAAA,OACK;AACM,iBAAA;AAAA,QACT,MAAM;AAAA,QACN,SAAS;AAAA,QACT,IAAI,KAAK;AAAA,QACT,OAAO;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IAAA;AAEI,UAAA,QAAQ,IAAI,wBAAwB,QAAQ;AAClD,QAAI,SAAS;AACP,UAAA,CAAC,KAAK,GAAG;AACX,cAAM,KAAK,SAAS;AAChB,YAAA,CAAC,KAAK,GAAG;AACX,gBAAM,MAAM,6BAA6B;AAAA,QAAA;AAAA,MAC3C;AAEF,YAAM,OAAO,MAAM,KAAK,EAAE,iBAAiB;AACrC,YAAA,OAAO,MAAM,KAAK,QAAQ;AAAA,IAAA;AAE3B,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,WAAmE;AACnE,QAAA;AACA,QAAA;AACJ,QAAI,YAAY,cAAc;AAC5B,YAAM,cAAc,MAAM,YAAY,aAAa,YAAY,KAAK,IAAI,IAAI;AAG5E,WAAK,YAAY;AAEjB,WAAK,YAAY;AAAA,IAAA,OACZ;AACL,YAAM,MAAM,+DAA+D;AAAA,IAAA;AAE7E,SAAK,IAAI;AACT,SAAK,KAAK;AACH,WAAA,CAAC,IAAI,EAAE;AAAA,EAAA;AAAA,EA+DhB,aAAa,SACX,MACA,MACA,OACA,YACgD;AAChD,UAAM,SAAS,KAAK;AACpB,QAAI,MAAqB;AACzB,QAAI,MAAM;AACR,UAAI,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG;AACrB,aAAA,KAAK,IAAI,QAAQ,IAAI;AAAA,MAAA;AAE5B,UAAI,UAAU,MAAM;AAClB,YAAI,CAAC,SAAS,EAAE,iBAAiB,mBAAmB,EAAE,iBAAiB,0BAA0B;AACzF,gBAAA;AAAA,QAAA,WACG,iBAAiB,SAAS;AAC5B,iBAAA,MAAM,KAAK,CAACC,WAAU;AAC3B,mBAAO,2BAA0B,SAAS,MAAM,MAAMA,QAAO,UAAU;AAAA,UAAA,CACxE;AAAA,QAAA,WACQ,OAAO,SAAS,UAAU;AACnC,cACE,kEAAkE;AAAA,YAChE;AAAA,UAAA,GAEF;AACM,kBAAA;AAAA,UAAA,OACD;AACC,kBAAA;AAAA,cACJ,wDAAwD,KAAK,KAAK,KAAK,KAAK;AAAA,YAC9E;AAAA,UAAA;AAAA,QAEO,WAAA,iBAAiB,UAAU,MAAM,YAAY;AACtD,gBAAM,MAAM;AAAA,QACH,WAAA,iBAAiB,SAAS,MAAM,SAAS,GAAI;AAClD,cAAA,MAAM,UAAU,GAAG;AACrB,mBAAO,2BAA0B,SAAS,MAAM,MAAM,MAAM,CAAC,GAAG,UAAU;AAAA,UAAA;AAAA,QAC5E,OACK;AACL,gBAAM,MAAM,gDAAgD;AAAA,QAAA;AAGzD,aAAA,KAAK,IAAI,QAAQ,MAAM,CAAC,EAAC,YAAY,KAAI,IAAI,IAAI;AAAA,MAAA;AAAA,IACxD;AAGE,QAAA,CAAC,QAAQ,CAAC,KAAK;AACV,aAAA;AAAA,IAAA;AAET,UAAM,MAAM,IAAI,2BAA0B,KAAK,MAAM,MAAM,UAAU;AAC9D,WAAA;AAAA,EAAA;AAEX;AAtOA,IAAM,4BAAN;AAwOA,MAAM,0BAA0B,MAA4B;AAAA,EAA5D;AAAA;AACE;AACA;AAEA,yCAAgB,MAAO,KAAK,iBAAiB,KAAK,eAAe,kBAAkB;AACnF,8CAAqB,MAAO,KAAK,iBAAiB,KAAK,eAAe,uBAAuB;AAC7F,kCAA2D;AAAA;AAAA,EAE3D,MAAM,UAAU;AACR,UAAA,QAAQ,MAAM,KAAK;AAClB,WAAA,QAAQ,MAAM,IAAI,CAAC,MAAO,IAAI,EAAE,QAAA,IAAY,IAAK,IAAI;AAAA,EAAA;AAAA,EAG9D,MAAM,iBAAgC;AAC7B,WAAA;AAAA,EAAA;AAAA,EAGT,aAAa,SACX,MACA,MACA,OAC4B;AAC5B,UAAM,SAAS,KAAK;AACpB,QAAI,MAAgF,CAAC;AACrF,QAAI,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG;AACrB,WAAA,KAAK,IAAI,QAAQ,IAAI;AAAA,IAAA;AAE5B,QAAI,UAAU,MAAM;AAClB,WAAK,KAAK,IAAI,QAAQ,CAAA,CAAE;AACxB,UAAI,CAAC,MAAM,QAAQ,KAAK,GAAG;AACnB,cAAA;AAAA,UACJ,kDAAkD,MAAM,yBAAyB,KAAK,UAAU,KAAK,CAAC;AAAA,QACxG;AAAA,MAAA;AAEI,YAAA,MAAM,IAAI,CAAC,MAAM;AACd,eAAA;AAAA,MAAA,CACR;AACD,cAAQ,IAAI,GAAG,EAAE,KAAK,CAAC,SAAS;AACtB,gBAAA;AAAA,UACN,KAAK,IAAI,OAAO,MAAM;AACpB,kBAAM,IAAI,MAAM;AAChB,mBAAO,KAAK,MAAM,EAAE,YAAY,KAAK;AAAA,UACtC,CAAA;AAAA,QAAA,EACD,KAAK,CAAC,QAAQ;AACT,eAAA,KAAK,IAAI,QAAQ,GAAG;AAAA,QAAA,CAC1B;AAAA,MAAA,CACF;AACO,cAAA;AAAA,IAAA,OACH;AACL,cAAQ,CAAC;AAAA,IAAA;AAGX,UAAM,MAAM,IAAI,kBAAkB,GAAG,KAAK;AACnC,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,eAAe;AACnB,WAAO,KAAK,SAAS,MAAM,KAAK,SAAS;AAAA,EAAA;AAE7C;AAEA,MAAM,6BAA6B,MAA4B;AAAA,EAA/D;AAAA;AACE;AACA;AAEA,yCAAgB,MAAO,KAAK,iBAAiB,KAAK,eAAe,kBAAkB;AACnF,8CAAqB,MAAO,KAAK,iBAAiB,KAAK,eAAe,uBAAuB;AAC7F,kCAA2D;AAAA;AAAA,EAE3D,MAAM,UAAU;AACR,UAAA,QAAQ,MAAM,KAAK;AAClB,WAAA,QAAQ,MAAM,IAAI,CAAC,MAAO,IAAI,EAAE,QAAA,IAAY,IAAK,IAAI;AAAA,EAAA;AAAA,EAG9D,MAAM,eAAe,SAAkD;AACrE,WAAO,IAAI,sBAAsB;AAAA,MAC/B,MAAM,UAAU,MAAM,QAAQ,IAAI,IAAI;AAAA,MACtC,IAAI,MAAM,QAAQ,IAAI,CAAC,GAAG,KAAK,QAAQ,EAAE,IAAI,OAAO,gBAAgD;AAClG,cAAM,OAAO,MAAM;AACnB,YAAI,MAAM;AACD,iBAAA,MAAM,KAAK,eAAe,OAAO;AAAA,QAAA;AAAA,MAE3C,CAAA,CAAC,GAAG,OAAO,CAAA,QAAO,QAAQ,MAAS;AAAA,IAAA,CACrC;AAAA,EAAA;AAAA,EAEH,aAAa,SACX,MACA,MACA,OACA,aAA2C,MACZ;AAC/B,UAAM,SAAS,KAAK;AACpB,QAAI,MAAgF,CAAC;AACrF,QAAI,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG;AACrB,WAAA,KAAK,IAAI,QAAQ,IAAI;AAAA,IAAA;AAE5B,QAAI,UAAU,MAAM;AAClB,WAAK,KAAK,IAAI,QAAQ,CAAA,CAAE;AACxB,UAAI,CAAC,MAAM,QAAQ,KAAK,GAAG;AACnB,cAAA;AAAA,UACJ,qDAAqD,MAAM,yBAAyB,KAAK,UAAU,KAAK,CAAC;AAAA,QAC3G;AAAA,MAAA;AAEF,YAAM,MAAM,IAAI,CAAC,GAAG,MAAM;AACxB,YAAI,aAAa,uBAAuB;AAC/B,iBAAA;AAAA,QAAA;AAET,eAAO,sBAAsB,SAAS,MAAM,MAAM,GAAG,cAAc,WAAW,EAAE,CAAC,IAAI,WAAW,EAAE,CAAC,IAAI,IAAI;AAAA,MAAA,CAC5G;AACD,cAAQ,IAAI,GAAG,EAAE,KAAK,CAAC,SAAS;AACtB,gBAAA;AAAA,UACN,KAAK,IAAI,OAAO,MAAM;AACpB,kBAAM,IAAI,MAAM;AAChB,mBAAO,KAAK,MAAM,EAAE,YAAY,KAAK;AAAA,UACtC,CAAA;AAAA,QAAA,EACD,KAAK,CAAC,QAAQ;AACT,eAAA,KAAK,IAAI,QAAQ,GAAG;AAAA,QAAA,CAC1B;AAAA,MAAA,CACF;AACO,cAAA;AAAA,IAAA,OACH;AACL,cAAQ,CAAC;AAAA,IAAA;AAGX,UAAM,MAAM,IAAI,qBAAqB,GAAG,KAAK;AACtC,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,eAAe;AACnB,WAAO,KAAK,SAAS,MAAM,KAAK,SAAS;AAAA,EAAA;AAE7C;AAEA,MAAM,iCAAiC,MAA4B;AAAA,EAAnE;AAAA;AACE;AACA;AAEA,yCAAgB,MAAO,KAAK,iBAAiB,KAAK,eAAe,kBAAkB;AACnF,8CAAqB,MAAO,KAAK,iBAAiB,KAAK,eAAe,uBAAuB;AAC7F,kCAA0D;AAAA;AAAA,EAE1D,MAAM,UAAU;AACR,UAAA,QAAQ,MAAM,KAAK;AAClB,WAAA,QAAQ,MAAM,IAAI,CAAC,MAAO,IAAI,EAAE,QAAA,IAAY,IAAK,IAAI;AAAA,EAAA;AAAA;AAAA,EAI9D,iBAAuB;AACd,WAAA;AAAA,EAAA;AAAA,EAGT,aAAa,SACX,MACA,MACA,OACmC;AACnC,UAAM,SAAS,KAAK;AAChB,QAAA;AACJ,QAAI,MAAM;AACR,UAAI,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG;AACrB,aAAA,KAAK,IAAI,QAAQ,IAAI;AAAA,MAAA;AAE5B,UAAI,UAAU,MAAM;AAClB,aAAK,KAAK,IAAI,QAAQ,CAAA,CAAE;AACxB,YAAI,CAAC,MAAM,QAAQ,KAAK,GAAG;AACnB,gBAAA;AAAA,YACJ,oDAAoD,MAAM,yBAAyB,KAAK,UAAU,KAAK,CAAC;AAAA,UAC1G;AAAA,QAAA;AAEI,cAAA,MAAM,IAAI,CAAC,MAAM;AACrB,cAAI,aAAa,sBAAsB;AAC9B,mBAAA;AAAA,UAAA;AAET,iBAAO,qBAAqB,SAAS,MAAM,MAAM,CAAC;AAAA,QAAA,CACnD;AACD,gBAAQ,IAAI,GAAG,EAAE,KAAK,OAAO,SAAS;AACpC,gBAAM,MAAM,QAAQ,IAAI,KAAK,IAAI,OAAMC,SAAOA,SAAQ,OAAOA,QAAO,MAAMA,KAAI,QAAQ,EAAE,CAAC;AACrF,cAAA,KAAK,CAAAC,SAAO;AACT,iBAAA,KAAK,IAAI,QAAQA,IAAG;AAAA,UAAA,CAC1B;AAAA,QAAA,CACF;AAAA,MAAA;AAAA,IACH,OACK;AACL,cAAQ,CAAC;AAAA,IAAA;AAGX,UAAM,MAAM,IAAI,yBAAyB,GAAG,KAAK;AAC1C,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,eAAe;AACb,UAAA,QAAQ,MAAM,KAAK;AACzB,WAAO,SAAS;AAAA,EAAA;AAEpB;AAIA,MAAM,6BAA6B,OAA6B;AAAA,EAS9D,YAAY,OAA0B;AAC9B,UAAA,MAAM,UAAU;AATxB;AACA;AAEA,yCAAgB,MAAO,KAAK,iBAAiB,KAAK,eAAe,kBAAkB;AACnF,8CAAqB,MAAO,KAAK,iBAAiB,KAAK,eAAe,uBAAuB;AAE7F;AAIE,SAAK,SAAS;AAAA,EAAA;AAAA,EAGhB,MAAM,UAAsC;AAC1C,WAAO,KAAK;AAAA,EAAA;AAAA;AAAA,EAId,iBAAuB;AACd,WAAA;AAAA,EAAA;AAAA,EAGT,WAA2D;AACzD,WAAO,KAAK;AAAA,EAAA;AAAA,EAGd,MAAM,KAAK,MAA2C;AACpD,YAAQ,MAAM,KAAK,QAAQ,KAAK,IAAI;AAAA,EAAA;AAAA,EAGtC,aAAa,SACX,MACA,MACA,OACsC;AACtC,UAAM,SAAS,KAAK;AACpB,QAAI,MAAgC;AACpC,QAAI,MAAM;AACR,UAAI,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG;AACrB,aAAA,KAAK,IAAI,QAAQ,IAAI;AAAA,MAAA;AAE5B,UAAI,UAAU,MAAM;AAClB,YAAI,CAAC,SAAS,EAAE,iBAAiB,oBAAoB;AAC7C,gBAAA;AAAA,QAAA,WACG,iBAAiB,SAAS;AAC5B,iBAAA,MAAM,KAAK,CAACF,WAAU;AAC3B,mBAAO,qBAAqB,SAAS,MAAM,MAAMA,MAAK;AAAA,UAAA,CACvD;AAAA,QAAA,WACQ,OAAO,SAAS,UAAU;AACnC,cACE,8EAA8E;AAAA,YAC5E;AAAA,UAAA,GAEF;AACM,kBAAA,SAAS,kBAAkB,SAAS,IAAI;AAC9C,gBAAI,CAAC,UAAU,EAAE,kBAAkB,yBAAyB;AAC1D,oBAAM,MAAM,gCAAgC,KAAK,MAAM,iBAAiB;AAAA,YAAA;AAEpE,kBAAA,OAAO,YAAY,KAAK,KAAK;AAAA,UAAA,OAC9B;AACC,kBAAA;AAAA,cACJ;AAAA,YACF;AAAA,UAAA;AAAA,QACF,OACK;AACL,gBAAM,MAAM,2CAA2C;AAAA,QAAA;AAGrD,YAAA,EAAE,eAAe,UAAU;AAC7B,eAAK,KAAK,IAAI,QAAQ,MAAM,IAAI,KAAK,IAAI;AAAA,QAAA;AAAA,MAC3C;AAAA,IACF;AAGE,QAAA,CAAC,QAAQ,CAAC,KAAK;AACV,aAAA;AAAA,IAAA;AAEH,UAAA,MAAM,IAAI,qBAAqB,GAAG;AACjC,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,eAAe;AACb,UAAA,QAAQ,MAAM,KAAK;AAClB,WAAA,QAAQ,MAAM,KAAK;AAAA,EAAA;AAE9B;AAEA,MAAM,8BAA8B,OAA6B;AAAA,EAS/D,YAAY,OAAoB;AAC9B,UAAM,MAAM,KAAK;AATnB;AACA;AAEA,yCAAgB,MAAO,KAAK,iBAAiB,KAAK,eAAe,kBAAkB;AACnF,8CAAqB,MAAO,KAAK,iBAAiB,KAAK,eAAe,uBAAuB;AAE7F;AAIE,SAAK,SAAS;AAAA,EAAA;AAAA,EAGhB,MAAM,UAAgC;AACpC,WAAO,KAAK;AAAA,EAAA;AAAA,EAGd,MAAM,eAAe,SAAmD;AAChE,UAAA,QAAQ,MAAM,KAAK;AACzB,WAAO,IAAI,uBAAuB;AAAA,MAChC,MAAM,UAAU,MAAM,QAAQ,IAAI,IAAI;AAAA,MACtC,IAAI,MAAM;AAAA,MACV,OAAO,MAAM;AAAA,MACb,WAAW,MAAM;AAAA,IAAA,CAClB;AAAA,EAAA;AAAA,EAGH,WAA+C;AAC7C,WAAO,KAAK;AAAA,EAAA;AAAA,EAGd,aAAa,SACX,MACA,MACA,OACA,YACuC;AjB13B3C,QAAAhB;AiB23BI,UAAM,SAAS,KAAK;AACd,UAAA,gBAAeA,MAAA,KAAK,WAAL,gBAAAA,IAAa;AAClC,QAAI,CAAC,cAAc;AACjB,YAAM,MAAM,QAAQ,KAAK,KAAK,KAAK,KAAK,MAAM,mCAAmC;AAAA,IAAA;AAEnF,QAAI,MAA0B;AAC9B,QAAI,MAAM;AACR,UAAI,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG;AACrB,aAAA,KAAK,IAAI,QAAQ,IAAI;AAAA,MAAA;AAE5B,UAAI,UAAU,MAAM;AAClB,YAAI,iBAAiB,eAAe;AAClC,cAAI,MAAM,cAAc;AACtB,kBAAM,MAAM,aAAa;AAAA,UAAA,OACpB;AACL,kBAAM,MAAM,gEAAgE;AAAA,UAAA;AAAA,QAC9E;AAEF,YAAI,CAAC,OAAO;AACJ,gBAAA;AAAA,QAAA,WACG,iBAAiB,YAAa;AAAA,iBAE9B,iBAAiB,SAAS;AAC5B,iBAAA,MAAM,KAAK,CAACgB,WAAU;AAC3B,mBAAO,sBAAsB,SAAS,MAAM,MAAMA,QAAO,UAAU;AAAA,UAAA,CACpE;AAAA,QAAA,WACQ,OAAO,SAAS,UAAU;AACnC,cACE,kEAAkE;AAAA,YAChE;AAAA,UAAA,GAEF;AACA,gBAAI,YAAY;AACd,oBAAM,IAAI,YAAY;AAAA,gBACpB,IAAI,WAAW;AAAA,gBACf,OAAO,WAAW;AAAA,gBAClB,WAAW;AAAA,gBACX,aAAa,WAAW;AAAA,cAAA,GACvB,WAAW,SAAS;AAChB,qBAAA,IAAI,sBAAsB,GAAG;AAAA,YAAA,OAC/B;AACC,oBAAA,aAAa,IAAI,mBAAmB,YAAY;AAC/C,qBAAA,WAAW,KAAK,CAACG,gBAAe;AACjC,oBAAA,CAACA,YAAW,iBAAiB;AAC/B,wBAAM,MAAM,cAAcA,YAAW,EAAE,0DAA0D;AAAA,gBAAA;AAE7FF,sBAAAA,OAAME,YAAW,gBAAgB,KAAK;AAE5C,oBAAI,CAACF,MAAK;AACR,0BAAQ,MAAM,oCAAoC,OAAO,OAAO,KAAK,OAAO,iBAAiB,YAAY;AAAA,gBAAA;AAG3G,qBAAK,KAAK,IAAI,QAAQA,OAAMA,KAAI,KAAK,IAAI;AAErC,oBAAA,CAAC,QAAQ,CAACA,MAAK;AACV,yBAAA;AAAA,gBAAA;AAEHG,sBAAAA,OAAM,IAAI,sBAAsBH,IAAG;AAElCG,uBAAAA;AAAAA,cAAA,CACR;AAAA,YAAA;AAAA,UACH,OACK;AACC,kBAAA;AAAA,cACJ,4DAA4D,KAAK;AAAA,YACnE;AAAA,UAAA;AAAA,QACF,OACK;AACL,gBAAM,MAAM,sCAAsC;AAAA,QAAA;AAGhD,YAAA,EAAE,eAAe,UAAU;AAC7B,cAAI,CAAC,KAAK;AACR,oBAAQ,MAAM,oCAAoC,OAAO,OAAO,KAAK,OAAO,iBAAiB,YAAY;AAAA,UAAA;AAG3G,eAAK,KAAK,IAAI,QAAQ,MAAM,IAAI,KAAK,IAAI;AAAA,QAAA;AAAA,MAC3C;AAAA,IACF;AAGE,QAAA,CAAC,QAAQ,CAAC,KAAK;AACV,aAAA;AAAA,IAAA;AAEH,UAAA,MAAM,IAAI,sBAAsB,GAAG;AAClC,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,eAAe;AACb,UAAA,QAAQ,MAAM,KAAK;AAClB,WAAA,QAAQ,MAAM,KAAK;AAAA,EAAA;AAE9B;AAEA,MAAM,sBAAsB,KAA2B;AAAA,EAarD,YAAY,KAAa;AACvB,UAAM,GAAG;AAbX;AACA;AACA;AACA;AAEA,yCAAgB,MAAO,KAAK,iBAAiB,KAAK,eAAe,kBAAkB;AACnF,8CAAqB,MAAO,KAAK,iBAAiB,KAAK,eAAe,uBAAuB;AAQ3F,SAAK,aAAa;AAAA,EAAA;AAAA,EANpB,iBAAuB;AACd,WAAA;AAAA,EAAA;AAAA,EAQT,OAAO,SACL,MACA,MACA,OACsD;AACtD,UAAM,SAAS,KAAK;AACpB,QAAI,iBAAiB,SAAS;AAC5B,aAAO,MAAM;AAAA,QAAK,CAACJ,WACjB,cAAc,SAAS,MAAM,MAAMA,MAAK;AAAA,MAC1C;AAAA,IAAA;AAEF,QAAI,MAAM;AACR,UAAI,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG;AACrB,aAAA,KAAK,IAAI,QAAQ,IAAI;AAAA,MAAA;AAE5B,UAAI,UAAU,MAAM;AACb,aAAA,KAAK,IAAI,QAAQ,KAAK;AAAA,MAAA;AAAA,IAC7B;AAGF,QAAI,MAA8C,KAAK,KAAK,IAAI,MAAM;AAGtE,QAAI,OAAO,OAAO,YAAY,IAAI,IAAI,MAAM,QAAW;AACrD,YAAM,IAAI;AAAA,IAAA;AAEZ,QAAI,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,UAAa,QAAQ,IAAI;AACrD,aAAA;AAAA,IAAA;AAEL,QAAA,OAAO,OAAO,UAAU;AAC1B,YAAM,MAAM,yBAAyB;AAAA,IAAA;AAEjC,UAAA,MAAM,IAAI,cAAc,GAAG;AAC1B,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,UAAU;AACV,QAAA;AACF,aAAO,KAAK,YAAY;AAAA,aACjB,GAAG;AACV,cAAQ,KAAK,CAAC;AACd,aAAO,KAAK;AAAA,IAAA;AAAA,EACd;AAAA,EAGF,eAAe;AACb,WAAO,KAAK,YAAY;AAAA,EAAA;AAE5B;AAOG,YAAO;AALV,MAAM,oBAAN,MAAM,kBAA2D;AAAA,EAgB/D,YAAY,UAAkC;AAd9C;AACA;AACA;AACA,wBAAC;AAED,yCAAgB,MAAO,KAAK,iBAAiB,KAAK,eAAe,kBAAkB;AACnF,8CAAqB,MAAO,KAAK,iBAAiB,KAAK,eAAe,uBAAuB;AAE7F;AAOE,SAAK,SAAS;AACP,WAAA,IAAI,MAAM,MAAM;AAAA,MACrB,KAAK,CAAC,QAA0B,QAAQ;AACtC,cAAM,IAAY,OAAO,QAAQ,WAAW,IAAI,eAAe,KAAK;AACpE,YAAI,OAAO,QAAQ;AACjB,iBAAO,OAAO,GAAG;AAAA,QAAA,WACR,KAAK,QAAQ;AACtB,iBAAO,OAAO,CAAC;AAAA,QAAA;AAEV,eAAA,KAAK,OAAO,CAAC;AAAA,MACtB;AAAA,MACA,KAAK,CAAC,QAA0B,KAAK,UAAU;AAC7C,cAAM,IAAY,OAAO,QAAQ,WAAW,IAAI,eAAe,KAAK;AACpE,YAAI,OAAO,QAAQ;AACjB,iBAAO,GAAG,IAAI;AAAA,QAAA,WACL,KAAK,QAAQ;AACtB,iBAAO,CAAC,IAAI;AAAA,QAAA,OACP;AACA,eAAA,OAAO,CAAC,IAAI;AAAA,QAAA;AAEZ,eAAA;AAAA,MAAA;AAAA,IACT,CACD;AAAA,EAAA;AAAA,EA3BH,iBAAuB;AACd,WAAA;AAAA,EAAA;AAAA,EA6BT,OAAO,SACL,MACA,MACA,OAC4D;AAC5D,UAAM,SAAS,KAAK;AACpB,QAAI,iBAAiB,SAAS;AAC5B,aAAO,MAAM;AAAA,QAAK,CAACA,WACjB,kBAAiB,SAAS,MAAM,MAAMA,MAAK;AAAA,MAC7C;AAAA,IAAA;AAEF,QAAI,MAAM;AACR,UAAI,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG;AACrB,aAAA,KAAK,IAAI,QAAQ,IAAI;AAAA,MAAA;AAE5B,UAAI,UAAU,MAAM;AACb,aAAA,KAAK,IAAI,QAAQ,KAAK;AAAA,MAAA;AAAA,IAC7B;AAGF,UAAM,MAAM,KAAK,KAAK,IAAI,MAAM;AAChC,QAAI,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAW;AACvC,aAAA;AAAA,IAAA;AAEL,QAAA,EAAE,eAAe,SAAS;AAC5B,YAAM,MAAM,iCAAiC;AAAA,IAAA;AAEzC,UAAA,MAAM,IAAI,kBAAiB,GAAG;AAC7B,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,UAAU;AACd,WAAO,MAAM,KAAK;AAAA,EAAA;AAAA,EAGpB,eAAe;AACb,WAAO,KAAK;AAAA,EAAA;AAEhB;AAhFA,IAAM,mBAAN;AAsFA,MAAM,sBAAsB,OAA6B;AAAA,EAAzD;AAAA;AACE;AACA;AAEA,yCAAgB,MAAO,KAAK,iBAAiB,KAAK,eAAe,kBAAkB;AACnF,8CAAqB,MAAO,KAAK,iBAAiB,KAAK,eAAe,uBAAuB;AAAA;AAAA,EAE7F,iBAAuB;AACd,WAAA;AAAA,EAAA;AAAA,EAGT,UAAkB;AAChB,WAAO,KAAK,SAAS;AAAA,EAAA;AAAA,EAGvB,OAAO,SACL,MACA,MACA,OACsD;AACtD,UAAM,SAAS,KAAK;AACpB,QAAI,iBAAiB,SAAS;AACrB,aAAA,MAAM,KAAK,CAACA,WAAU,cAAc,SAAS,MAAM,MAAMA,MAAK,CAAC;AAAA,IAAA;AAExE,QAAI,MAAM;AACR,UAAI,UAAU,MAAM;AACb,aAAA,KAAK,IAAI,QAAQ,KAAK;AAAA,MAAA;AAAA,IAC7B;AAGF,UAAM,MAAM,KAAK,KAAK,IAAI,MAAM;AAChC,QAAI,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAW;AACvC,aAAA;AAAA,IAAA;AAEH,UAAA,SAAS,IAAI,cAAc,GAAG;AAC7B,WAAA;AAAA,EAAA;AAAA,EAGT,eAAe;AACb,WAAO,GAAG,IAAI;AAAA,EAAA;AAElB;AAEA,MAAM,oCAAoC,OAA6B;AAAA,EAAvE;AAAA;AACE;AACA;AAEA,yCAAgB,MAAO,KAAK,iBAAiB,KAAK,eAAe,kBAAkB;AACnF,8CAAqB,MAAO,KAAK,iBAAiB,KAAK,eAAe,uBAAuB;AAAA;AAAA,EAE7F,iBAAuB;AACd,WAAA;AAAA,EAAA;AAAA,EAGT,UAAkB;AAChB,WAAO,KAAK,SAAS;AAAA,EAAA;AAAA,EAGvB,OAAO,SACL,MACA,MACA,OACkF;AAClF,UAAM,SAAS,KAAK;AACpB,QAAI,iBAAiB,SAAS;AACrB,aAAA,MAAM,KAAK,CAACA,WAAU,4BAA4B,SAAS,MAAM,MAAMA,MAAK,CAAC;AAAA,IAAA;AAEtF,QAAI,MAAM;AACR,UAAI,UAAU,MAAM;AACb,aAAA,KAAK,IAAI,QAAQ,KAAK;AAAA,MAAA;AAAA,IAC7B;AAGF,UAAM,MAAM,KAAK,KAAK,IAAI,MAAM;AAChC,QAAI,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAW;AACvC,aAAA;AAAA,IAAA;AAEH,UAAA,SAAS,IAAI,4BAA4B,GAAG;AAC3C,WAAA;AAAA,EAAA;AAAA,EAGT,eAAe;AACb,WAAO,GAAG,IAAI;AAAA,EAAA;AAElB;AAEA,MAAM,wBAAwB,OAA6B;AAAA,EAA3D;AAAA;AACE;AACA;AAEA,yCAAgB,MAAO,KAAK,iBAAiB,KAAK,eAAe,kBAAkB;AACnF,8CAAqB,MAAO,KAAK,iBAAiB,KAAK,eAAe,uBAAuB;AAAA;AAAA,EAE7F,WAAmB;AACV,WAAA,GAAG,KAAK,QAAA,CAAS;AAAA,EAAA;AAAA,EAG1B,iBAAuB;AACd,WAAA;AAAA,EAAA;AAAA,EAGT,UAAkB;AAChB,WAAO,KAAK,QAAQ;AAAA,EAAA;AAAA,EAGtB,OAAO,SACL,MACA,MACA,OAC0D;AAC1D,UAAM,SAAS,KAAK;AACpB,QAAI,iBAAiB,SAAS;AACrB,aAAA,MAAM,KAAK,CAACA,WAAU,gBAAgB,SAAS,MAAM,MAAMA,MAAK,CAAC;AAAA,IAAA;AAE1E,QAAI,MAAM;AACR,UAAI,UAAU,MAAM;AACb,aAAA,KAAK,IAAI,QAAQ,KAAK;AAAA,MAAA;AAAA,IAC7B;AAGF,UAAM,MAAM,KAAK,KAAK,IAAI,MAAM;AAChC,QAAI,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAW;AACvC,aAAA;AAAA,IAAA;AAEH,UAAA,MAAM,IAAI,gBAAgB,GAAG;AAC5B,WAAA;AAAA,EAAA;AAAA,EAGT,eAAe;AACb,WAAO,KAAK,QAAQ;AAAA,EAAA;AAExB;AAGA,MAAM,yBAAyB,QAA8B;AAAA,EAQ3D,YAAY,OAAgB,QAAiC;AAC3D,UAAM,KAAK;AARb;AACA;AACA;AAEA,yCAAgB,MAAO,KAAK,iBAAiB,KAAK,eAAe,kBAAkB;AACnF,8CAAqB,MAAO,KAAK,iBAAiB,KAAK,eAAe,uBAAuB;AAI3F,SAAK,WAAW;AAAA,EAAA;AAAA,EAGlB,SAAS,MAAmC;AAC1C,UAAM,YAAY,QAAQ;AACnB,WAAA,KAAK,YACV,KAAK,YAAY,KAAK,SAAS,YAAY,KAAK,SAAS,UAAU,SAAS,KAAK,SAAS,SAE1F,KAAK,YAAY,KAAK,SAAS,YAAY,KAAK,SAAS,WAAW,SAAS,KAAK,UAAU;AAAA,EAAA;AAAA,EAIhG,iBAAuB;AACd,WAAA;AAAA,EAAA;AAAA,EAGT,UAAmB;AACjB,WAAO,KAAK,QAAQ;AAAA,EAAA;AAAA,EAGtB,OAAO,SACL,MACA,MACA,OAC4D;AAC5D,UAAM,SAAS,KAAK;AACpB,QAAI,iBAAiB,SAAS;AACrB,aAAA,MAAM,KAAK,CAACA,WAAU,iBAAiB,SAAS,MAAM,MAAMA,MAAK,CAAC;AAAA,IAAA;AAE3E,QAAI,MAAM;AACR,UAAI,UAAU,MAAM;AACb,aAAA,KAAK,IAAI,QAAQ,KAAK;AAAA,MAAA;AAAA,IAC7B;AAGF,UAAM,MAAM,KAAK,KAAK,IAAI,MAAM;AAChC,QAAI,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAW;AACvC,aAAA;AAAA,IAAA;AAEH,UAAA,SAAS,kBAAkB,SAAS,IAAI;AAC9C,QAAI,CAAC,UAAU,EAAE,kBAAkB,0BAA0B;AAC3D,YAAM,MAAM,iCAAiC,KAAK,MAAM,iBAAiB;AAAA,IAAA;AAE3E,QAAI,OAAO,QAAQ,aAAa,QAAQ,KAAK,QAAQ,GAAG;AAChD,YAAA,MAAM,wCAAwC,GAAG,aAAa;AAAA,IAAA;AAEtE,UAAM,OAAO,IAAI,iBAAiB,MAAM,OAAO,OAAO,MAAM;AACrD,WAAA;AAAA,EAAA;AAAA,EAGT,eAAe;AACb,WAAO,KAAK,QAAQ;AAAA,EAAA;AAExB;AAEA,MAAM,IAAI;AAAA,EAIR,YAAY,KAAa,WAAoB;AAH7C;AACA;AAGE,SAAK,MAAM;AACX,SAAK,YAAY;AAAA,EAAA;AAErB;AAEA,MAAM,qBAAqB,OAA6B;AAAA,EAatD,YAAY,OAAY;AAChB,UAAA,eAAe,MAAM,aAAa,MAAM;AAC9C,UAAM,YAAY;AAdpB;AACA;AAEA,yCAAgB,MAAO,KAAK,iBAAiB,KAAK,eAAe,kBAAkB;AACnF,8CAAqB,MAAO,KAAK,iBAAiB,KAAK,eAAe,uBAAuB;AAE7F;AASE,SAAK,SAAS;AAAA,EAAA;AAAA,EAPhB,iBAAuB;AACd,WAAA;AAAA,EAAA;AAAA,EAST,UAAmC;AAC1B,WAAA;AAAA,MACL,KAAK,KAAK,OAAO;AAAA,MACjB,WAAW,KAAK,OAAO,aAAa;AAAA,IACtC;AAAA,EAAA;AAAA,EAGF,QAAQ;AACN,WAAO,KAAK,OAAO,aAAa,KAAK,OAAO;AAAA,EAAA;AAAA,EAG9C,OAAO;AACL,WAAO,KAAK,OAAO;AAAA,EAAA;AAAA,EAGrB,OAAO,SACL,MACA,MACA,OACoD;AACpD,UAAM,SAAS,KAAK;AACpB,QAAI,iBAAiB,SAAS;AACrB,aAAA,MAAM,KAAK,CAACA,WAAU,aAAa,SAAS,MAAM,MAAMA,MAAK,CAAC;AAAA,IAAA;AAEvE,QAAI,MAAM;AACR,UAAI,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG;AAC1B,aAAK,KAAK,IAAI,QAAQ,CAAA,CAAE;AAAA,MAAA;AAE1B,UAAI,UAAU,MAAM;AAClB,YAAI,iBAAiB,cAAc;AACjC,kBAAQ,MAAM;AAAA,QAAA,WACL,iBAAiB,QAAQ;AAC9B,cAAA,CAAC,MAAM,KAAK;AACR,kBAAA,MAAM,6CAA6C,KAAK,EAAE;AAAA,UAAA;AAAA,QAClE;AAEG,aAAA,KAAK,IAAI,QAAQ;AAAA,UACpB,KAAK,MAAM;AAAA,UACX,WAAW,MAAM;AAAA,QAAA,CAClB;AAAA,MAAA;AAAA,IACH;AAGF,UAAM,MAAM,KAAK,KAAK,IAAI,MAAM;AAChC,QAAI,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAW;AACvC,aAAA;AAAA,IAAA;AAEL,QAAA;AACA,QAAA,OAAO,QAAQ,UAAU;AAC3B,YAAM,IAAI,IAAI,GAAG,GAAG,EAAE;AAAA,IAAA,WACb,eAAe,KAAK;AACvB,YAAA,IAAI,IAAI,IAAI,IAAI,KAAK,GAAG,IAAI,IAAI,WAAW,CAAC;AAAA,IAAA,WACzC,SAAS,OAAO,OAAO,QAAQ,YAAY,OAAO,IAAI,QAAQ,YAAY,eAAe,QAAQ,IAAI,cAAc,UAAa,OAAO,IAAI,cAAc,WAAW;AAC7K,YAAM,IAAI,IAAI,IAAI,KAAK,IAAI,SAAS;AAAA,IAAA,OAC/B;AACC,YAAA,MAAM,0BAA0B,GAAG,EAAE;AAAA,IAAA;AAEvC,UAAA,MAAM,IAAI,aAAa,GAAG;AACzB,WAAA;AAAA,EAAA;AAAA,EAGT,eAAe;AACb,WAAO,KAAK,QAAQ;AAAA,EAAA;AAExB;AAEA,MAAM,wBAAwB,OAA6B;AAAA,EAazD,YAAY,OAA8C,WAA0B,MAAM;AACxF,UAAM,OAAO,MAAM,IAAI,YAAY,gBAAgB;AAC/C,QAAA;AACJ,QAAI,MAAM;AACJ,UAAA,OAAO,QAAQ,UAAU;AACZ,uBAAA;AAAA,MAAA,OACV;AACL,uBAAe,KAAK;AAAA,MAAA;AAAA,IACtB,OACK;AAEU,qBAAA;AAAA,IAAA;AAEjB,UAAM,YAAY;AAzBpB;AACA;AAEA,yCAAgB,MAAO,KAAK,iBAAiB,KAAK,eAAe,kBAAkB;AACnF,8CAAqB,MAAO,KAAK,iBAAiB,KAAK,eAAe,uBAAuB;AAE7F;AAoBE,SAAK,SAAS;AAAA,EAAA;AAAA,EAlBhB,iBAAuB;AACd,WAAA;AAAA,EAAA;AAAA,EAoBT,UAAkB;AAChB,WAAO,GAAG,IAAI;AAAA,EAAA;AAAA,EAGhB,KAAK,UAAkB;AACrB,UAAM,MAAM,KAAK,OAAO,IAAI,QAAQ;AACpC,QAAI,KAAK;AACP,UAAI,eAAe,QAAQ;AACzB,eAAO,IAAI;AAAA,MAAA;AAEN,aAAA;AAAA,IAAA,OACF;AACE,aAAA;AAAA,IAAA;AAAA,EACT;AAAA,EAGF,OAAO,SACL,MACA,MACA,OAC0D;AAC1D,UAAM,SAAS,KAAK;AACpB,QAAI,iBAAiB,SAAS;AACrB,aAAA,MAAM,KAAK,CAACA,WAAU,gBAAgB,SAAS,MAAM,MAAMA,MAAK,CAAC;AAAA,IAAA;AAE1E,QAAI,MAAM;AACR,UAAI,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG;AAC1B,aAAK,KAAK,IAAI,QAAQ,CAAA,CAAE;AAAA,MAAA;AAE1B,UAAI,UAAU,MAAM;AAClB,YAAI,iBAAiB,QAAQ;AACrB,gBAAA,UACJ,iBAAiB,MAAM,MAAM,YAAY,OAAO,QAAQ,KAAK;AAC/D,qBAAW,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,OAAO,GAAG;AACjC,kBAAMC,OAAM,KAAK,KAAK,IAAI,MAAM;AAChC,gBAAIA,gBAAe,KAAK;AACtBA,mBAAI,IAAI,GAAG,CAAC;AAAA,YAAA,WACHA,gBAAe,QAAQ;AAEhCA,mBAAI,CAAC,IAAI;AAAA,YAAA,WACAA,SAAQ,MAAM;AACvB,oBAAM,MAAM,+BAA+B;AAAA,YAAA;AAAA,UAC7C;AAAA,QACF,OACK;AACA,eAAA,KAAK,IAAI,QAAQ;AAAA,YACpB,CAAC,gBAAgB,GAAG;AAAA,UAAA,CACrB;AAAA,QAAA;AAAA,MACH;AAAA,IACF;AAGF,UAAM,MAAM,KAAK,KAAK,IAAI,MAAM;AAChC,QAAI,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAW;AACvC,aAAA;AAAA,IAAA;AAEL,QAAA;AACJ,QAAI,eAAe,KAAK;AACb,eAAA;AAAA,IAAA,OACJ;AACL,eAAS,IAAI,IAAI,OAAO,QAAQ,GAAG,CAAC;AAAA,IAAA;AAEhC,UAAA,MAAM,IAAI,gBAAgB,MAAM;AAC/B,WAAA;AAAA,EAAA;AAAA,EAGT,eAAe;AACb,WAAO,KAAK;AAAA,EAAA;AAEhB;AAMG,YAAO;AAJV,MAAM,qBAAN,MAAM,mBAA4D;AAAA,EAiBhE,YACE,YACA,YACA,MACA,MACA;AApBF;AACA;AACA,wBAAC;AAED;AACA;AACA;AACA;AACA;AACA;AAYO,SAAA,oCAAoB,IAAiB;AAC1C,SAAK,eAAe;AACpB,SAAK,SAAS;AACd,SAAK,SAAS;AACd,SAAK,eAAe;AACb,WAAA,IAAI,MAAM,MAAM;AAAA,MACrB,KAAK,CAAC,QAAQ,KAAK,UAAU;AAC3B,cAAM,IAAY,OAAO,QAAQ,WAAW,IAAI,eAAe,KAAK;AACpE,YAAI,OAAO,QAAQ;AACjB,iBAAO,GAAG,IAAI;AAAA,QAAA,WACL,EAAE,WAAW,IAAI,KAAK,KAAK,QAAQ;AAC5C,iBAAO,CAAC,IAAI;AAAA,QAAA,OACP;AACE,iBAAA,MAAM,GAAG,KAAK;AAAA,QAAA;AAEhB,eAAA;AAAA,MACT;AAAA,MACA,KAAK,CAAC,QAAQ,QAAQ;AACpB,cAAM,IAAY,OAAO,QAAQ,WAAW,IAAI,eAAe,KAAK;AACpE,YAAI,OAAO,QAAQ;AACjB,iBAAO,OAAO,GAAG;AAAA,QAAA,WACR,EAAE,WAAW,IAAI,KAAK,KAAK,QAAQ;AAC5C,iBAAO,OAAO,CAAC;AAAA,QAAA;AAEjB,YAAI,KAAK,UAAU;AACjB,iBAAO,OAAO,aAAa;AAAA,QAAA;AAEtB,eAAA,IAAI,YAAY,CAAC,YAAY;AAClC,iBAAO,MAAM,CAAC,EAAE,KAAK,OAAO;AAAA,QAAA,CAC7B;AAAA,MAAA;AAAA,IACH,CACD;AAAA,EAAA;AAAA,EAzCH,iBAAuB;AACd,WAAA;AAAA,EAAA;AAAA,EA2CT,MAAM,WAA4B;AAChC,UAAM,UAAU,CAAC,GAAG,KAAK,cAAc,QAAS,CAAA,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;AAC9E,WAAO,KAAK,QAAQ,KAAK,GAAG,CAAC;AAAA,EAAA;AAAA,EAG/B,MAAM,WAAW;AACT,UAAA,UAAU,CAAC,IAAI,MAAM,KAAK,iBAAiB,GAAG,SAAS;AACtD,WAAA,OAAO,YAAY,MAAM,QAAQ,IAAI,QAAQ,IAAI,OAAO,CAAC,GAAG,EAAE,MAAM;AACvE,aAAO,CAAC,IAAI,MAAM,IAAI,UAAU;AAAA,IACnC,CAAA,CAAC,CAAC;AAAA,EAAA;AAAA,EAGL,MAAM,UAAU;AACd,mBAAe,SAAS,GAAgC;AACtD,UAAI,MAAM;AACV,UAAI,CAAC,GAAG;AACC,eAAA;AAAA,MAAA;AAEF,aAAA,MAAM,EAAE,QAAQ;AAAA,IAAA;AAEnB,UAAA,UAAU,CAAC,IAAI,MAAM,KAAK,iBAAiB,GAAG,SAAS;AACtD,WAAA,OAAO,YAAY,MAAM,QAAQ,IAAI,QAAQ,IAAI,OAAO,CAAC,GAAG,EAAE,MAAM;AACvE,aAAO,CAAC,GAAG,KAAK,MAAM,SAAS,EAAE,IAAI,EAAE;AAAA,IAC1C,CAAA,CAAC,CAAC;AAAA,EAAA;AAAA,EAGL,MAAM,SAAS,KAAuB;AACpC,WAAO,QAAQ;AAAA,MACb,CAAC,GAAG,IAAI,SAAS,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM;AAC5B,aAAA,MAAM,GAAG,CAAC;AAAA,MAChB,CAAA;AAAA,IACH;AAAA,EAAA;AAAA,EAGF,MAAM,MAAM,KAAa;AACvB,UAAM,aAAa,MAAM,KAAK,gBAAgB,GAAG;AACjD,WAAO,WAAW,SAAS;AAAA,EAAA;AAAA,EAG7B,MAAM,MAAM,KAAa,OAAY;AAEnC,QAAI,CAAC,KAAK,aAAa,IAAI,GAAG,GAAG;AACzB,YAAA;AAAA,QACJ,yCAAyC,GAAG,KAAK,CAAC,GAAG,KAAK,aAAa,KAAM,CAAA,CAAC;AAAA,MAChF;AAAA,IAAA;AAGF,UAAM,MAAM,0BAA0B,GAAG,MAAM,KAAK,wCAAwC;AAAA,EAAA;AAAA,EAK9F,MAAM,KAAa;AACV,WAAA,KAAK,aAAa,IAAI,GAAG;AAAA,EAAA;AAAA,EAGlC,MAAM,kBAAkB;AAChB,UAAA,WAAW,CAAC,GAAG,KAAK,aAAa,MAAM,EAAE,IAAI,OAAO,QAAoC;AAAA,MAC5F;AAAA,MACA,MAAM,KAAK,gBAAgB,GAAG;AAAA,IAAA,CAC/B;AACD,UAAM,UAAoC,MAAM,QAAQ,IAAI,QAAQ;AACpE,WAAO,IAAI,IAAiB,CAAC,GAAG,OAAO,CAAC;AAAA,EAAA;AAAA,EAG1C,MAAM,cAAc,SAAyB,MAAM;AAC3C,UAAA,4BAAY,IAAiB;AACnC,eAAW,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,MAAM,KAAK,iBAAiB,GAAG,QAAQ,CAAC,GAAG;AACnE,YAAA,IAAI,KAAK,KAAK;AAAA,IAAA;AAEhB,UAAA,WAAW,CAAC,GAAG,MAAM,SAAS,EACjC,OAAO,CAAC,UAAU;AACjB,YAAM,QAAQ,KAAK,aAAa,IAAI,MAAM,CAAC,CAAC;AAC5C,UAAI,CAAC,OAAO;AACV,cAAM,MAAM,iCAAiC;AAAA,MAAA;AAG5C,cAAA,WAAW,QAAQ,WAAW,CAAC,MAAM,iBACtC,MAAM,CAAC,MAAM;AAAA,IAEhB,CAAA,EACA,IAAI,CAAC,UAAU,MAAM,CAAC,CAAC;AACnB,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,gBAAgB,KAAa,aAAsB,OAAyB;AAChF,QAAI,CAAC,KAAK,aAAa,IAAI,GAAG,GAAG;AACzB,YAAA;AAAA,QACJ,yCAAyC,GAAG,KAAK,CAAC,GAAG,KAAK,aAAa,KAAM,CAAA,CAAC;AAAA,MAChF;AAAA,IAAA;AAGE,QAAA;AACJ,QAAI,CAAC,KAAK,cAAc,IAAI,GAAG,GAAG;AAC1B,YAAA,WAAW,MAAM,KAAK,iBAAiB;AACrC,cAAA,SAAS,IAAI,GAAG,KAAK;AAE7B,UAAI,MAAM;AACV,UAAI,UAAU,MAAM;AACV,gBAAA,KAAK,aAAa,GAAG;AACvB,cAAA;AAAA,MAAA;AAER,UAAI,KAAK;AAGF,aAAA,cAAc,IAAI,KAAK,KAAK;AAAA,MAAA;AAE7B,YAAA,aAAa,KAAK,kBAAkB;AAAA,IAAA,OACrC;AACG,cAAA,KAAK,cAAc,IAAI,GAAG;AAAA,IAAA;AAE7B,WAAA;AAAA,EAAA;AAAA,EAGT,aAAa,KAAsB;AACjC,UAAM,YAAY,KAAK,aAAa,IAAI,GAAG;AAE3C,QAAI,CAAC,WAAW;AACR,YAAA,MAAM,kBAAkB,GAAG,UAAU;AAAA,IAAA;AAGzC,QAAA,CAAC,KAAK,cAAc;AACtB,YAAM,MAAM,sDAAsD;AAAA,IAAA;AAGhE,QAAA,CAAC,KAAK,aAAa,GAAG;AAExB,YAAM,MAAM,qDAAqD;AAAA,IAAA;AAG7D,UAAA,QAAQ,KAAK,aAAa,EAAE,UAAU,WAAW,KAAK,QAAQ,KAAK,MAAM;AACzE,UAAA,aAAa,KAAK,kBAAkB;AACnC,WAAA;AAAA,EAAA;AAAA,EAGT,aAAa,SACX,MACA,MACA,OACA,QACA,YAC4B;AAC5B,UAAM,MAAM,IAAI,mBAAkB,QAAQ,YAAY,MAAM,IAAI;AAChE,QAAI,OAAO;AACL,UAAA;AACI,cAAA,IAAI,SAAS,KAAK;AAAA,eACjB,GAAG;AACV;AAAA,UACE;AAAA,6CACmC,CAAC,KAAK,OAAO,CAAC,WAAW,IAAI,WAAW,IAAI,OAAO,KAAK;AAAA;AAAA,UAE3F;AAAA,QACF;AAAA,MAAA;AAAA,IACF;AAGK,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,eAAe;AAEnB,UAAM,gBAAuB,CAAC;AACnB,eAAA,SAAS,CAAC,GAAG,MAAM,KAAK,cAAc,IAAI,CAAC,GAAG;AAEvD,YAAM,GAAG,gBAAgB,IAAI,MAAM,MAAM,QAAQ;AACnC,oBAAA,KAAK,GAAG,gBAAgB;AAAA,IAAA;AAKjC,WAAA,CAAC,MAAM,aAAa;AAAA,EAAA;AAAA,EAG7B,MAAM,mBAAkD;AACtD,UAAM,SAAS,KAAK;AACpB,UAAM,aAAa,KAAK;AACxB,UAAM,OAAO,KAAK;AAClB,UAAM,OAAO,KAAK;AAClB,QAAI,CAAC,UAAU,CAAC,OAAO,GAAG;AACxB,iCAAW,IAAI;AAAA,IAAA;AAKX,UAAA,OAAO,EAAE,UAAU,CAAC,GAAG,WAAW,KAAA,CAAM,CAAC;AAGzC,UAAA,+BAAiC,IAAI;AAC3C,eAAW,SAAS,CAAC,GAAG,OAAO,EAAE,WAAA,CAAY,GAAG;AACxC,YAAA,MAAM,MAAM,CAAC;AACf,UAAA,SAAS,MAAM,CAAC;AACpB,UAAI,kBAAkB,SAAS;AAC7B,iBAAS,MAAM;AAAA,MAAA;AAEjB,UAAI,WAAW,SAAS,WAAW,QAAQ,WAAW,QAAW;AAC/D;AAAA,MAAA;AAEI,YAAA,YAAY,WAAW,IAAI,GAAG;AACpC,UAAI,WAAW;AACb,iBAAS,SAAS,QAAQ;AAEtB,cAAA,UAAU,QACV,MAAM,SACL,CAAE,MAAM,cACP,MAAM,eAAe,KAAK,iBAC5B;AAGA,oBAAQ,MAAM;AACV,gBAAA,CAAC,MAAM,MAAM;AACf,oBAAM,MAAM,QAAQ,UAAU,KAAK,KAAK,UAAU,MAAM,kBAAkB;AAAA,YAAA;AAE5E;AAAA;AAAA,cAEG,MAAM,KAAK,gBAAgB,KAAK,gBAAgB,QAAQ,MAAM,SAAS,CAAE,MAAM,KAAK,iBAAkB,MAAM,KAAK,iBAAiB,KAAK,WACvI,MAAM,KAAK,gBAAgB,KAAK,gBAC/B,QACA,MAAM,QAAQ,QACd,CAAC,UAAU;AAAA,cAOb;AACS,uBAAA,IAAI,KAAK,KAAK;AAAA,YAAA,WAEvB,KAAK,gBAAgB,MAAM,KAAK,gBAChC,UAAU,cACV;AAGM,oBAAA,aAAa,iBAAiB,aAAa,QAAS,MAAM,eAAe,MAAM,MAAM,SAAA,IAAa;AACpG,kBAAA;AACJ,kBAAI,cAAc,MAAM,QAAQ,UAAU,GAAG;AAC/B,4BAAA;AAAA,cAAA,OACP;AACO,4BAAA;AAAA,cAAA;AAEd,kBAAI,cAAc,MAAM;AAClB,oBAAA,SAAS,IAAI,GAAG,GAAG;AACrB,2BAAS,IAAI,GAAG,EAAE,KAAK,GAAG,SAAS;AAAA,gBAAA,OAC9B;AACI,2BAAA,IAAI,KAAK,SAAS;AAAA,gBAAA;AAAA,cAC7B,OACK;AAGI,yBAAA,IAAI,KAAK,KAAK;AAAA,cAAA;AAAA,YACzB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAES,eAAA,CAAC,KAAK,KAAK,KAAK,CAAC,GAAG,SAAS,QAAQ,CAAC,GAAG;AAClD,YAAM,aAAa,KAAK;AACnB,WAAA,cAAc,IAAI,KAAK,KAAK;AAAA,IAAA;AAG5B,WAAA;AAAA,EAAA;AAEX;AAhUA,IAAM,oBAAN;AAkUA,MAAM,uCAAyD,IAAI;AAEnE,eAAe,aACb,cACA,MACA,MACA,MACA,QACA,YACA,UAAmB,OACS;AACxB,MAAA;AAEJ,QAAM,eAAuF,aAAa,UAAU,aAAa,OAAO,IAAI,MAAM,aAAa,OAAO,EAAE,cAAc,OAAO,MAAS,IAAI;AAC1M,MAAI,aAAwC;AAC5C,MAAI,cAAc;AACF,kBAAA,KAAK,SAAU,aAAa,KAAK,MAAM,KAAK,CAAM,IAAA,IAAI,KAAK,MAAM;AAAA,EAAA;AAE3E,QAAA,WAAW,UAAU,aAAa,iBAAiB,IAAI,KAAK,QAAQ,KAAK,KAAK;AAGhF,MAAA;AACA,MAAA;AACA,MAAA;AACA,MAAA;AAEA,MAAA,EAAE,OAAO,YAAY,WAAW;AAElC,SAAK,MAAM,SAAS,SAAS,MAAM,MAAM,MAAM,UAAU;AAAA,EAAA,OACpD;AACL,YAAQ,UAAU;AAAA,MAChB,KAAK;AACH,aAAK,MAAM,kBAAkB;AAAA,UAC3B;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA;AAAA,MACF,KAAK;AACH,aAAK,MAAM,qBAAqB,SAAS,MAAM,MAAM,IAAI;AACzD;AAAA,MACF,KAAK;AACH,aAAK,MAAM,yBAAyB,SAAS,MAAM,MAAM,IAAI;AAC7D;AAAA,MACF,KAAK;AACH,YAAI,cAAc,OAAO,eAAe,YAAY,EAAE,sBAAsB,yBAAyB;AAE1E,mCAAA,IAAI,uBAAuB,UAAU;AAAA,QAAA,OACzD;AACoB,mCAAA;AAAA,QAAA;AAE3B,aAAK,MAAM,sBAAsB,SAAS,MAAM,MAAM,MAAM,sBAAsB;AAClF;AAAA,MACF,KAAK;AACH,YAAI,cAAc,OAAO,eAAe,YAAY,EAAE,sBAAsB,6BAA6B;AAE1E,uCAAA,IAAI,2BAA2B,UAAU;AAAA,QAAA,OACjE;AACwB,uCAAA;AAAA,QAAA;AAE/B,aAAK,MAAM,0BAA0B,SAAS,MAAM,MAAM,MAAM,0BAA0B;AAC1F;AAAA,MACF,KAAK;AACH,YAAI,cAAc,OAAO,eAAe,YAAY,EAAE,sBAAsB,iCAAiC;AAE1E,2CAAA,IAAI,+BAA+B,UAAU;AAAA,QAAA,OACzE;AAC4B,2CAAA;AAAA,QAAA;AAEnC,aAAK,MAAM,8BAA8B,SAAS,MAAM,MAAM,MAAM,8BAA8B;AAClG;AAAA,MACF,KAAK;AACH,YAAI,cAAc,OAAO,eAAe,YAAY,EAAE,sBAAsB,wBAAwB;AAE9E,8BAAA,IAAI,sBAAsB,UAAU;AAAA,QAAA,OACnD;AACe,8BAAA;AAAA,QAAA;AAEtB,aAAK,MAAM,qBAAqB,SAAS,MAAM,MAAM,MAAM,iBAAiB;AAC5E;AAAA,MACF,KAAK;AACH,aAAK,MAAM,cAAc,SAAS,MAAM,MAAM,IAAI;AAClD;AAAA,MACF,KAAK;AACH,aAAK,MAAM,iBAAiB,SAAS,MAAM,MAAM,IAAI;AACrD;AAAA,MACF,KAAK;AACH,aAAK,MAAM,iBAAiB,SAAS,MAAM,MAAM,IAAI;AACrD;AAAA,MACF,KAAK;AACH,aAAK,MAAM,gBAAgB,SAAS,MAAM,MAAM,IAAI;AACpD;AAAA,MACF,KAAK;AACH,aAAK,MAAM,gBAAgB,SAAS,MAAM,MAAM,IAAI;AACpD;AAAA,MACF,KAAK;AACH,aAAK,MAAM,kBAAkB,SAAS,MAAM,MAAM,IAAI;AACtD;AAAA,MACF,KAAK;AACH,aAAK,MAAM,cAAc,SAAS,MAAM,MAAM,IAAI;AAClD;AAAA,MACF,KAAK;AACH,aAAK,MAAM,aAAa,SAAS,MAAM,MAAM,IAAI;AACjD;AAAA,MACF,KAAK;AACH,aAAK,MAAM,4BAA4B,SAAS,MAAM,MAAM,IAAI;AAChE;AAAA,MACF;AACU,gBAAA,KAAK,yBAAyB,KAAK,QAAQ,WAAW,KAAK,OAAO,aAAa,KAAK,QAAQ;AACpG,aAAK,MAAM,4BAA4B,SAAS,MAAM,MAAM,IAAI;AAAA,IAAA;AAAA,EACpE;AAGF,MAAI,OAAO,MAAM;AACR,WAAA;AAAA,EAAA;AAGT,KAAG,iBAAiB;AACpB,MAAI,cAAc,OAAO;AACvB,eAAW,OAAO,IAAI;AACpB,UAAI,eAAe,SAAS;AAC1B,YAAI,KAAK,CAAQ,SAAA;AAAM,cAAA,SAAS,KAAM,MAAK,iBAAiB;AAAA,QAAA,CAAe;AAAA,MAAA,OACtE;AACL,YAAI,iBAAiB;AAAA,MAAA;AAAA,IACvB;AAAA,EACF;AAGK,SAAA;AACT;;;;;;;;;;;;;;;;;;;;;AC97DA,MAAM,kBAAqC;AAAA,EAMzC,YAAY,MAAkB;AAL9B,sCAAsC;AACtC,gCAAa;AACb;AACA,mCAAmB;AAGjB,SAAK,OAAO;AAAA,EAAA;AAAA,EAGd,MAAM,UAAkD;AAC/C,WAAA;AAAA,EAAA;AAAA,EAGT,gBAAgB;AACP,WAAA;AAAA,EAAA;AAAA,EAGT,qBAAqB;AACZ,WAAA;AAAA,EAAA;AAAA,EAGF,WAA8B;AACnC,WAAO,IAAI,YAAY,CAAW,YAAA,QAAQ,IAAI,CAAC;AAAA,EAAA;AAAA,EAGjD,YAAY;AACH,WAAA;AAAA,EAAA;AAAA,EAGT,YAAY,IAAa,OAAO;AAC9B,WAAO,CAAC;AAAA,EAAA;AAAA,EAGV,aAAsB;AACb,WAAA;AAAA,EAAA;AAEX;AAEA,MAAM,qBAAqB;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AACF;AAEA,MAAM,YAAsD;AAAA,EAuC1D,YACE,MACA,MACA,OACA,QACA,YACA,OACA;AA7CF;AACA;AACA;AACA;AACA;AACA,uCAAmC;AACnC,oCAA0B;AAC1B;AACA;AACA;AACA,mCAAmB;AACnB,mCAAmB;AACnB,iCAAuC;AACvC;AAiCE,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,cAAc,SAAS;AAC5B,QAAI,CAAC,QAAQ;AACX,YAAM,MAAM,sDAAsD;AAAA,IAAA;AAEpE,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,eAAe;AACpB,SAAK,WAAW,KAAK;AACrB,QAAI,iBAAiB,aAAa;AAChC,WAAK,UAAU;AACf,WAAK,QAAQ;AAAA,IAAA;AAEf,QAAI,UAAU,MAAM;AAClB,WAAK,UAAU;AACf,WAAK,WAAW;AAAA,IAAA;AAAA,EAClB;AAAA,EAnDF,aAAsB;AACpB,WAAO,KAAK,aAAa,QAAQ,mBAAmB,SAAS,KAAK,QAAQ;AAAA,EAAA;AAAA,EAG5E,gBAAgB;AACV,QAAA,YAAY,KAAK,KAAK;AAC1B,QAAI,KAAK,UAAU,KAAK,OAAO,IAAI;AACjC,kBAAY,GAAG,KAAK,OAAO,GAAG,KAAK,SAAS,MAAM,SAAS;AAAA,IAAA;AAEtD,WAAA;AAAA,EAAA;AAAA,EAGT,qBAAqB;AACf,QAAA,YAAY,KAAK,KAAK;AAC1B,QAAI,KAAK,UAAU,KAAK,KAAK,gBAAgB,KAAK,OAAO,GAAG;AACpD,YAAA,YAAY,KAAK,OAAO,EAAE,MAAM,iBAAiB,IAAI,KAAK,KAAK,YAAY;AAC7E,UAAA,aAAa,KAAK,OAAO,IAAI;AACnB,oBAAA,GAAG,KAAK,OAAO,GAAG,KAAK,SAAS,MAAM,UAAU,IAAI;AAAA,MAAA;AAAA,IAClE;AAEK,WAAA;AAAA,EAAA;AAAA;AAAA;AAAA,EAqCT,kBAAkB;AAChB,WAAO,KAAK,OAAO,KAAK,KAAK,gBAAgB;AAAA,EAAA;AAAA,EAG/C,MAAM,UAA+C;AACnD,UAAM,KAAK,YAAY;AAEvB,QAAI,gBAA4B,CAAC;AAEjC,QAAI,KAAK,OAAO;AACd,OAAC,KAAK,MAAM,aAAa,IAAI,MAAM,KAAK,MAAM,QAAQ;AAAA,IAAA;AAGpD,QAAA;AACA,QAAA,KAAK,UAAU,MAAM;AAEjB,YAAA,CAAC,cAAc,gBAAgB,IAAI,OAAO,MAAM,KAAK,OAAO,aAAa;AACnE,kBAAA;AACZ,sBAAgB,CAAC,GAAG,eAAe,GAAG,gBAAgB;AAAA,IAAA,OACjD;AACO,kBAAA;AAAA,IAAA;AAUV,QAAA,CAAC,KAAK,MAAM;AACd,YAAM,MAAM;AAAA,IAAA;AAEd,SAAK,KAAK,OAAO,KAAK,KAAK,QAAQ,CAAC;AACpC,QAAI,cAAc,MAAM;AACtB,UAAI,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,MAAM,GAAG;AACxC,aAAK,KAAK,KAAK,OAAO,KAAK,KAAK,MAAM;AAAA,MAAA;AAAA,IACxC,OACK;AACL,WAAK,KAAK,KAAK,IAAI,KAAK,KAAK,QAAQ,SAAS;AAAA,IAAA;AAEhD,UAAM,OAAO,KAAK,cAAc,KAAK,OAAO;AAGrC,WAAA,CAAC,MAAM,aAAa;AAAA,EAAA;AAAA,EAG7B,QAAQ;AACN,SAAK,QAAQ;AACb,QAAI,KAAK,QAAQ,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,MAAM,GAAG;AACvE,WAAK,KAAK,KAAK,OAAO,KAAK,KAAK,MAAM;AAAA,IAAA;AAAA,EACxC;AAAA,EAGF,YAAY,MAA2C;AACrD,QAAI,MAAM;AACR,WAAK,OAAO;AAAA,IAAA;AAEd,SAAK,WAAW;AAChB,QAAI,KAAK,OAAO;AACd,WAAK,MAAM,WAAW;AAAA,IAAA;AAEpB,QAAA,CAAC,KAAK,MAAM;AACV,UAAA,CAAC,KAAK,MAAM;AACd,cAAM,MAAM,YAAY;AAAA,MAAA;AAE1B,UAAI,KAAK,OAAO;AACP,eAAA,IAAI,YAAY,OAAO,YAAY;AlB9LlD,cAAAjB;AkB+LU,gBAAMqB,QAAO,QAAMrB,MAAA,KAAK,UAAL,gBAAAA,IAAY;AAC/B,kBAAQ,KAAK,YAAYqB,QAAOA,MAAK,CAAC,IAAI,MAAS,CAAC;AAAA,QAAA,CACrD;AAAA,MAAA;AAEC,UAAA,CAAC,KAAK,MAAM;AAIT,aAAA,OAAO,IAAI,WAAW;AAAA,UACzB,cAAc,KAAK,KAAK,gBAAgB;AAAA,UACxC,QAAQ;AAAA,UACR,0BAAU,IAAiB;AAAA,UAC3B,WAAW,KAAK,KAAK;AAAA,UACrB,qBAAqB;AAAA,UACrB,eAAe;AAAA,UACf,kBAAkB;AAAA,UAClB,UAAU,MAAM;AAAA,QAAA,CACjB;AAAA,MAAA;AAAA,IAEH;AAEE,QAAA,KAAK,gBAAgB,OAAO;AAC9B,WAAK,cAAc;AACf,UAAA;AACJ,UACE,KAAK,UAAU,QACf,KAAK,KAAK,SAAS,QACnB,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,MAAM,KACnC,KAAK,aAAa,YAClB;AACA,eAAO,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,MAAM;AAAA,MAAA,OACrC;AACL,eAAO,KAAK;AAAA,MAAA;AAGd,UAAI,KAAK,WAAW,OAAO,SAAS,YAAY,KAAK,SAAS,MAAM;AAClE,YAAI,YAAY;AAChB,YAAI,OAAO,QAAQ,CAAC,KAAK,aAAa;AACpC,sBAAY,KAAK,GAAG;AACpB,iBAAO,KAAK,GAAG;AACV,eAAA,MAAM,SAAS,EAAE,KAAK,CAAC,MAAwB,KAAK,EAAE,OAAO,IAAI,CAAC;AAChE,iBAAA;AAAA,QAAA,WACE,gBAAgB,OAAO,KAAK,IAAI,GAAG,GAAG;AACnC,sBAAA,KAAK,IAAI,GAAG;AACxB,eAAK,OAAO,GAAG;AACV,eAAA,MAAM,SAAS,EAAE,KAAK,CAAC,MAAwB,KAAK,EAAE,OAAO,IAAI,CAAC;AAChE,iBAAA;AAAA,QAAA;AAAA,MACT;AAEF,YAAM,KAAK;AAAA,QACT;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AAEM,YAAA,cAAc,CAACC,QAAmB;AAClCA,YAAAA,QAAO,QAAQA,eAAc,QAAQ;AACvCA,cAAG,iBAAiB;AAChB,cAAA,KAAK,WAAW,KAAK,OAAO;AAC9BA,gBAAG,IAAI,KAAK,MAAM,SAAS;AAAA,UAAA;AAG7B,eAAK,cAAc;AAAA,QAAA;AAEdA,eAAAA;AAAAA,MACT;AACA,WAAK,QAAQ,IAAI,YAAY,CAAC,YAAY;AACrC,WAAA,KAAK,CAACA,QAAO,QAAQA,MAAK,YAAYA,GAAE,IAAIA,GAAE,CAAC;AAAA,MAAA,CACnD;AAAA,IAAA;AAGH,WAAO,KAAK;AAAA,EAAA;AAAA,EAGP,WAAmC;AACxC,WAAO,KAAK,YAAY;AAAA,EAAA;AAAA;AAAA;AAAA,EAM1B,YAAY;AACH,WAAA,KAAK,cAAc;AAAA,EAAA;AAAA,EAG5B,MAAM,gBAAgB;AACpB,UAAM,KAAK,YAAY;AACvB,QAAI,aAAa,CAAC;AAClB,QAAI,KAAK,SAAS,KAAK,iBAAiB,UAAU,mBAAmB,KAAK,SAAS,OAAO,KAAK,MAAM,kBAAkB,YAAY;AACpH,mBAAA,KAAK,MAAM,cAAc;AAAA,IAAA;AAExC,QAAI,KAAK,OAAO;AACd,aAAO,OAAO,YAAY,KAAK,MAAM,eAAe;AAAA,IAAA;AAE/C,WAAA;AAAA,EAAA;AAAA,EAGT,YAAY,SAAS,MAAiB;AACpC,QAAI,WAAW,CAAC;AAChB,QAAI,KAAK,SAAS,KAAK,iBAAiB,UAAU,iBAAiB,KAAK,SAAS,OAAO,KAAK,MAAM,gBAAgB,YAAY;AAClH,iBAAA,KAAK,MAAM,YAAY,MAAM;AAAA,IAAA;AAE1C,QAAI,KAAK,OAAO;AACH,iBAAA,CAAC,GAAG,UAAU,GAAG,KAAK,MAAM,YAAY,MAAM,CAAC;AAAA,IAAA;AAErD,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,UAAqG;AACnG,UAAA,QAAS,MAAM,KAAK,SAAS;AACnC,WAAO,iBAAiB,SAAS,MAAM,QAAY,IAAA;AAAA,EAAA;AAEvD;AAEA,MAAM,mBAAmB,MAAyB;AAAA,EAAlD;AAAA;AACE;AACA;AACA,sCAAsC;AACtC;AACA;AACA,yCAA8C;AAC9C,mCAAmB;AAAA;AAAA,EAEnB,aAAsB;AACb,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,SAAS;AACP,UAAA,WAAW,MAAM,QAAQ,IAAI,KAAK,IAAI,OAAO,OAAO,MAAM,EAAE,CAAC;AAEnE,UAAM,SAAS,SAAS,KAAK,CAAC,GAAG,MAAM;AACrC,YAAM,OAAO,CAAC,GAAG,CAAC,EAAE,IAAI,CAAO,QAAA;AAC7B,YAAI,OAAO,EAAE,kBAAkB,EAAE,eAAe,MAAM;AACpD,cAAI,IAAI,eAAe,KAAK,YAAY,EAAG;AAIpC,iBAAA,IAAI,eAAe,KAAK;AAAA,QAAA,OAC1B;AACE,iBAAA;AAAA,QAAA;AAAA,MACT,CACD;AACD,aAAO,KAAK,CAAC,IAAI,KAAK,CAAC;AAAA,IAAA,CACxB;AACM,WAAA;AAAA,EAAA;AAAA,EAGT,gBAAgB;AACV,QAAA,CAAC,KAAK,MAAM;AACP,aAAA;AAAA,IAAA;AAGL,QAAA,YAAY,KAAK,KAAK;AAC1B,QAAI,KAAK,UAAU,KAAK,OAAO,IAAI;AACjC,kBAAY,GAAG,KAAK,OAAO,GAAG,KAAK,SAAS,MAAM,SAAS;AAAA,IAAA;AAE7D,WAAO,IAAI,SAAS;AAAA,EAAA;AAAA,EAGtB,qBAAqB;AACf,QAAA,CAAC,KAAK,MAAM;AACP,aAAA;AAAA,IAAA;AAGL,QAAA,YAAY,KAAK,KAAK;AAC1B,QAAI,KAAK,UAAU,KAAK,KAAK,gBAAgB,KAAK,OAAO,GAAG;AACpD,YAAA,YAAY,KAAK,OAAO,EAAE,MAAM,iBAAiB,IAAI,KAAK,KAAK,YAAY;AAC7E,UAAA,aAAa,KAAK,OAAO,IAAI;AACnB,oBAAA,GAAG,KAAK,OAAO,GAAG,KAAK,SAAS,MAAM,UAAU,IAAI;AAAA,MAAA;AAAA,IAClE;AAEF,WAAO,IAAI,SAAS;AAAA,EAAA;AAAA;AAAA,EAItB,WAAW,MAAkB,QAA2B;AACtD,SAAK,OAAO;AACZ,QAAI,MAAM,QAAQ,KAAK,IAAI,GAAG;AAC5B,YAAM,MAAM,6BAA6B;AAAA,IAAA;AAE3C,QAAI,CAAC,QAAQ;AACX,YAAM,MAAM,sDAAsD;AAAA,IAAA;AAEpE,SAAK,SAAS;AACd,SAAK,OAAO;AACZ,SAAK,eAAe;AACf,SAAA,oCAAoB,IAAI;AAAA,EAAA;AAAA,EAG/B,MAAM,UAA2C;AAC/C,UAAM,QAAgC,MAAM;AAAA,OACzC,MAAM,KAAK,OAAA,GAAU;AAAA,QACpB,OAAO,UAA4C;AACjD,gBAAM,QAAQ,MAAM;AACpB,iBAAQ,SAAS,iBAAiB,UAAU,MAAM,UAAW,MAAM,YAAY;AAAA,QAAA;AAAA,MACjF;AAAA,IAEJ;AACO,WAAA,QAAQ,IAAI,KAAK;AAAA,EAAA;AAAA,EAG1B,WAAoC;AAClC,WAAO,IAAI,YAAY,CAAW,YAAA,QAAQ,IAAI,CAAC;AAAA,EAAA;AAAA,EAGjD,WAAW;AACF,WAAA,QAAQ,KAAK,MAAM;AAAA,EAAA;AAE9B;AAGA,SAAS,cACP,OACA,KACA,QACA,OAA0B,MAC1B,OAAmB,MACgC;AAC7C,QAAA,WAAW,MAAM,sBAAsB;AACvC,QAAA,UAAU,SAAS,IAAI,GAAG;AAChC,MAAI,CAAC,SAAS;AACZ,UAAM,MAAM,8BAA8B;AAAA,EAAA;AAGtC,QAAA,aAAa,MAAM,oBAAoB;AAC7C,QAAM,YAAY,WAAW,IAAI,QAAQ,gBAAgB,EAAE;AAE3D,MAAI,QAAQ;AAEV,MAAA,QAAQ,gBACR,QAAQ,gBACR,aACA,UAAU,eAAe,OACzB,MACA;AACA,YAAQ,IAAI,WAAW;AACjB,UAAA,WAAW,SAAS,IAAI;AAAA,EAAA;AAE5B,MAAA,UAAU,QAAQ,MAAM;AACtB,QAAA;AACJ,UAAM,cAAc,MAAM,qBAAqB,QAAQ,gBAAgB,IAAI,MAAM,QAAQ;AACzF,QAAI,aAAa;AACf,YAAM,aAAsC,MAAM,cAAc,QAAQ,MAAM;AAC9E,UAAI,QAAoC;AACxC,UAAI,cAAc,WAAW,QAAQ,QAAQ,aAAa,YAAY;AACpE,gBAAQ,IAAI,YAAY,SAAS,MAAM,MAAM,MAAM,YAAY,IAAI;AAAA,MAAA;AAErE,kBAAY,IAAI,YAAY,SAAS,MAAM,MAAM,MAAM,UAAU,QAAY,oBAAA,QAAQ,YAAY,KAAK;AAAA,IAAA,OACjG;AACO,kBAAA,IAAI,kBAAkB,OAAO;AAAA,IAAA;AAG3C,QAAI,OAAO;AACH,YAAA,KAAK,UAAU,UAAU;AAAA,IAAA,OAC1B;AACG,cAAA;AAAA,IAAA;AAAA,EACV;AAGK,SAAA;AACT;AC7aA,MAAM,kBAAkB;AACxB,MAAM,yBAAyB;AAE/B,MAAM,KAAK;AAAA,EAMT,YAAY,MAAuB;AALnC;AACA;AACA;AACA;AAGM,QAAA;AACA,QAAA,KAAK,gBAAgB,QAAQ;AAC/B,aAAO,KAAK,KAAK,gBAAgB,EAAE,SAAS;AAAA,IAAA,OACvC;AACL,aAAO,KAAK;AAAA,IAAA;AAEd,SAAK,YAAY,QAAQ;AACzB,SAAK,UAAU,KAAK;AACpB,SAAK,kBAAkB,KAAK,QAAQ,KAAK,WACtC,QAAQ,SAAS,GAAG,EACpB,QAAQ,UAAU,CAAC,MAAc,EAAE,YAAA,CAAa,EAChD,QAAQ,OAAO,EAAE;AACf,SAAA,iBAAiB,KAAK,eAAe,CAAC,EAAE,gBAAgB,KAAK,eAAe,MAAM,CAAC;AACxF,SAAK,OAAO;AAAA,EAAA;AAEhB;AAEA,MAAM,qBAAqB;AAAA,EAIzB,cAAc;AAHd;AACA,2CAA2B;AAGzB,SAAK,SAAS;AAAA,EAAA;AAElB;AAEA,MAAM,wBAAoF;AAAA,EAUxF,YACE,MACA,OACA,UACA,aAAsB,MACtB;AAdF;AACA;AAEA;AACA;AACA;AACA;AACA;AAQE,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,QAAI,UAAU;AACP,WAAA,MAAM,WAAW,QAAQ;AAAA,IAAA;AAEhC,SAAK,WAAW;AACX,SAAA,YAAY,IAAI,UAAc,oBAAA,IAAoB,GAAA,oBAAI,IAAqB,GAAG,MAAM,EAAE;AACtF,SAAA,QAAQ,WAAW,SAAS,UAAU;AACtC,SAAA,SAAS,WAAW,SAAS,WAAW;AACxC,SAAA,WAAW,WAAW,SAAS,WAAW;AAC3C,QAAA,cAAc,KAAK,UAAU;AAC/B,WAAK,mBAAmB;AAAA,IAAA;AAAA,EAC1B;AAAA,EAGF,qBAAgC;AAC1B,QAAA,CAAC,KAAK,UAAU;AAClB,cAAQ,KAAK,+CAA+C,KAAK,KAAK,cAAc;AACpF;AAAA,IAAA;AAEG,SAAA,SAAS,SAAS,KAAK,SAAS,SAAS,CAAC,GAAG,OAAO,CAAC,SAAqB;AAC7E,aAAO,KAAK,MAAM,qBAAqB,KAAK,gBAAgB,IAAI,IAAI;AAAA,IAAA,CACrE;AAAA,EAAA;AAAA,EAGH,MAAM,UAAU,SAAuC;AACrD,eAAW,OAAO,SAAS;AACnB,YAAA,KAAK,UAAU,SAAS,GAAG;AAAA,IAAA;AAAA,EACnC;AAAA,EAGF,MAAM,QAAQ,SAAkB,OAAO;AACrC,QAAI,eAAe,KAAK,YAAY,KAAK,SAAS,iBAAiB;AAC/D,QAAA,UAAU,CAAC,cAAc;AAC3B,YAAM,cAAc,MAAM,KAAK,eAAe,MAAM;AACpC,qBAAA,eAAe,YAAY,QAAS,gBAAgB;AACpE,UAAI,KAAK,YAAY,KAAK,SAAS,kBAAkB;AAC9C,aAAA,SAAS,iBAAiB,OAAO;AAAA,MAAA;AAAA,IACxC;AAEK,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,eAAe,SAAkB,OAAO;AAC5C,QAAI,cAAc,KAAK,YAAY,KAAK,SAAS,iBAAiB;AAClE,QAAI,UAAU,CAAC,eAAe,YAAY,WAAW;AACnD,oBAAc,IAAI,0BAA0B;AAC5C,UAAI,mBAAwD;AACxD,UAAA,KAAK,MAAM,MAAM,oBAAoB;AACjC,cAAA,iBAAiB,KAAK,MAAM,MAAM,mBAAmB,KAAK,CAAA,SAAQ,KAAK,gBAAgB,sBAAsB;AACnH,YAAI,gBAAgB;AAClB,6BAAmB,eAAe;AAAA,QAAA;AAAA,MACpC;AAEI,YAAA,QAAQ,KAAK,MAAM,eAAe;AACxC,UAAI,kBAAkB;AACT,mBAAA,CAAC,YAAY,MAAM,KAAK,OAAO,QAAQ,iBAAiB,gBAAgB,GAAG;AACpF,gBAAM,eAAe,MAAM,IAAI,OAAO,YAAY;AAClD,cAAI,cAAc,OAAO;AACzB,cAAI,CAAC,aAAa;AAChB;AAAA,UAAA;AAEF,cAAI,iBAAiB,YAAY,MAAM,iBAAiB,KAAK,CAAC;AAC9D,gBAAM,gBAAgB,CAAC,GAAG,MAAM,QAAQ,EAAE,OAAO,CAAA,SAAQ,KAAK,iBAAiB,OAAO,gBAAgB,CAAC,GAAG,cAAc,EAAE,SAAS,IAAI,KAAK,IAAI,GAAG,CAAC,EAAE,IAAI,CAAQ,SAAA,CAAC,KAAK,MAAM,KAAK,SAAS,EAAE,CAAC;AAC/L,cAAI,iBAAiD,CAAC;AAEtD,cAAI,cAAc;AACZ,gBAAA,gBAAgB,OAAO,MAAM,KAAK,UAAU,SAAS,aAAa,SAAS,EAAE,GAAG,CAAC;AACrF,gBAAI,yBAAyB,YAAY;AACvB,8BAAA,MAAM,cAAc,CAAC;AAAA,YAAA,WAC5B,cAAc,OAAO;AAEf,6BAAA,KAAK,CAAC,aAAa,QAAQ,IAAI,MAAM,cAAc,SAAS,CAAC,CAAC;AAC7D,8BAAA,MAAM,cAAc,MAAM,SAAS;AAAA,YAAA,OAC9C;AACW,8BAAA,MAAM,cAAc,SAAS;AAAA,YAAA;AAE/C,gBAAI,eAAe;AACjB,+BAAiB,CAAC,GAAG,gBAAgB,GAAG,MAAM,QAAQ,IAAI,cAAc,OAAO,CAAC,CAAC,GAAG,KAAK,MAAM,cAAc,MAAM,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,cAAc,KAAK,EAAE,KAAK,CAAC,UAAsB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;AAAA,YAAA;AAAA,UACrN;AAEF,cAAI,gBAAgB;AAClB,0BAAc,eAAe,OAAO,CAAC,MAAM,CAAC,MAAM,KAAK,MAAM,QAAQ,KAAK,QAAQ,IAAI,IAAI,KAAK,KAAK,IAAI,MAAM,WAAW;AAAA,UAAA;AAE3H,2BAAiB,YAAY,MAAM,iBAAiB,KAAK,CAAC;AAC1D,cAAI,eAAe,QAAQ;AACR,6BAAA,MAAM,QAAQ,IAAI,cAAc,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,KAAK,UAAU,SAAS,KAAK,EAAE,KAAK,CAAC,WAAmD,CAAC,MAAM,SAAS,OAAO,CAAC,IAAI,MAAS,CAAC,CAAC,CAAC;AACxM,gBAAI,gBAAgB;AAClB,4BAAc,eAAe,OAAO,CAAC,MAAM,CAAC,MAAM,KAAK,MAAM,QAAQ,KAAK,QAAQ,IAAI,IAAI,KAAK,KAAK,IAAI,MAAM,WAAW;AAAA,YAAA;AAAA,UAC3H;AAEF,sBAAY,UAAU,IAAI;AAAA,QAAA;AAAA,MAC5B;AAAA,IACF;AAEF,QAAI,KAAK,YAAY,KAAK,SAAS,kBAAkB;AAC9C,WAAA,SAAS,iBAAiB,cAAc;AAC7C,UAAI,YAAY,MAAM;AACpB,aAAK,SAAS,iBAAiB,YAAY,OAAO,YAAY;AAAA,MAAA;AAAA,IAChE;AAEK,WAAA;AAAA,EAAA;AAAA,EAGT,UAAU,WAAuB,MAAyB,MAA2B;AACnF,UAAM,MAAM,UAAU;AACtB,QAAI,CAAC,KAAK;AACR,YAAM,MAAM,0CAA0C,UAAU,MAAM,EAAE;AAAA,IAAA;AAE1E,UAAM,QAAQ;AAAA,MACZ,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACC,CAAC,UAAU,gBAAgB,UAAU,iBAAiB,KAAK,eAAgB,OAAO;AAAA;AAAA,MACnF,KAAK;AAAA,IACP;AAEA,UAAM,YAA4B,KAAK;AAC7B,cAAA,WAAW,KAAK,CAAA,CAAE,EAAE,KAAK,CAAC,QAAoB,IAAI,KAAK,KAAK,CAAC;AAChE,WAAA;AAAA,EAAA;AAAA,EAGT,aAAmE;AAC1D,WAAA,KAAK,UAAU,OAAO,QAAQ;AAAA,EAAA;AAAA,EAGvC,MAAM,OAAO;AACX,YAAQ,MAAM,KAAK,iBAAiB,GAAG,KAAK;AAAA,EAAA;AAAA,EAG9C,MAAM,SAAS;AACb,YAAQ,MAAM,KAAK,iBAAiB,GAAG,OAAO;AAAA,EAAA;AAAA,EAGhD,MAAM,UAAU;AACd,YAAQ,MAAM,KAAK,iBAAiB,GAAG,QAAQ;AAAA,EAAA;AAAA,EAGjD,MAAM,mBAA+C;AAC7C,UAAA,OAAO,MAAM,KAAK,QAAQ;AAChC,QAAI,QAA2B;AAC/B,QAAI,MAAM;AACF,YAAA,YAAY,MAAM,KAAK,SAAS;AACtC,UAAI,CAAC,MAAM,QAAQ,SAAS,GAAG;AACrB,gBAAA;AAAA,MAAA;AAAA,IACV;AAEF,QAAI,CAAC,SAAS,EAAE,iBAAiB,oBAAoB;AACnD,YAAM,MAAM,wBAAwB,KAAK,MAAM,KAAK,cAAc,qBAAqB;AAAA,IAAA;AAElF,WAAA;AAAA,EAAA;AAAA,EAGT,gBAAgB,KAAsC;AAChD,QAAA;AACA,QAAA,KAAK,aAAa,MAAM;AAChB,gBAAA,KAAK,MAAM,WAAW,KAAK,KAAK,EAAE,EAAE,KAAK,CAAY,aAAA;AAC7D,aAAK,WAAW;AAAA,MACjB,CAAA,EAAE,KAAK,MAAM,KAAK,SAAS,IAAI,CAAC;AAAA,IAAA,OAC5B;AACK,gBAAA,IAAI,QAAQ,CAAC,YAAY;AAAU,gBAAA;AAAA,MAAA,CAAI;AAAA,IAAA;AAI5C,WAAA,IAAI,YAAY,CAAW,YAAA;AAChC,cAAQ,KAAK,MAAM,KAAK,iBAAA,CAAkB,EAAE,KAAK,CAAA,SAAQ,QAAQ,KAAK,GAAG,CAAC,CAAC;AAAA,IAAA,CAC5E;AAAA,EAAA;AAAA,EAGH,MAAM,UAAwC;AAC5C,UAAM,SAAS,KAAK;AACd,UAAA,OAAO,KAAK,MAAM,YAAY;AACpC,QAAI,MAAM;AACJ,UAAA;AACJ,YAAM,QAAQ,KAAK;AACf,UAAA,EAAE,OAAO,SAAS,WAAW;AAC/B,cAAM,MAAM,0BAA0B,KAAK,MAAM,EAAE;AAAA,MAAA;AAErD,YAAM,OAAO,WAAW,OAAO,EAAE;AACjC,YAAM,aAAa,MAAM,OAAO,IAAI,KAAK;AAErC,UAAA,WAAW,SAAS,GAAG;AACzB,cAAM,MAAM,iCAAiC;AAAA,MAAA,WACpC,WAAW,UAAU,GAAG;AACjC,gBAAQ,WAAW,CAAC;AAAA,MAAA,OACf;AACL,gBAAQ,cAAc,KAAK,OAAO,OAAO,OAAO,MAAM,KAAK,IAAI;AAC/D,eAAO,IAAI,OAAO,CAAC,KAAK,CAAC;AAAA,MAAA;AAEpB,aAAA;AAAA,IAAA;AAAA,EACT;AAAA,EAGF,gBAAgB,KAAa,OAAY;AAEvC,WAAO,KAAK,iBAAA,EAAmB,KAAK,CAAC,SAAS;AAC5C,UAAI,MAAM;AACR,aAAK,GAAG,IAAI;AAAA,MAAA,OACP;AACL,cAAM,MAAM,gBAAgB,GAAG,OAAO,IAAI,qBAAqB;AAAA,MAAA;AAAA,IACjE,CACD;AAAA,EAAA;AAAA,EAGH,MAAM,gBACJ,WACA,eACA,aACA,UACA,eACA,OACA,cACA,OACA,sBAA+B,MACW;AACpC,UAAA,wCAAqC,IAAI;AACzC,UAAA,WAAW,cAAc,IAAI,WAAW;AAC1C,QAAA,gCAAgB,IAAI;AAExB,QAAI,aAAa,SAAU,gBAAgB,aAAa,QAAY;AAClE,OAAC,GAAG,SAAS,OAAA,CAAQ,EAAE,OAAO,CAAC,SAAqB;AAClD,eAAO,KAAK,iBAAiB;AAAA,MAAA,CAC9B,EAAE,QAAQ,CAAC,SAAqB,UAAU,OAAO,KAAK,SAAS,EAAE,CAAC;AAC/D,UAAA;AACJ,UAAI,UAAU,MAAM;AAClB,yBAAiB,CAAC;AAClB,gBAAQ,MAAM,sDAAsD;AAAA,MAAA,OAC/D;AACL,yBAAiB,MAAM;AAAA,UACrB,CAAC,SAAS,KAAK,gBAAgB,eAAe,KAAK,MAAM,qBAAqB,aAAa,IAAI;AAAA,QACjG;AACI,YAAA,eAAe,UAAU,KAAK,cAAc;AAC9C,2BAAiB,CAAC,IAAI;AAAA,QAAA;AAElB,cAAA,WAAW,MAAM,KAAK;AAAA,UAC1B;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,oBAAY,SAAS,CAAC;AAChB,cAAA,uBAAoC,SAAS,CAAC;AAEpD,SAAC,GAAG,UAAU,QAAA,CAAS,EAAE,QAAQ,CAAC,UAAU;AACtC,cAAA,MAAM,CAAC,MAAM,QAAW;AAC1B,sBAAU,IAAI,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;AAAA,UAAA;AAAA,QAClC,CACD;AACD,SAAC,GAAG,oBAAoB,EAAE,QAAQ,CAAC,MAAM;AACvC,4BAAkB,IAAI,CAAC;AAAA,QAAA,CACxB;AACa,sBAAA,IAAI,aAAa,IAAI;AAAA,MAAA;AAAA,IACrC;AAIF,QAAI,qBAAqB;AACvB,iBAAWC,gBAAe,CAAC,GAAG,iBAAiB,GAAG;AAEhD,cAAM,CAAC,aAAa,IAAI,MAAM,KAAK;AAAA,UACjC;AAAA,UACA;AAAA,UACAA;AAAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA;AAAA,UACA;AAAA,QACF;AACA,mBAAW,CAAC,KAAK,KAAK,KAAK,eAAe;AAC9B,oBAAA,IAAI,KAAK,KAAK;AAAA,QAAA;AAAA,MAC1B;AAEF,wBAAkB,MAAM;AAAA,IAAA;AAGnB,WAAA,CAAC,WAAW,iBAAiB;AAAA,EAAA;AAAA,EAGtC,MAAM,SAAS,MAA8B;AACrC,UAAA,WAAW,KAAK,MAAM,eAAe;AACrC,UAAA,gBAAgB,KAAK,MAAM,oBAAoB;AAC/C,UAAA,QAAQ,KAAK,MAAM,SAAS;AAM5B,UAAA,gCAAkC,IAAI;AACtC,UAAA,gBAAkC,IAAI,IAAI,CAAC,GAAG,cAAc,MAAM,EAAE,IAAI,CAAC,OAAe;AACrF,aAAA,CAAC,MAAM,IAAI,KAAK;AAAA,IAAA,CACxB,CAAC;AAQI,UAAA,WAAW,KAAK,MAAM,YAAY;AAEpC,QAAA,SAAS,UAAU,MAAM;AAC3B,YAAM,MAAM,kDAAkD;AAAA,IAAA;AAGtD,cAAA,IAAI,SAAS,OAAO,KAAK;AAEnC,QAAI,QAAQ;AACR,QAAA,CAAC,QAAQ,KAAK,UAAU;AAC1B,cAAQ,KAAK,SAAS;AAClB,UAAA,wCAAwB,IAAY;AAC7B,iBAAA,CAAC,EAAE,KAAK,eAAe;AAChC,cAAM,CAAC,GAAG,oBAAoB,IAAI,MAAM,KAAK;AAAA,UAC3C;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAEA,mBAAW,oBAAoB,CAAC,GAAG,oBAAoB,GAAG;AACxD,4BAAkB,IAAI,gBAAgB;AAAA,QAAA;AAExC,0BAAkB,OAAO,EAAE;AAAA,MAAA;AAG7B,aAAO,kBAAkB,MAAM;AACvB,cAAA,2CAA2B,IAAY;AAC7C,mBAAW,eAAe,CAAC,GAAG,iBAAiB,GAAG;AAC1C,gBAAA,eAAe,cAAc,IAAI,WAAW;AAC9C,cAAA,iBAAiB,SAAS,iBAAiB,QAAW;AACxD,kBAAM,CAAC,GAAGC,qBAAoB,IAAI,MAAM,KAAK;AAAA,cAC3C;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA;AAAA,cACA;AAAA,YACF;AACA,uBAAW,oBAAoB,CAAC,GAAGA,qBAAoB,GAAG;AACxDA,oCAAqB,IAAI,gBAAgB;AAAA,YAAA;AAAA,UAC3C;AAAA,QACF;AAEkB,4BAAA;AAAA,MAAA;AAAA,IACtB,WACS,KAAK,UAAU;AACnB,WAAA,MAAM,WAAW,KAAK,QAAQ;AAAA,IAAA;AAGrC,SAAK,YAAY,IAAI;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA,KAAK,WAAW,KAAK,SAAS,QAAQ;AAAA,IACxC;AAAA,EAAA;AAAA,EAGF,MAAM,cAAc,QAAiB,MAAM,UAAmB,QAA4F;AACxJ,QAAI,OAAO;AACT,WAAK,QAAQ,MAAM,KAAK,gBAAgB,OAAO;AAAA,IAAA;AAEjD,WAAO,KAAK;AAAA,EAAA;AAAA,EAGd,MAAM,gBAAgB,SAAuF;AAC3G,UAAM,cAA0E,CAAC;AACjF,aAAS,WAAW,KAAK,UAAU,OAAO,UAAU;AAClD,gBAAU,MAAM;AAChB,UAAI,SAAS;AACX,cAAM,QAAQ,IAAI,QAAQ,IAAI,OAAO,WAAoB;AACjD,gBAAA,QAAQ,MAAM,OAAO,SAAS;AAEpC,cAAI,OAAO,QAAQ,SAAU,CAAC,MAAM,QAAQ,MAAM,GAAI;AAEpD,kBAAM,YAAY,MAAM,MAAM,eAAe,OAAO;AACpD,gBAAI,WAAW;AACP,oBAAA,SAAS,OAAO,KAAK,SAAS;AAC9B,oBAAA,SAAS,OAAO,KAAK;AACvB,kBAAA,EAAE,UAAU,cAAc;AAChB,4BAAA,MAAM,IAAI,CAAC;AAAA,cAAA;AAEzB,kBAAI,EAAE,UAAU,YAAY,MAAM,IAAI;AACpC,4BAAY,MAAM,EAAE,MAAM,IAAI,CAAC;AAAA,cAAA;AAErB,0BAAA,MAAM,EAAE,MAAM,IAAI;AAAA,YAAA;AAAA,UAChC;AAAA,QACF,CACD,CAAC;AAAA,MAAA;AAAA,IACJ;AAEK,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,4BACJ,gBACA,gBACA,aACA,UACA,OAC0C;AACpC,UAAA,gCAAgB,IAAiB;AAEjC,UAAA,wCAAwB,IAAY;AACpC,UAAA,mCAA0D,IAAI;AAEpE,UAAM,cAAc,IAAI;AAAA,MACtB,CAAC,GAAG,SAAS,OAAQ,CAAA,EAClB,OAAO,CAAC,SAAS,KAAK,gBAAgB,WAAW,EACjD,IAAI,CAAC,SAAS,KAAK,KAAK;AAAA,IAC7B;AACM,UAAA,oCAA2C,IAAI;AAC/C,UAAA,aAAa,OAAO,MAAkB,SAA4B;AAChE,YAAA,MAAM,KAAK,SAAS;AACd,kBAAA,OAAO,KAAK,KAAK;AACvB,YAAA,SAAS,QAAQ,KAAK;AAC5B,UAAI,QAAQ;AACV,sBAAc,IAAI,CAAC,KAAK,QAAQ,MAAM,CAAC;AAAA,MAAA;AAErC,UAAA,WAAW,eAAe,IAAI,GAAG;AACrC,UAAI,oBAAoB,SAAS;AAC/B,mBAAW,MAAM;AAAA,MAAA;AAEf,UAAA,aAAa,SAAS,aAAa,QAAW;AAGtC,kBAAA,IAAI,KAAK,QAAQ;AAAA,MAAA;AAE7B,UAAI,CAAC,UAAU,IAAI,GAAG,GAAG;AACb,kBAAA,IAAI,KAAK,EAAE;AAAA,MAAA;AAEjB,YAAA,aAAa,cAAc,KAAK,OAAO,KAAK,OAAO,MAAM,KAAK,IAAI;AAIxE,iBAAW,CAAC,QAAQ,MAAM,KAAK,OAAO;AACpC,YAAI,OAAO,SAAS,KAAK,MAAM,GAAG;AAC1B,gBAAA,aAAa,SAAS,IAAI,MAAM;AACtC,cAAI,CAAC,YAAY;AACf,kBAAM,MAAM,qBAAqB;AAAA,UAAA;AAEnC,gBAAM,QAAQ,WAAW,eACrB,WAAW,eACX;AACA,cAAA,SAAS,UAAU,aAAa;AAClC,8BAAkB,IAAI,KAAK;AAAA,UAAA;AAE7B,cAAI,WAAW,gBAAgB,QAAQ,WAAW,iBAAiB,KAAK,gBAAgB,WAAW,iBAAiB,WAAW,UAAU,UAAU,CAAC,aAAa,IAAI,WAAW,SAAS,MAAM,GAAG;AAChM,yBAAa,IAAI,WAAW,SAAS,QAAQ,CAAC,YAAY,IAAI,CAAC;AAAA,UAAA;AAEjE;AAAA,QAAA;AAAA,MACF;AAEE,UAAA,MAAM,QAAQ,UAAU,GAAG;AACvB,cAAA,QAAQ,UAAU,IAAI,GAAG;AAC3B,YAAA,UAAU,UAAa,UAAU,OAAO;AAC1C,qBAAW,cAAc,UAAU,IAAI,GAAG,GAAG;AAC3C,gBAAI,EAAE,sBAAsB,eAAe,EAAE,sBAAsB,aAAa;AAC9E,oBAAM,MAAM,2BAA2B,OAAO,UAAU,QAAQ,OAAO,UAAU,EAAE;AAAA,YAAA;AAGjF,gBAAA,WAAW,cAAc,WAAW,YAAY;AAClD,yBAAW,MAAM,YAAY;AAC3B,2BAAW,KAAK,EAAE;AAAA,cAAA;AAEpB;AAAA,YAAA;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEF,gBAAU,IAAI,GAAG,EAAE,KAAK,UAAU;AAAA,IACpC;AAEA,eAAW,QAAQ,gBAAgB;AAC3B,YAAA,aAAa,SAAS,IAAI,WAAW;AAC3C,UAAI,eAAe,QAAW;AAC5B;AAAA,MAAA;AAEF,UAAI,CAAC,WAAW,gBAAgB,WAAW,gBAAgB,aAAa;AAChE,cAAA,WAAW,YAAY,IAAI;AAAA,MAAA;AAGnC,UAAI,MAAM;AACF,cAAA,gCAAgB,IAAI;AACf,mBAAA,CAAC,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,KAAK,QAAQ,CAAC,GAAG;AACzC,oBAAA,IAAI,KAAK,KAAK;AAAA,QAAA;AAI1B,SAAC,GAAG,SAAS,OAAA,CAAQ,EAAE,OAAO,CAAC,SAAqB;AAC3C,iBAAA,KAAK,iBAAiB,eAAe,CAAC,UAAU,IAAI,KAAK,MAAM,KAAK,KAAK,aAAa;AAAA,QAAA,CAC9F,EAAE,QAAQ,CAAC,SAAqB,UAAU,IAAI,KAAK,QAAQ,CAAA,CAAE,CAAC;AAE/D,YAAI,CAAC,UAAU,IAAI,KAAK,YAAY,GAAG;AACrC,oBAAU,IAAI,KAAK,cAAc,CAAA,CAAE;AAAA,QAAA;AAE1B,mBAAA,CAAC,QAAQ,SAAS,KAAK,CAAC,GAAG,UAAU,QAAQ,CAAC,GAAG;AAC1D,cAAI,UAAU,aAAa;AAEzB;AAAA,UAAA;AAEI,gBAAA,OAAO,SAAS,IAAI,MAAM;AAChC,cAAI,CAAC,MAAM;AACT,kBAAM,MAAM,8BAA8B,MAAM,OAAO,WAAW,EAAE;AAAA,UAAA;AAEtE,cAAI,cAAc,MAAM;AAChB,kBAAA,WAAW,MAAM,IAAI;AAAA,UAAA;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAEK,WAAA,aAAa,OAAO,GAAG;AAC5B,YAAM,QAAQ,aAAa,QAAQ,EAAE,KAAO,EAAA;AAC5C,UAAI,OAAO;AACT,cAAM,CAAC,MAAM,IAAI,IAAI,MAAM,CAAC;AAExB,YAAA,KAAK,UAAU,CAAC,cAAc,IAAI,CAAC,KAAK,QAAQ,KAAK,MAAM,CAAC,GAAG;AAC3D,gBAAA,WAAW,MAAM,IAAI;AAAA,QAAA;AAEhB,qBAAA,OAAO,MAAM,CAAC,CAAC;AAAA,MAAA;AAAA,IAC9B;AAIF,KAAC,GAAG,YAAY,KAAA,CAAM,EAAE,QAAQ,CAAC,eAAe;AAE9C,UAAI,YAAY;AACJ,kBAAA,IAAI,YAAY,MAAS;AAAA,MAAA;AAAA,IACrC,CAED;AACM,WAAA,CAAC,WAAW,iBAAiB;AAAA,EAAA;AAExC;AAIA,MAAM,aAAa;AAAA,EAMjB,YAAY,WAAwB,UAEhC,IAAI;AAPR;AACA;AAEA;AAKE,SAAK,YAAY;AACjB,SAAK,YAAY,CAAC;AAClB,SAAK,iBAAiB,QAAQ,mBAAmB,UAAa,QAAQ;AAAA,EAAA;AAAA,EAGxE,gBAAgB,KAAa;AAC3B,WAAO,eAAe,CAAC,SAAS,KAAK,UAAU,OAAO,GAAG,GAAG;AAAA,EAAA;AAAA,EAG9D,cAAc,UAAkB,QAAgB,kBAA0B,MAAe,aAAsB;AAC7G,UAAM,SAAS,KAAK,gBAAgB,QAAQ,QAAQ,IAAI,MAAM,EAAE;AAChE,WAAO,IAAI,WAAW;AAAA,MACpB,aAAa,eAAe;AAAA,MAC5B,eAAe;AAAA,MACf,QAAQ;AAAA,MACR,UAAU,KAAK,UAAU;AAAA,MACzB,MAAM,QAAQ;AAAA,MACd,cAAc;AAAA,MACd,kBAAkB;AAAA,IAAA,CACnB;AAAA,EAAA;AAAA,EAGH,gBAAgB,aAA4B,OAAe,MAAc,aAAwB,eAAuB,gBAAwB,aAAsB,UASlK,CAAA,GAAI,QAA+B;AACrC,WAAO,KAAK;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAAA,EAGF,eAAe,aAA4B,OAAe,MAAc,YAA8B,aAAwB,eAAuB,gBAAwB,aAAsB,UAU/L,CAAA,GAAI,QAA+B;AACrC,aAAS,UAAU,CAAC;AACpB,QAAI,yCAAY,IAAI;AACX,aAAA,eAAe,IAAI,WAAW;AAAA,IAAA;AAEvC,WAAO,KAAK;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ,UAAU,iBAAiB;AAAA,MACnC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAAA,EAGF,QAAQ,WAAqC,MAAyC,WAA2B,UAY7G,IAAI,QAA+B;AACrC,UAAM,cAAc,OAAO,cAAc,WAAW,YAAY,UAAU;AAC1E,UAAM,WAAW,gBAAgB,2BAA2B,OAAO,IAAI,yBAAyB,IAAI;AACpG,UAAM,gBAAgB,aAAa;AAC7B,UAAA,YAAW,mCAAS,cACxB,QAAQ,oBAAoB,2BAC1B,QAAQ,WAAW,IAAI,yBAAyB,QAAQ,QAAQ;AAE9D,UAAA,aAAa,mCAAS,eAC1B,QAAQ,qBAAqB,2BAC3B,QAAQ,YAAY,IAAI,yBAAyB,QAAQ,SAAS;AAEhE,UAAA,gBAAgB,mCAAS,kBAC7B,QAAQ,wBAAwB,2BAC9B,QAAQ,eAAe,IAAI,yBAAyB,QAAQ,YAAY;AAEvE,SAAA,UAAU,KAAK,CAAC,UAAuB;AACpC,YAAA,QAAQ,MAAM,SAAS,CAAC;AAC1B,UAAA,MAAM,MAAM,OAAO,CAAAC,UAAQA,MAAK,iBAAiB,SAAS,EAAE,SAAS,GAAG;AACpE,cAAA,MAAM,mBAAmB,WAAW,sBAAsB;AAAA,MAAA;AAElE,YAAM,SAAS,KAAK,gBAAgB,WAAW,WAAW,EAAE;AACtD,YAAA,OAAO,IAAI,WAAW;AAAA,QAC1B,QAAQ,QAAQ,WAAW,SAAY,OAAO,QAAQ;AAAA,QACtD,QAAQ;AAAA,QACR,cAAc,cAAc;AAAA,QAC5B,QAAQ,UAAU;AAAA,QAClB,aAAa,QAAQ,eAAe,CAAC;AAAA,QACrC,UAAU,QAAQ,YAAY;AAAA,QAC9B,aAAa,QAAQ,eAAe;AAAA,QACpC,UAAU,MAAM;AAAA,QAChB,aAAa,CAAC,EAAE,QAAQ,eAAgB,QAAQ,gBAAgB,WAAc,YAAY;AAAA,QAC1F,UAAU,YAAY,IAAI,yBAAyB,EAAE;AAAA,QACrD,WAAW,aAAa,IAAI,yBAAyB,EAAE;AAAA,QACvD,cAAc,gBAAgB,IAAI,yBAAyB,EAAE;AAAA,QAC7D,aAAa,QAAQ,gBAAgB,SAAY,OAAO,QAAQ;AAAA,QAChE,MAAM;AAAA,QACN,cAAc;AAAA,QACd,WAAW,QAAQ,aAAa;AAAA,QAChC,SAAS,QAAQ,YAAY,SAAY,OAAO,QAAQ;AAAA,MAAA,CACzD;AACK,YAAA,MAAM,KAAK,IAAI;AACd,aAAA;AAAA,IAAA,CACR;AAAA,EAAA;AAAA,EAGH,cAAc,aAA4B,OAAe,MAAc,aAAwB,eAAuB,gBAAwB,aAAsB,UAShK,CAAA,GAAI,QAA+B;AACrC,WAAO,KAAK;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAAA,EAGF,cAAc,aAA4B,aAAqB,aAAwB,MAAiC;AACjH,SAAA,UAAU,KAAK,CAAC,UAAuB;AACpC,YAAA,OAAO,gBAAgB,OAAO,MAAM,OAAO,MAAM,MAAM,KAAK,CAAA,SAAQ,KAAK,UAAU,WAAW;AACpG,UAAI,CAAC,MAAM;AACH,cAAA,MAAM,iCAAiC,WAAW,EAAE;AAAA,MAAA;AAEtD,YAAA,YAAY,IAAI,gBAAgB;AAAA,QACpC;AAAA,QACA,eAAe;AAAA,QACf,aAAa;AAAA,QACb,oBAAoB,KAAK;AAAA,MAAA,CAC1B;AACK,YAAA,WAAW,KAAK,SAAS;AACxB,aAAA;AAAA,IAAA,CACR;AACD,QAAI,KAAK,gBAAgB;AAClB,WAAA,QAAQ,aAAa,QAAQ,WAAW;AAAA,IAAA;AAExC,WAAA;AAAA,EAAA;AAAA,EAGT,gBAAgB,aAA4B,OAAe,MAAc,aAAwB,UAAkB,eAAuB,gBAAwB,aAAsB,UASpL,CAAA,GAAI,QAA+B;AACrC,UAAM,SAAS,KAAK,gBAAgB,QAAQ,KAAK,EAAE;AACnD,UAAM,OAAO;AAAA,MACX;AAAA,MACA,QAAQ,UAAU;AAAA,MAClB;AAAA,MACA,aAAa,eAAe;AAAA,MAC5B,YAAY,QAAQ,cAAc;AAAA,MAClC,WAAW,QAAQ,aAAa;AAAA,MAChC,UAAU,KAAK,UAAU;AAAA,MACzB,gBAAgB,QAAQ,kBAAkB;AAAA,MAC1C,cAAc,QAAQ,gBAAgB;AAAA,MACtC,YAAY,QAAQ,cAAc;AAAA,MAClC,cAAc,QAAQ,gBAAgB;AAAA;AAAA,MACtC,WAAW,QAAQ,aAAa;AAAA,MAChC;AAAA,MACA,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,gBAAgB;AAAA,MAChB,WAAW,QAAQ,aAAa;AAAA,MAChC,eAAe;AAAA,MACf,4BAA4B;AAAA,IAC9B;AACI,QAAA,gBAAgB,OAAO,gBAAgB,MAAM;AAC/C,WAAK,eAAe;AACf,WAAA,cAAc,aAAa,KAAK,cAAc,aAAa,IAAI,yBAAyB,IAAI,CAAC;AAAA,IAAA;AAE/F,SAAA,UAAU,KAAK,CAAC,UAAuB;AAC1C,YAAM,OAAO,gBAAgB,OAAO,MAAM,OAAO,MAAM,MAAM,KAAK,CAAAX,UAAQA,MAAK,UAAU,WAAW;AACpG,UAAI,CAAC,MAAM;AACH,cAAA,MAAM,+BAA+B,WAAW,EAAE;AAAA,MAAA;AAG1D,WAAK,eAAe,KAAK,iBAAiB,KAAK,KAAK,eAAe,KAAK,gBAAgB;AAClF,YAAA,UAAU,IAAI,WAAW,IAAI;AAC7B,YAAA,MAAM,KAAK,OAAO;AACxB,YAAM,OAAO,KAAK,cAAc,KAAK,QAAQ,QAAQ,cAAc;AAC7D,YAAA,MAAM,KAAK,IAAI;AACd,aAAA;AAAA,IAAA,CACR;AAEG,QAAA,KAAK,kBAAkB,aAAa,YAAY;AAC5C,YAAA,SAAS,wBAAwB,IAAI;AACrCY,YAAAA,UAAS,OAAO,iBAAiB;AACvCA,cAAO,QAAQ;AACV,WAAA;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,QACAA;AAAAA,QACA;AAAA,UACE,WAAW,KAAK;AAAA,UAChB,YAAY;AAAA;AAAA,QAAA;AAAA,MAEhB;AAAA,IAAA;AAEK,WAAA;AAAA,EAAA;AAAA,EAGT,gBACE,QACA,QACA,MACA,QACA,UAII,IACU;AACT,SAAA,UAAU,KAAK,CAAC,UAAuB;AnB13BhD,UAAA1B;AmB23BY,YAAA,OAAO,MAAM,MAAM,KAAK,CAAAc,UAAQA,MAAK,WAAW,MAAM;AAC5D,UAAI,CAAC,MAAM;AACT,cAAM,MAAM,8BAA8B,MAAM,OAAO,aAAa,MAAM,wBAAwB;AAAA,MAAA;AAE9F,YAAA,QAAOd,MAAA,MAAM,UAAN,gBAAAA,IAAa,KAAK,CAAAyB,UAAQA,MAAK,iBAAiB,KAAK;AAElE,UAAI,MAAM;AACF,cAAA,qBAAqB,KAAK,gBAAgB,SAAS,MAAM,IAAI,OAAO,EAAE,EAAE;AAExE,cAAA,mBAAmB,IAAI,0BAA0B;AAAA,UACrD,SAAS,KAAK;AAAA,UACd;AAAA,UACA,IAAI;AAAA,UACJ,OAAO,IAAI,yBAAyB,IAAI;AAAA,UACxC,SAAS;AAAA,UACT,WAAW,QAAQ,aAAa;AAAA,UAChC,SAAS,QAAQ,YAAY,UAAa,QAAQ;AAAA,UAClD,WAAW,OAAO;AAAA,QAAA,CACnB;AACK,cAAA,0BAA0B,MAAM,2BAA2B,CAAC;AAC5D,cAAA,wBAAwB,KAAK,gBAAgB;AAAA,MAAA,WAC1C,CAAC,QAAQ,YAAY;AACxB,cAAA,MAAM,4BAA4B,MAAM,gBAAgB,KAAK,YAAY,aAAa,MAAM,OAAO,wCAAwC;AAAA,MAAA;AAE5I,aAAA;AAAA,IAAA,CACR;AACM,WAAA;AAAA,EAAA;AAAA,EAGT,QAAQ;AACF,QAAA,CAAC,KAAK,UAAU,MAAM;AACxB,YAAM,MAAM,oEAAoE;AAAA,IAAA;AAG5E,UAAA,QAAQ,KAAK,UAAU,KAAK;AAC3B,WAAA,KAAK,UAAU,OAAO,CAACE,QAAO,aAAa,SAASA,MAAK,GAAG,KAAK;AAAA,EAAA;AAE5E;AAEA,MAAM,qBAA+C;AAAA,EAMnD,YAAY,MAAY,OAAoB,gBAA6D;AALzG;AACA;AACA;AACA;AA6PA;AACA;AACA;AACA;AA7PE,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,iBAAiB;AAAA,EAAA;AAAA;AAAA,EAIxB,wBAAwB,YAAgC;AACtD,UAAM,iBAAiB,cAAc;AACrC,UAAM,QAAQ,CAAC,GAAG,KAAK,MAAM,MAAM,QAAQ;AACpC,WAAA,CAAC,GAAG,MAAM;AAAA,MACf,CAAC,KAAkB,SAAkC;AACnD,YAAI,KAAK,4BAA4B;AACnC,cAAI,gBAAgB;AAClB,gBAAI,KAAK,qBAAqB,KAAK,gBAAgB,IAAI,IAAI,GAAG;AACxD,kBAAA,IAAI,KAAK,0BAA0B;AAAA,YAAA;AAAA,UACzC,OACK;AACD,gBAAA,IAAI,KAAK,0BAA0B;AAAA,UAAA;AAAA,QACzC;AAEK,eAAA;AAAA,MACT;AAAA,0BAAO,IAAI;AAAA,IAAA,CACZ;AAAA,EAAA;AAAA,EAGH,eAAe,YAAgC;AAC7C,UAAM,iBAAiB,cAAc;AACrC,UAAM,QAAQ,CAAC,GAAG,KAAK,MAAM,MAAM,QAAQ;AACpC,WAAA,CAAC,GAAG,MAAM;AAAA,MACf,CAAC,KAAkB,SAAkC;AnBt8B3D,YAAA3B;AmBu8BY,YAAA,CAAC,WAAW,cAAc,EAAE,SAAS,KAAK,QAAQ,OAAKA,MAAA,KAAK,WAAL,gBAAAA,IAAa,gBAAe;AACrF,cAAI,gBAAgB;AAClB,gBAAI,KAAK,qBAAqB,KAAK,gBAAgB,IAAI,IAAI,GAAG;AACxD,kBAAA,IAAI,KAAK,OAAO,aAAa;AAAA,YAAA;AAAA,UACnC,OACK;AACD,gBAAA,IAAI,KAAK,OAAO,aAAa;AAAA,UAAA;AAAA,QACnC;AAEK,eAAA;AAAA,MACT;AAAA,0BAAO,IAAI;AAAA,IAAA,CACZ;AAAA,EAAA;AAAA,EAGH,WAAW,eAAqC;AACxC,UAAA,gBAAgB,KAAK,oBAAoB;AACzC,UAAA,OAAO,KAAK,MAAM,KAAK;AAGvB,UAAA,oBAAoB,IAAI,IAAI,CAAC,GAAG,cAAc,QAAQ,EAAE,OAAO,CAAC,cAA+B;AACnG,aAAO,KAAK,qBAAqB,UAAU,eAAe,IAAI,IAAI;AAAA,IAAA,CACnE,EAAE,IAAI,CAAC,cAA+B,CAAC,UAAU,aAAa,UAAU,gBAAgB,QAAQ,UAAU,gBAAgB,MAAM,UAAU,gBAAgB,IAAI,CAAC,CAAC;AAC3J,UAAA,gCAAqC,IAAI;AAC/C,eAAW,CAAC,GAAG,EAAE,KAAK,KAAK,YAAY;AACrC,iBAAW,KAAK,IAAI;AACd,YAAA,UAAU,IAAI,CAAC,GAAG;AACd,gBAAA,MAAM,4BAA4B,CAAC,0BAA0B,UAAU,IAAI,CAAC,CAAC,QAAQ,CAAC,WAAW;AAAA,QAAA;AAE/F,kBAAA,IAAI,GAAG,CAAC;AAAA,MAAA;AAAA,IACpB;AAGF,QAAI,QAAQ;AAEM,sBAAA,IAAI,MAAM,IAAI;AAChC,WAAO,QAAQ,iBAAiB;AAC9B,YAAM,WAAW,CAAC,GAAG,kBAAkB,SAAS,EAAE,OAAO,CAAC,CAAC,GAAG,MAAM,MAAyB,CAAC,MAAM;AAChG,UAAA,SAAS,WAAW,GAAG;AACzB;AAAA,MAAA;AAES,iBAAA,CAAC,EAAE,KAAK,UAAU;AAC3B,YAAI,OAAO,MAAM;AACf;AAAA,QAAA;AAEI,cAAA,OAAO,UAAU,IAAI,EAAE;AAC7B,YAAI,CAAC,MAAM;AACH,gBAAA,MAAM,oCAAoC,EAAE,EAAE;AAAA,QAAA;AAEpC,0BAAA,IAAI,IAAI,IAAI;AAC9B,YAAI,CAAC,kBAAkB,IAAI,IAAI,GAAG;AACd,4BAAA,IAAI,MAAM,KAAK;AAAA,QAAA;AAAA,MACnC;AAEO,eAAA;AAAA,IAAA;AAGX,QAAI,SAAS,iBAAiB;AAC5B,YAAM,MAAM,iFAAiF;AAAA,IAAA;AAG/F,UAAM,eAAe,IAAI,IAAI,CAAC,GAAG,KAAK,eAAe,EAAE,OAAQ,CAAA,EAAE,OAAO,CAAC,SAAqB;AACpF,aAAA,KAAK,gBAAgB,kBAAkB,IAAI,KAAK,YAAY,KAAM,KAAK,WAAW;AAAA,IAC3F,CAAA,EAAE,IAAI,CAAC,SAAqB,KAAK,MAAM,CAAC;AAEzC,SAAK,MAAM,SAAS,KAAK,MAAM,SAAS,CAAA,GAAI,OAAO,CAAC,SAAqB,kBAAkB,IAAI,KAAK,YAAY,CAAC;AACjH,SAAK,MAAM,2BAA2B,KAAK,MAAM,2BAA2B,CAAA,GAAI,OAAO,CAAC,SAAoC,aAAa,IAAI,KAAK,OAAO,CAAC;AACrJ,SAAA,MAAM,SAAS,KAAK,MAAM,SAAS,IAAI,OAAO,CAAC,UAAsB,KAAK,kBAAkB,QAAQ,aAAa,IAAI,KAAK,aAAa,MAAM,aAAa,IAAI,KAAK,YAAY,CAAC;AACrL,SAAK,MAAM,cAAc,KAAK,MAAM,cAAc,CAAA,GAAI,OAAO,CAAC,OAAwB,kBAAkB,IAAI,GAAG,WAAW,CAAC;AAC3H,SAAK,MAAM,SAAS,KAAK,MAAM,SAAS,CAAA,GAAI,OAAO,CAAC,SAAqB,aAAa,IAAI,KAAK,MAAM,CAAC;AAGtG,QAAI,MAAM,QAAQ,aAAa,KAAK,KAAK,MAAM,oBAAoB;AACjE,WAAK,MAAM,qBAAqB,KAAK,MAAM,mBAAmB,OAAO,CAAC,QAAgC,cAAc,SAAS,IAAI,WAAW,CAAC;AAAA,IAAA,OACxI;AACA,WAAA,MAAM,qBAAqB,CAAC;AAAA,IAAA;AAAA,EACnC;AAAA,EAGF,cAA2B;AACzB,UAAM,QAAQ,KAAK;AACnB,WAAO,IAAI,YAAY;AAAA,MACrB,QAAQ,MAAM;AAAA,MACd,OAAO,MAAM;AAAA,MACb,yBAAyB,MAAM;AAAA,MAC/B,OAAO,MAAM;AAAA,MACb,QAAQ,MAAM;AAAA,MACd,gBAAgB,MAAM;AAAA,MACtB,gBAAgB,MAAM;AAAA,MACtB,aAAa,MAAM;AAAA,MACnB,OAAO,MAAM;AAAA,MACb,oBAAoB,MAAM;AAAA,MAC1B,SAAS,MAAM;AAAA,MACf,WAAW,MAAM;AAAA,MACjB,aAAa,MAAM;AAAA,MACnB,YAAY,MAAM;AAAA,MAClB,eAAe,MAAM;AAAA,MACrB,MAAM,MAAM;AAAA,MACZ,YAAY,MAAM;AAAA,MAClB,OAAO,MAAM;AAAA,MACb,aAAa,MAAM;AAAA,MACnB,aAAa,MAAM;AAAA,MACnB,8BAA8B,MAAM;AAAA,MACpC,iCAAiC,MAAM;AAAA,MACvC,MAAM,MAAM;AAAA,MACZ,MAAM,MAAM;AAAA,MACZ,UAAU,MAAM;AAAA,MAChB,aAAa,MAAM;AAAA,MACnB,SAAS,MAAM;AAAA,IAAA,CAChB;AAAA,EAAA;AAAA,EAGH,MAAM,IAAI,SAAyD,QAAiC;AAClG,UAAM,WAAW,UAAU,EAAE,OAAO,QAAW,MAAM,OAAU;AAC/D,UAAM,WAAW,CAAC;AAClB,qBAAiB,YAAY,KAAK,QAAQ,QAAQ,GAAG;AACnD,eAAS,KAAK,QAAQ;AAAA,IAAA;AAEjB,WAAA,QAAQ,IAAI,QAAQ;AAAA,EAAA;AAAA,EAG7B,WAAW,UAA0B;AACnC,QAAI,SAAS,OAAO;AACZ,YAAA,QAAQ,KAAK,eAAe;AAClC,eAAS,QAAQ,SAAS,MAAM,OAAO,CAAQ,SAAA;AAC7C,cAAM,OAAO,MAAM,IAAI,KAAK,YAAY;AACxC,YAAI,CAAC,MAAM;AACH,gBAAA,MAAM,QAAQ,KAAK,MAAM,kBAAkB,KAAK,YAAY,6BAA6B,KAAK,MAAM,OAAO,EAAE;AAAA,QAAA;AAErH,eAAO,KAAK,qBAAqB,KAAK,gBAAgB,IAAI,IAAI;AAAA,MAAA,CAC/D;AAAA,IAAA;AAAA,EACH;AAAA,EAGF,OAAO,kBAAkB,iBAA+D,OAAc,OAAO,aAAsB,MAAM;AACvI,qBAAiB,kBAAkB,iBAAiB;AAClD,YAAM,KAAK,mBAAmB,gBAAgB,MAAM,UAAU;AAAA,IAAA;AAAA,EAChE;AAAA,EAGF,OAAO,QAAQ,QAAkE;AACxE,WAAA,KAAK,kBAAkB,YAAY,QAAQ,KAAK,KAAK,SAAS,OAAO,KAAK,GAAG,OAAO,IAAI;AAAA,EAAA;AAAA,EAGjG,MAAM,WAAW,IAAqC;AAC7C,WAAA,MAAM,YAAY,QAAQ,EAAE;AAAA,EAAA;AAAA,EAGrC,MAAM,KAAK,IAAY,OAAgB,MAAM,aAAsB,MAAqB;AACtF,UAAM,OAAO,MAAM,KAAK,WAAW,EAAE;AACrC,WAAO,KAAK,mBAAmB,MAAM,MAAM,UAAU;AAAA,EAAA;AAAA,EAGvD,uBAAuB,aAA4D;AAC3E,UAAA,aAAa,KAAK,oBAAoB;AACtC,UAAA,QAAQ,KAAK,sBAAsB;AACzC,SAAK,sBAAsB,IAAI,IAAI,CAAC,GAAG,WAAW,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,MAA8D;AAChI,YAAM,IAAI,OAAO;AACjB,UAAI,WAAW,IAAI,CAAC,KAAK,MAAM,IAAI;AAC1B,eAAA,CAAC,KAAK,KAAK;AAAA,MAAA,OACb;AACC,cAAA,OAAO,MAAM,IAAI,CAAC;AACxB,YAAI,MAAM;AAGD,iBAAA,CAAC,KAAK,QAAQ,KAAK;AAAA,QAAA,OACrB;AACC,gBAAA,MAAM,kBAAkB,GAAG,gCAAgC;AAAA,QAAA;AAAA,MACnE;AAAA,IACF,CACD,CAAC;AAAA,EAAA;AAAA;AAAA;AAAA,EAKJ,yBAAwE;AAClE,QAAA,CAAC,KAAK,qBAAqB;AACvB,YAAA,cAAc,IAAI,IAAI,CAAC,GAAG,KAAK,oBAAqB,CAAA,EAAE;AAAA,QAC1D,CAAC,CAAC,GAAG,CAAC,MAAuC,CAAC,GAAG,IAAI;AAAA,MAAA,CACtD;AACW,kBAAA,IAAI,IAAI,IAAI;AACxB,WAAK,uBAAuB,WAAW;AAAA,IAAA;AAEzC,UAAM,sBAAsB,KAAK;AACjC,QAAI,wBAAwB,QAAW;AACrC,YAAM,MAAM,oCAAoC;AAAA,IAAA;AAG3C,WAAA;AAAA,EAAA;AAAA,EAGT,qBAAqB,aAAqB,MAAkC;AAC1E,QAAI,YAAmD,KAAK,uBAAuB,EAAE,IAAI,WAAW;AAChG,QAAA,aAAa,OAAO,aAAa,YAAY;AACzC,YAAA,QAAQ,KAAK,sBAAsB;AAC7B,kBAAA,UAAU,aAAa,MAAM,KAAK;AAAA,IAAA;AAEhD,QAAI,CAAC,WAAW;AACP,aAAA;AAAA,IAAA;AAET,QAAI,cAAc,MAAM;AACf,aAAA;AAAA,IAAA;AAET,UAAM,MAAM,+BAA+B,SAAS,kBAAkB,WAAW,EAAE;AAAA,EAAA;AAAA,EAGrF,aAAa,IAAY,UAAiC,aAAsB,MAAY;AACtF,QAAA,CAAC,KAAK,gBAAgB;AACxB,YAAM,MAAM,kDAAkD,KAAK,KAAK,cAAc,EAAE;AAAA,IAAA;AAGpF,UAAA,WAAiB,IAAI,KAAK;AAAA,MAC9B;AAAA,MACA,KAAK,eAAe,UAAU;AAAA,MAC9B,CAAC,SACC,IAAI,wBAAwB,MAAM,MAAM,UAAU,UAAU;AAAA,MAC9D;AAAA,IACF;AACO,WAAA;AAAA,EAAA;AAAA,EAQT,cAAc,QAAyC;AAC/C,UAAA,iCAAiB,IAAwB;AAC/C,UAAM,QAAQ,KAAK,SAAS,EAAE,IAAI,MAAM;AACxC,QAAI,OAAO;AACT,iBAAW,CAAA,EAAG,CAAC,KAAK,KAAK,kBAAkB;AACzC,YAAI,MAAM,SAAS,EAAE,MAAM,GAAG;AAC5B,cAAI,EAAE,OAAO;AACA,uBAAA,IAAI,EAAE,OAAO,CAAC;AAAA,UAAA;AAAA,QAC3B;AAAA,MACF;AAAA,IACF;AAEK,WAAA;AAAA,EAAA;AAAA,EAGT,aAAa;AACP,QAAA,KAAK,SAAS,KAAK,YAAY;AACjC,YAAM,MAAM,yDAAyD;AAAA,IAAA;AAGlE,SAAA,4BAAY,IAAsB;AAClC,SAAA,4BAAY,IAAwB;AACpC,SAAA,iCAAiB,IAA6B;AAEnD,UAAM,QAAQ,KAAK,SAAS,aAAa,SAAS,KAAK,KAAK,OAAO;AACnE,QAAI,CAAC,OAAO;AACV,YAAM,MAAM,wBAAwB,KAAK,KAAK,OAAO,eAAe;AAAA,IAAA;AAEtE,UAAM,QAAQ,IAAI,IAAI,MAAM,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC;AACpE,UAAM,aAAa,IAAI;AAAA,MACrB,MAAM,MACH,OAAO,CAAC,SAAS,KAAK,YAAY,EAClC,IAAI,CAAC,SAAS;AAAA,QACb,KAAK,gBAAgB;AAAA,QACrB,IAAI,gBAAgB;AAAA,UAClB,aAAa;AAAA,UACb,eAAe;AAAA,UACf,aAAa,KAAK,gBAAgB;AAAA,UAClC,oBAAoB;AAAA,QACrB,CAAA;AAAA,MACF,CAAA;AAAA,IACL;AACW,eAAA,aAAa,MAAM,YAAY;AAC7B,iBAAA,IAAI,UAAU,aAAa,SAAS;AAAA,IAAA;AAGjD,UAAM,YAAY,MAAM,MAAM,IAAI,CAAC,SAAS;AAAA,MAC1C,KAAK;AAAA,MACL,KAAK;AAAA,IAAA,CACN;AACD,UAAM,QAA+B,UAAU,OAAO,CAAC4B,QAAO,OAAO;AACnE,YAAM,QAAQA,OAAM,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC;AAC7B,YAAA,KAAK,GAAG,CAAC,CAAC;AAChBA,aAAM,IAAI,GAAG,CAAC,GAAG,KAAK;AACfA,aAAAA;AAAAA,IAAA,GACF,oBAAA,IAAA,CAAuB;AAE9B,SAAK,QAAQ;AACb,SAAK,aAAa;AAClB,SAAK,QAAQ;AACb,SAAK,eAAe,IAAI;AAAA,MACtB,CAAC,GAAG,MAAM,OAAQ,CAAA,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,SAAS,IAAI,IAAI,CAAC;AAAA,IAC5D;AAAA,EAAA;AAAA,EAGF,wBAAiD;AAC3C,QAAA,CAAC,KAAK,cAAc;AACtB,WAAK,WAAW;AAAA,IAAA;AAEd,QAAA,CAAC,KAAK,cAAc;AACtB,YAAM,MAAM,uBAAuB;AAAA,IAAA;AAErC,WAAO,KAAK;AAAA,EAAA;AAAA,EAGd,WAAkC;AAC5B,QAAA,CAAC,KAAK,OAAO;AACf,WAAK,WAAW;AAAA,IAAA;AAEd,QAAA,CAAC,KAAK,OAAO;AACf,YAAM,MAAM,uBAAuB;AAAA,IAAA;AAErC,WAAO,KAAK;AAAA,EAAA;AAAA,EAGd,iBAA0C;AACpC,QAAA,CAAC,KAAK,OAAO;AACf,WAAK,WAAW;AAAA,IAAA;AAEd,QAAA,CAAC,KAAK,OAAO;AACf,YAAM,MAAM,uBAAuB;AAAA,IAAA;AAErC,WAAO,KAAK;AAAA,EAAA;AAAA,EAGd,sBAAoD;AAC9C,QAAA,CAAC,KAAK,YAAY;AACpB,WAAK,WAAW;AAAA,IAAA;AAEd,QAAA,CAAC,KAAK,YAAY;AACpB,YAAM,MAAM,4BAA4B;AAAA,IAAA;AAE1C,WAAO,KAAK;AAAA,EAAA;AAAA,EAGd,cAA0B;AAClB,UAAA,QAAQ,KAAK,eAAe;AAClC,UAAM,WAAW,CAAC,GAAG,MAAM,OAAQ,CAAA,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE,YAAY;AAChE,QAAI,CAAC,UAAU;AACP,YAAA;AAAA,QACJ,gCAAgC,KAAK,KAAK,cAAc,oBAAoB,KAAK,MAAM,OAAO;AAAA,MAChG;AAAA,IAAA;AAEO,aAAA,QAAQ,SAAS,SAAS;AAC5B,WAAA;AAAA,EAAA;AAAA,EAGT,mBACE,UACA,OAAgB,OAChB,aAAsB,MACP;AAEf,UAAM,OAAa,KAAK;AAAA,MACtB,SAAS,iBAAiB;AAAA,MAC1B;AAAA,MACA;AAAA,IACF;AAEI,QAAA,CAAC,KAAK,GAAG;AACX,YAAM,MAAM,gDAAgD;AAAA,IAAA;AAG9D,WAAO,KAAK,EAAE,SAAS,IAAI,EAAE,KAAK,MAAM,IAAI;AAAA,EAAA;AAEhD;AAEA,SAAS,yBACP,gBACA,MACA,OACyC;AnBrzC3C,MAAA5B;AmBszCM,MAAA;AACJ,MAAI,CAAC,gBAAgB;AAGnB,UAAM,oBAA+E;AAAA,MACnF,CAAC,KAAK,cAAc,IAAGA,MAAA,cAAc,0BAA6B;AAAA,MAEzD,GADP,cADqBA,KACd,MACP,cAFqBA,KAEd,OAFcA;AAAA,IAIzB;AACM,UAAA,kBAAkB,KAAK,cAAc;AAAA,EAAA,OACtC;AACC,UAAA;AAAA,EAAA;AAGR,QAAM,UAAU,IAAI,qBAAwB,MAAM,OAAO,GAAG;AAC5D,MAAI,UAAU,KAAK;AACZ,SAAA;AACT;AAEA,MAAM,aAAa;AAAA,EAMjB,YAAYW,eAA4B;AALxC,wCAAwB;AACxB;AACA;AACA;AAGE,SAAK,eAAeA;AACf,SAAA,6BAAa,IAAuC;AACpD,SAAA,4BAAY,IAAkB;AAAA,EAAA;AAAA,EAGrC,MAAM,WAAW,uBAAyD,QAAW;AACnF,QAAI,KAAK,cAAc;AACrB;AAAA,IAAA;AAEF,QAAI,yBAAyB,QAAW;AACtC,6BAAuB,IAAI,qBAAqB;AAAA,IAAA;AAElD,UAAM,aAA0B,MAAM,KAAK,aAAa,UAAU;AAElE,QAAI,SAA2C,OAAO,QAAQ,WAAW,QAAQ,CAAC;AAClF,UAAM,gBAAgB,qBAAqB;AAC3C,QAAI,kBAAkB,MAAM;AAC1B,UAAI,kBAAkB,OAAO;AAC3B,cAAM,MAAM,+CAA+C;AAAA,MAAA,WAClD,kBAAkB,MAAM;AACjC,iBAAS,OAAO;AAAA,UACd,CAAC,CAAC,SAAS,CAAC,MAAiC,cAAc,SAAS,OAAO;AAAA,QAC7E;AAAA,MAAA;AAAA,IACF;AAEF,WAAO,QAAQ,CAAC,CAAC,SAAS,IAAI,MAAiC;AACxD,WAAA,UAAU,KAAK,WAAW;AACzB,YAAA,OAAO,IAAI,KAAK,IAAI;AAC1B,WAAK,MAAM,IAAI,KAAK,gBAAgB,IAAI;AAAA,IAAA,CACzC;AACD,QAAI,qBAAqB,iBAAiB;AACxC,YAAM,QAAQ,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC;AAAA,IAAA;AAG1D,SAAK,eAAe;AAAA,EAAA;AAAA,EAGtB,MAAM,UAAoC,YAAsG;AAC1I,QAAA;AACA,QAAA,OAAO,cAAc,UAAU;AAChB,uBAAA;AAAA,IAAA,OACZ;AACL,uBAAiB,WAAW;AAAA,IAAA;AAG9B,QAAI,OAAO,KAAK,MAAM,IAAI,cAAc;AACxC,QAAI,SAAS,QAAW;AACtB,aAAO,CAAC,GAAG,KAAK,MAAM,OAAQ,CAAA,EAAE,KAAK,CAAAkB,UAAQA,MAAK,YAAY,cAAc;AAC5E,UAAI,SAAS,QAAW;AAChB,cAAA,MAAM,0DAA0D,cAAc,EAAE;AAAA,MAAA;AAExF,mBAAa,KAAK;AAAA,IAAA;AAGpB,UAAM,UAAU,KAAK,OAAO,IAAI,KAAK,OAAO;AAC5C,QAAI,YAAY,QAAW;AAClB,aAAA;AAAA,IAAA;AAGT,UAAM,WAAW,MAAM,KAAK,aAAa,SAAS,KAAK,IAAI;AAC3D,QAAI,CAAC,UAAU;AACb,YAAM,MAAM,wBAAwB,KAAK,OAAO,EAAE;AAAA,IAAA;AAG9C,UAAA,QAAQ,IAAI,YAAY,QAAQ;AAElC,QAAA;AACA,QAAA,OAAO,cAAc,UAAU;AAChB,uBAAA;AACT,cAAA,yBAA+B,QAAW,MAAM,KAAK;AAAA,IAAA,OACxD;AACL,uBAAiB,WAAW;AACpB,cAAA,yBAA+B,YAAY,MAAM,KAAK;AAAA,IAAA;AAGhE,SAAK,OAAO,IAAI,MAAM,SAAS,MAAM,UAAU,EAAE;AACjD,WAAO,MAAM,UAAU;AAAA,EAAA;AAAA,EAGzB,MAAM,IAA8B,YAAsG;AACpI,QAAA;AACA,QAAA,OAAO,cAAc,UAAU;AAChB,uBAAA;AAAA,IAAA,OACZ;AACL,uBAAiB,WAAW;AAAA,IAAA;AAI9B,SAAK,WAAW,MAAS;AACzB,QAAI,OAAO,KAAK,MAAM,IAAI,cAAc;AACxC,QAAI,SAAS,QAAW;AACf,aAAA,CAAC,GAAG,KAAK,MAAM,OAAQ,CAAA,EAAE,KAAK,CAAA,MAAK,EAAE,YAAY,cAAc;AACtE,UAAI,SAAS,QAAW;AAChB,cAAA,MAAM,gCAAgC,cAAc,EAAE;AAAA,MAAA;AAAA,IAC9D;AAGF,UAAM,UAAU,KAAK,OAAO,IAAI,KAAK,OAAO;AAC5C,QAAI,YAAY,QAAW;AAClB,aAAA,KAAK,UAAU,UAAU;AAAA,IAAA;AAE3B,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,YAAgC,YAAoB,OAAgB,MAAM,aAAsB,MAAkB;AACtH,UAAM,OAAO,MAAM,YAAY,QAAQ,UAAU;AACjD,QAAI,QAAQ,KAAK,OAAO,IAAI,KAAK,iBAAiB,QAAQ;AAC1D,QAAI,CAAC,OAAO;AACV,cAAQ,MAAM,KAAK,UAAU,KAAK,iBAAiB,QAAQ;AAC3D,UAAI,CAAC,OAAO;AACJ,cAAA,MAAM,gCAAgC,UAAU,EAAE;AAAA,MAAA;AAAA,IAC1D;AAEF,WAAO,MAAM,mBAAmB,MAAM,MAAM,UAAU;AAAA,EAAA;AAAA,EAGxD,SAAS,SAA8B;AACrC,UAAM,UAAU,KAAK,OAAO,IAAI,OAAO;AACvC,QAAI,YAAY,QAAW;AACnB,YAAA,MAAM,gCAAgC,OAAO,EAAE;AAAA,IAAA;AAEvD,WAAO,QAAQ;AAAA,EAAA;AAEnB;AAEM,MAAA,eAAe,IAAI,aAAa,YAAY;AAClD,YAAY,eAAe;AC38C3B,MAAM,kBAAkB,OAAO;AAAA,EAA/B;AAAA;AACE;AAAA;AACF;AAEA,MAAe,aAAa;AAAA,EAC1B,MAAM,OAAO,OAAuC;AAC9C,QAAA,CAAC,MAAM,GAAG;AACZ,YAAM,MAAM,uEAAuE;AAAA,IAAA;AAErF,UAAM,OAAO,MAAO,MAAM,MAAM,EAAE,iBAAiB;AAC5C,WAAA,KAAK,YAAY,MAAM,CAAC;AAAA,EAAA;AAAA,EAejC,MAAM,YAAY,OAAY,OAA6B;AACrD,QAAA;AACJ,QAAI,iBAAiB,SAAS;AAC5B,cAAQ,MAAM;AAAA,IAAA;AAEhB,QAAI,iBAAiB,sBAAsB;AAC9B,iBAAA,KAAK,kBAAkB,OAAO,KAAK;AAAA,IAAA,WACrC,iBAAiB,eAAe;AAC9B,iBAAA,KAAK,WAAW,OAAO,KAAK;AAAA,IAAA,WAC9B,iBAAiB,uBAAuB;AACtC,iBAAA,KAAK,mBAAmB,OAAO,KAAK;AAAA,IAAA,WACtC,iBAAiB,2BAA2B;AAC1C,iBAAA,KAAK,wBAAwB,OAAO,KAAK;AAAA,IAAA,WAC3C,iBAAiB,mBAAmB;AAClC,iBAAA,KAAK,eAAe,OAAO,KAAK;AAAA,IAAA,WAClC,iBAAiB,OAAO;AACtB,iBAAA,KAAK,YAAY,OAAO,KAAK;AAAA,IAAA,WAC/B,iBAAiB,mBAAmB,iBAAiB,+BAA+B,OAAO,UAAU,UAAU;AAC7G,iBAAA,KAAK,aAAa,OAAO,KAAK;AAAA,IAAA,WAChC,iBAAiB,kBAAkB;AACjC,iBAAA,KAAK,cAAc,OAAO,KAAK;AAAA,IAAA,WACjC,iBAAiB,iBAAiB;AAChC,iBAAA,KAAK,aAAa,OAAO,KAAK;AAAA,IAAA,WAChC,iBAAiB,kBAAkB;AAC5C,iBAAW,KAAK,YAAY,MAAM,MAAM,WAAW,KAAK;AAAA,IAAA,WAC/C,iBAAiB,cAAc;AACxC,iBAAW,KAAK,UAAU,MAAM,OAAO,KAAK;AAAA,IAAA,WACnC,iBAAiB,QAAQ;AACvB,iBAAA,KAAK,YAAY,OAAO,KAAK;AAAA,IAAA,OACnC;AACM,iBAAA;AAAA,IAAA;AAEN,WAAA;AAAA,EAAA;AAEX;AAEA,MAAM,iBAAiB,aAAa;AAAA,EAClC,MAAM,kBAAkB,OAA6B,QAA8B;AAC1E,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,aAAa,OAA+D,QAA8B;AAC9G,WAAO,GAAG,KAAK;AAAA,EAAA;AAAA,EAGjB,MAAM,aAAa,OAAiC,QAA8B;AAChF,WAAO,GAAG,KAAK;AAAA,EAAA;AAAA,EAGjB,MAAM,cAAc,OAAmC,QAA8B;AACnF,WAAO,MAAM,SAAS;AAAA,EAAA;AAAA,EAGxB,MAAM,WAAW,OAAsB,QAA8B;AAC5D,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,mBAAmB,OAA8B,QAA8B;AAC5E,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,wBAAwB,OAAuC,QAA8B;AAC1F,WAAA;AAAA,EAAA;AAAA,EAGT,MAAM,eAAe,OAA0B,OAA6B;AAC1E,WAAO,KAAK,YAAY,MAAM,MAAM,SAAA,GAAY,KAAK;AAAA,EAAA;AAAA,EAGvD,MAAM,UAAU,OAAqB,QAA8B;AAC1D,WAAA;AAAA,EAAA;AAAA,EAGT,YAAY,OAA4D,OAAoB;AAC1F,UAAM,gBAAsC,CAAC;AAC7C,UAAM,WAA4B,CAAC;AACnC,eAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,KAAK,GAAG;AACvC,eAAA;AAAA,QACP,KAAK,YAAY,OAAO,QAAQ,CAAC,EAAE,KAAK,CAAC,QAAa;AAAE,wBAAc,GAAG,IAAI;AAAA,QAAM,CAAA;AAAA,MACrF;AAAA,IAAA;AAEF,WAAO,QAAQ,IAAI,QAAQ,EAAE,KAAK,MAAM,aAAa;AAAA,EAAA;AAAA,EAGvD,MAAM,YAAY,OAAY,OAA6B;AACvD,WAAO,QAAQ,IAAI,MAAM,IAAI,CAAC,QAAa,KAAK,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC;AAAA,EAAA;AAGlF;AAEA,MAAM,yBAAyB,SAAS;AAAA,EAOtC,YAAY,WAMT;AACK,UAAA;AAbR;AACA;AACA;AACA;AACA;AAUE,SAAK,oBAAoB,UAAU;AACnC,SAAK,aAAa,UAAU;AAC5B,SAAK,mBAAmB,UAAU;AAClC,SAAK,yBAAyB,UAAU;AACxC,SAAK,YAAY,UAAU;AAAA,EAAA;AAAA,EAG7B,MAAM,UAAU,OAAqB,QAA8B;AACjE,UAAM,OAAO,IAAI,KAAK,KAAK,KAAK;AAC1B,UAAA,UAAU,IAAI,UAAU,IAAI;AAC1B,YAAA,UAAU,MAAM,KAAK;AACtB,WAAA;AAAA,EAAA;AAAA,EAGT,MAAe,kBAAkB,aAAmC,GAAyB;AACrF,UAAA,QAAQ,MAAM,YAAY,SAAS;AACzC,UAAM,MAAM,KAAK,mBAAmB,MAAM,KAAK,iBAAiB,WAAW,IAAG;AAC9E,UAAM,OAAO,MAAM,IAAI,MAAM,SAAU,CAAA,KAAK,IAAI,KAAM,CAAA,MAAM,MAAM,SAAS;AACrE,UAAA,UAAU,IAAI,UAAU;AAAA;AAAA,+CAEa,MAAM,EAAE;AAAA;AAAA,QAE/C,IAAI;AAAA,aACC,QAAQ,OAAO,GAAG,EAAE,MAAM;AAC3B,YAAA,UAAU,YAAY,SAAS;AAChC,WAAA;AAAA,EAAA;AAAA,EAGT,MAAe,WAAW,MAAqB,GAAyB;AACtE,UAAM,QAAQ,MAAM;AACd,UAAA,OAAO,KAAK,aAAa,MAAM,KAAK,WAAW,KAAK,IAAG,MAAM,YAAY;AACzE,UAAA,UAAU,IAAI,UAAU;AAAA,sBACZ,IAAI;AAAA,QAClB,IAAI;AAAA,aACC,QAAQ,OAAO,GAAG,EAAE,MAAM;AACnC,YAAQ,UAAU;AACX,WAAA;AAAA,EAAA;AAAA,EAGT,MAAe,mBAAmB,cAAqC,GAAyB;AACxF,UAAA,QAAQ,MAAM,aAAa,SAAS;AAC1C,UAAM,MAAM,KAAK,oBAAoB,MAAM,KAAK,kBAAkB,YAAY,IAAG;AAC3E,UAAA,OAAO,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI,KAAM,CAAA,MAAM,MAAM;AACvD,UAAA,UAAU,IAAI,UAAU;AAAA;AAAA,gDAEc,MAAM,EAAE;AAAA,yBAC/B,MAAM,YAAY,MAAM,UAAU,KAAK,EAAE;AAAA,2BACvC,MAAM,YAAY,MAAM,UAAU,SAAS,EAAE;AAAA;AAAA,QAEhE,IAAI;AAAA,aACC,QAAQ,OAAO,GAAG,EAAE,MAAM;AAC3B,YAAA,UAAU,aAAa,SAAS;AACjC,WAAA;AAAA,EAAA;AAAA,EAGT,MAAe,wBAAwB,MAAsC,GAAyB;AACpG,UAAM,QAAQ,MAAM,KAAK,QAAQ,KAAK;AACtC,UAAM,MAAM,KAAK,yBAAyB,MAAM,KAAK,uBAAuB,IAAI,IAAG;AACnF,QAAI,QAAQ,MAAM,SAAS,MAAM,QAAQ;AACnC,UAAA,OAAO,MAAM,IAAI,KAAK,KAAK,IAAI,KAAA,CAAM,MAAM;AACjD,UAAM,mBAAmB,MAAM,YAAY,QAAQ,MAAM,EAAE;AAC3D,QAAI,kBAAkB;AACpB,cAAQ,iBAAiB;AAAA,IAAA;AAErB,UAAA,UAAU,IAAI,UAAU;AAAA;AAAA,8EAE4C,MAAM,EAAE;AAAA,uBAC/D,MAAM,OAAO;AAAA;AAAA,QAE5B,IAAI;AAAA,aACC,QAAQ,OAAO,GAAG,EAAE,MAAM;AAC3B,YAAA,UAAU,KAAK,SAAS;AACzB,WAAA;AAAA,EAAA;AAEX;AAEA,MAAM,6BAA6B,iBAAiB;AAAA,EAClD,MAAe,eAAe,IAAuB,OAA6B;AAC1E,UAAA,WAAW,CAAC,IAAI,MAAM,GAAG,oBAAoB,QAAS,CAAA,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,KAAK,OAAO,EAAE,IAAI,CAAC;AACpG,UAAM,QAAQ,OAAO,YAAY,MAAM,QAAQ,IAAI,QAAQ,CAAC;AAC5D,WAAO,MAAM,eAAe,IAAI,KAAK,EAAE,KAAK,OAAM,UAAS;AACzD,YAAM,OAAO;AAAA,QACX,6BAA6B,GAAG,OAAO,IAAI;AAAA,QAC3C,GAAG,OAAO,QAAQ,MAAM,KAAK,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM;AAC7C,gBAAA,OAAO,MAAM,GAAG;AACtB,cAAI,WAAW,KAAK;AACpB,cAAI,KAAK,WAAW;AAClB,uBAAW,IAAI,KAAK,IAAI,KAAK,KAAK,UAAU,IAAI,CAAC;AAAA,UAAA;AAE9C,eAAA,OAAO,SAAS,YAAY,iBAAiB,WAAW,MAAM,QAAQ,IAAI,KAAK,IAAI;AACtF,mBAAO,+BAA+B,QAAQ,sCAAsC,KAAK,KAAK;AAAA,EAAwC,MAAM,MAAM,IAAI,EAAE,IAAI,CAAA,MAAK,OAAO,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA;AAAA,UAAA,OAClL;AACL,mBAAO,+BAA+B,QAAQ,sCAAsC,KAAK,KAAK,uCAAuC,KAAK;AAAA,UAAA;AAAA,QAE7I,CAAA,EAAE,KAAK,IAAI,EAAE,MAAM,IAAI;AAAA,MAC1B;AACI,UAAA,KAAK,CAAC,KAAK,IAAI;AACjB,aAAK,CAAC,KAAK;AACX,aAAK,IAAI;AAAA,MAAA;AAEJ,aAAA,KAAK,IAAI,CAAQ,SAAA,KAAK,IAAI,EAAE,EAAE,KAAK,IAAI;AAAA,IAAA,CAC/C;AAAA,EAAA;AAAA,EAGH,MAAe,YAAY,OAAY,OAA6B;AAChE,UAAM,OAAO,MAAM,MAAM,YAAY,OAAO,KAAK;AACjD,QAAI,iBAAiB,cAAc,MAAM,QAAQ,IAAI,KAAK,IAAI;AACrD,aAAA,KAAK,IAAI,CAAC,MAAW,GAAG,CAAC,EAAE,EAAE,KAAK,IAAI;AAAA,IAAA,OACxC;AACE,aAAA,KAAK,KAAK,IAAI;AAAA,IAAA;AAAA,EACvB;AAAA,EAGJ,MAAM,aAAa,OAA+D,QAA8B;AAC9G,QAAI,MAAM,QAAQ,IAAI,KAAK,IAAI;AAC7B,cAAQ,WAAW,MAAM,MAAM,IAAI,EAAE,KAAK,QAAQ;AAAA,IAAA;AAE7C,WAAA;AAAA,EAAA;AAEX;AAEA,MAAM,qBAAqB,SAAS;AAAA,EAClC,MAAM,WAAW,OAAsB,QAA8B;AACnE,WAAO,MAAM,QAAQ;AAAA,EAAA;AAAA,EAGvB,MAAM,cAAc,OAAmC,QAA8B;AACnF,WAAO,OAAO,UAAU,YAAY,QAAQ,MAAM,QAAQ;AAAA,EAAA;AAAA,EAG5D,MAAM,mBAAmB,OAA8B,QAA8B;AACnF,WAAO,MAAM,QAAQ;AAAA,EAAA;AAAA,EAGvB,MAAM,kBAAkB,OAA6B,QAA8B;AACjF,WAAO,MAAM,QAAQ;AAAA,EAAA;AAAA,EAGvB,MAAM,wBAAwB,OAAuC,QAA8B;AAE3F,UAAA,MAAM,MAAM,QAAQ;AACnB,WAAA;AAAA,EAAA;AAEX;;;;;;;;AC3QA,MAAM,gBAAgBC;AACtB,MAAM,qBAAqBC;AAC3B,MAAM,qBAAqBC;","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}